
tmp117_uasrt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000157  0800aa0c  0800aa0c  0000ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab64  0800ab64  0000bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab6c  0800ab6c  0000bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab70  0800ab70  0000bb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800ab74  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007c4  2000005c  0800abd0  0000c05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000820  0800abd0  0000c820  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d23b  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c94  00000000  00000000  000292cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001628  00000000  00000000  0002cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001101  00000000  00000000  0002e590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038bad  00000000  00000000  0002f691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020cd6  00000000  00000000  0006823e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e6f4  00000000  00000000  00088f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e7608  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006328  00000000  00000000  001e764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001ed974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a9f4 	.word	0x0800a9f4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800a9f4 	.word	0x0800a9f4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_dmul>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800028e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000292:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000296:	bf1d      	ittte	ne
 8000298:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800029c:	ea94 0f0c 	teqne	r4, ip
 80002a0:	ea95 0f0c 	teqne	r5, ip
 80002a4:	f000 f8de 	bleq	8000464 <__aeabi_dmul+0x1dc>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea81 0603 	eor.w	r6, r1, r3
 80002ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002ba:	bf18      	it	ne
 80002bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c8:	d038      	beq.n	800033c <__aeabi_dmul+0xb4>
 80002ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80002ce:	f04f 0500 	mov.w	r5, #0
 80002d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002de:	f04f 0600 	mov.w	r6, #0
 80002e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002e6:	f09c 0f00 	teq	ip, #0
 80002ea:	bf18      	it	ne
 80002ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002fc:	d204      	bcs.n	8000308 <__aeabi_dmul+0x80>
 80002fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000302:	416d      	adcs	r5, r5
 8000304:	eb46 0606 	adc.w	r6, r6, r6
 8000308:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800030c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000310:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000314:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000318:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800031c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000320:	bf88      	it	hi
 8000322:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000326:	d81e      	bhi.n	8000366 <__aeabi_dmul+0xde>
 8000328:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000340:	ea46 0101 	orr.w	r1, r6, r1
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000350:	bfc2      	ittt	gt
 8000352:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000356:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800035a:	bd70      	popgt	{r4, r5, r6, pc}
 800035c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000360:	f04f 0e00 	mov.w	lr, #0
 8000364:	3c01      	subs	r4, #1
 8000366:	f300 80ab 	bgt.w	80004c0 <__aeabi_dmul+0x238>
 800036a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800036e:	bfde      	ittt	le
 8000370:	2000      	movle	r0, #0
 8000372:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000376:	bd70      	pople	{r4, r5, r6, pc}
 8000378:	f1c4 0400 	rsb	r4, r4, #0
 800037c:	3c20      	subs	r4, #32
 800037e:	da35      	bge.n	80003ec <__aeabi_dmul+0x164>
 8000380:	340c      	adds	r4, #12
 8000382:	dc1b      	bgt.n	80003bc <__aeabi_dmul+0x134>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0520 	rsb	r5, r4, #32
 800038c:	fa00 f305 	lsl.w	r3, r0, r5
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f205 	lsl.w	r2, r1, r5
 8000398:	ea40 0002 	orr.w	r0, r0, r2
 800039c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a8:	fa21 f604 	lsr.w	r6, r1, r4
 80003ac:	eb42 0106 	adc.w	r1, r2, r6
 80003b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b4:	bf08      	it	eq
 80003b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f1c4 040c 	rsb	r4, r4, #12
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f304 	lsl.w	r3, r0, r4
 80003c8:	fa20 f005 	lsr.w	r0, r0, r5
 80003cc:	fa01 f204 	lsl.w	r2, r1, r4
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003e4:	bf08      	it	eq
 80003e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f1c4 0520 	rsb	r5, r4, #32
 80003f0:	fa00 f205 	lsl.w	r2, r0, r5
 80003f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f8:	fa20 f304 	lsr.w	r3, r0, r4
 80003fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000400:	ea43 0302 	orr.w	r3, r3, r2
 8000404:	fa21 f004 	lsr.w	r0, r1, r4
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	fa21 f204 	lsr.w	r2, r1, r4
 8000410:	ea20 0002 	bic.w	r0, r0, r2
 8000414:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f094 0f00 	teq	r4, #0
 8000428:	d10f      	bne.n	800044a <__aeabi_dmul+0x1c2>
 800042a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800042e:	0040      	lsls	r0, r0, #1
 8000430:	eb41 0101 	adc.w	r1, r1, r1
 8000434:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000438:	bf08      	it	eq
 800043a:	3c01      	subeq	r4, #1
 800043c:	d0f7      	beq.n	800042e <__aeabi_dmul+0x1a6>
 800043e:	ea41 0106 	orr.w	r1, r1, r6
 8000442:	f095 0f00 	teq	r5, #0
 8000446:	bf18      	it	ne
 8000448:	4770      	bxne	lr
 800044a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	eb43 0303 	adc.w	r3, r3, r3
 8000454:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000458:	bf08      	it	eq
 800045a:	3d01      	subeq	r5, #1
 800045c:	d0f7      	beq.n	800044e <__aeabi_dmul+0x1c6>
 800045e:	ea43 0306 	orr.w	r3, r3, r6
 8000462:	4770      	bx	lr
 8000464:	ea94 0f0c 	teq	r4, ip
 8000468:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800046c:	bf18      	it	ne
 800046e:	ea95 0f0c 	teqne	r5, ip
 8000472:	d00c      	beq.n	800048e <__aeabi_dmul+0x206>
 8000474:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000478:	bf18      	it	ne
 800047a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800047e:	d1d1      	bne.n	8000424 <__aeabi_dmul+0x19c>
 8000480:	ea81 0103 	eor.w	r1, r1, r3
 8000484:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd70      	pop	{r4, r5, r6, pc}
 800048e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000492:	bf06      	itte	eq
 8000494:	4610      	moveq	r0, r2
 8000496:	4619      	moveq	r1, r3
 8000498:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800049c:	d019      	beq.n	80004d2 <__aeabi_dmul+0x24a>
 800049e:	ea94 0f0c 	teq	r4, ip
 80004a2:	d102      	bne.n	80004aa <__aeabi_dmul+0x222>
 80004a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a8:	d113      	bne.n	80004d2 <__aeabi_dmul+0x24a>
 80004aa:	ea95 0f0c 	teq	r5, ip
 80004ae:	d105      	bne.n	80004bc <__aeabi_dmul+0x234>
 80004b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004b4:	bf1c      	itt	ne
 80004b6:	4610      	movne	r0, r2
 80004b8:	4619      	movne	r1, r3
 80004ba:	d10a      	bne.n	80004d2 <__aeabi_dmul+0x24a>
 80004bc:	ea81 0103 	eor.w	r1, r1, r3
 80004c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd70      	pop	{r4, r5, r6, pc}
 80004d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004da:	bd70      	pop	{r4, r5, r6, pc}

080004dc <__aeabi_drsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e002      	b.n	80004e8 <__adddf3>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dsub>:
 80004e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e8 <__adddf3>:
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004f2:	ea94 0f05 	teq	r4, r5
 80004f6:	bf08      	it	eq
 80004f8:	ea90 0f02 	teqeq	r0, r2
 80004fc:	bf1f      	itttt	ne
 80004fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000502:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000506:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800050a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800050e:	f000 80e2 	beq.w	80006d6 <__adddf3+0x1ee>
 8000512:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000516:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800051a:	bfb8      	it	lt
 800051c:	426d      	neglt	r5, r5
 800051e:	dd0c      	ble.n	800053a <__adddf3+0x52>
 8000520:	442c      	add	r4, r5
 8000522:	ea80 0202 	eor.w	r2, r0, r2
 8000526:	ea81 0303 	eor.w	r3, r1, r3
 800052a:	ea82 0000 	eor.w	r0, r2, r0
 800052e:	ea83 0101 	eor.w	r1, r3, r1
 8000532:	ea80 0202 	eor.w	r2, r0, r2
 8000536:	ea81 0303 	eor.w	r3, r1, r3
 800053a:	2d36      	cmp	r5, #54	@ 0x36
 800053c:	bf88      	it	hi
 800053e:	bd30      	pophi	{r4, r5, pc}
 8000540:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000544:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000548:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800054c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000550:	d002      	beq.n	8000558 <__adddf3+0x70>
 8000552:	4240      	negs	r0, r0
 8000554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000558:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800055c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000560:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000564:	d002      	beq.n	800056c <__adddf3+0x84>
 8000566:	4252      	negs	r2, r2
 8000568:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800056c:	ea94 0f05 	teq	r4, r5
 8000570:	f000 80a7 	beq.w	80006c2 <__adddf3+0x1da>
 8000574:	f1a4 0401 	sub.w	r4, r4, #1
 8000578:	f1d5 0e20 	rsbs	lr, r5, #32
 800057c:	db0d      	blt.n	800059a <__adddf3+0xb2>
 800057e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000582:	fa22 f205 	lsr.w	r2, r2, r5
 8000586:	1880      	adds	r0, r0, r2
 8000588:	f141 0100 	adc.w	r1, r1, #0
 800058c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000590:	1880      	adds	r0, r0, r2
 8000592:	fa43 f305 	asr.w	r3, r3, r5
 8000596:	4159      	adcs	r1, r3
 8000598:	e00e      	b.n	80005b8 <__adddf3+0xd0>
 800059a:	f1a5 0520 	sub.w	r5, r5, #32
 800059e:	f10e 0e20 	add.w	lr, lr, #32
 80005a2:	2a01      	cmp	r2, #1
 80005a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a8:	bf28      	it	cs
 80005aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ae:	fa43 f305 	asr.w	r3, r3, r5
 80005b2:	18c0      	adds	r0, r0, r3
 80005b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	d507      	bpl.n	80005ce <__adddf3+0xe6>
 80005be:	f04f 0e00 	mov.w	lr, #0
 80005c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80005ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005d2:	d31b      	bcc.n	800060c <__adddf3+0x124>
 80005d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d8:	d30c      	bcc.n	80005f4 <__adddf3+0x10c>
 80005da:	0849      	lsrs	r1, r1, #1
 80005dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005e4:	f104 0401 	add.w	r4, r4, #1
 80005e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f0:	f080 809a 	bcs.w	8000728 <__adddf3+0x240>
 80005f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	ea41 0105 	orr.w	r1, r1, r5
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000610:	4140      	adcs	r0, r0
 8000612:	eb41 0101 	adc.w	r1, r1, r1
 8000616:	3c01      	subs	r4, #1
 8000618:	bf28      	it	cs
 800061a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800061e:	d2e9      	bcs.n	80005f4 <__adddf3+0x10c>
 8000620:	f091 0f00 	teq	r1, #0
 8000624:	bf04      	itt	eq
 8000626:	4601      	moveq	r1, r0
 8000628:	2000      	moveq	r0, #0
 800062a:	fab1 f381 	clz	r3, r1
 800062e:	bf08      	it	eq
 8000630:	3320      	addeq	r3, #32
 8000632:	f1a3 030b 	sub.w	r3, r3, #11
 8000636:	f1b3 0220 	subs.w	r2, r3, #32
 800063a:	da0c      	bge.n	8000656 <__adddf3+0x16e>
 800063c:	320c      	adds	r2, #12
 800063e:	dd08      	ble.n	8000652 <__adddf3+0x16a>
 8000640:	f102 0c14 	add.w	ip, r2, #20
 8000644:	f1c2 020c 	rsb	r2, r2, #12
 8000648:	fa01 f00c 	lsl.w	r0, r1, ip
 800064c:	fa21 f102 	lsr.w	r1, r1, r2
 8000650:	e00c      	b.n	800066c <__adddf3+0x184>
 8000652:	f102 0214 	add.w	r2, r2, #20
 8000656:	bfd8      	it	le
 8000658:	f1c2 0c20 	rsble	ip, r2, #32
 800065c:	fa01 f102 	lsl.w	r1, r1, r2
 8000660:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000664:	bfdc      	itt	le
 8000666:	ea41 010c 	orrle.w	r1, r1, ip
 800066a:	4090      	lslle	r0, r2
 800066c:	1ae4      	subs	r4, r4, r3
 800066e:	bfa2      	ittt	ge
 8000670:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000674:	4329      	orrge	r1, r5
 8000676:	bd30      	popge	{r4, r5, pc}
 8000678:	ea6f 0404 	mvn.w	r4, r4
 800067c:	3c1f      	subs	r4, #31
 800067e:	da1c      	bge.n	80006ba <__adddf3+0x1d2>
 8000680:	340c      	adds	r4, #12
 8000682:	dc0e      	bgt.n	80006a2 <__adddf3+0x1ba>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0220 	rsb	r2, r4, #32
 800068c:	fa20 f004 	lsr.w	r0, r0, r4
 8000690:	fa01 f302 	lsl.w	r3, r1, r2
 8000694:	ea40 0003 	orr.w	r0, r0, r3
 8000698:	fa21 f304 	lsr.w	r3, r1, r4
 800069c:	ea45 0103 	orr.w	r1, r5, r3
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	f1c4 040c 	rsb	r4, r4, #12
 80006a6:	f1c4 0220 	rsb	r2, r4, #32
 80006aa:	fa20 f002 	lsr.w	r0, r0, r2
 80006ae:	fa01 f304 	lsl.w	r3, r1, r4
 80006b2:	ea40 0003 	orr.w	r0, r0, r3
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	fa21 f004 	lsr.w	r0, r1, r4
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	f094 0f00 	teq	r4, #0
 80006c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006ca:	bf06      	itte	eq
 80006cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d0:	3401      	addeq	r4, #1
 80006d2:	3d01      	subne	r5, #1
 80006d4:	e74e      	b.n	8000574 <__adddf3+0x8c>
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf18      	it	ne
 80006dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e0:	d029      	beq.n	8000736 <__adddf3+0x24e>
 80006e2:	ea94 0f05 	teq	r4, r5
 80006e6:	bf08      	it	eq
 80006e8:	ea90 0f02 	teqeq	r0, r2
 80006ec:	d005      	beq.n	80006fa <__adddf3+0x212>
 80006ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80006f2:	bf04      	itt	eq
 80006f4:	4619      	moveq	r1, r3
 80006f6:	4610      	moveq	r0, r2
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	ea91 0f03 	teq	r1, r3
 80006fe:	bf1e      	ittt	ne
 8000700:	2100      	movne	r1, #0
 8000702:	2000      	movne	r0, #0
 8000704:	bd30      	popne	{r4, r5, pc}
 8000706:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800070a:	d105      	bne.n	8000718 <__adddf3+0x230>
 800070c:	0040      	lsls	r0, r0, #1
 800070e:	4149      	adcs	r1, r1
 8000710:	bf28      	it	cs
 8000712:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd30      	pop	{r4, r5, pc}
 8000718:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800071c:	bf3c      	itt	cc
 800071e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000722:	bd30      	popcc	{r4, r5, pc}
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800073a:	bf1a      	itte	ne
 800073c:	4619      	movne	r1, r3
 800073e:	4610      	movne	r0, r2
 8000740:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000744:	bf1c      	itt	ne
 8000746:	460b      	movne	r3, r1
 8000748:	4602      	movne	r2, r0
 800074a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800074e:	bf06      	itte	eq
 8000750:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000754:	ea91 0f03 	teqeq	r1, r3
 8000758:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	bf00      	nop

08000760 <__aeabi_ui2d>:
 8000760:	f090 0f00 	teq	r0, #0
 8000764:	bf04      	itt	eq
 8000766:	2100      	moveq	r1, #0
 8000768:	4770      	bxeq	lr
 800076a:	b530      	push	{r4, r5, lr}
 800076c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000770:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000774:	f04f 0500 	mov.w	r5, #0
 8000778:	f04f 0100 	mov.w	r1, #0
 800077c:	e750      	b.n	8000620 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_i2d>:
 8000780:	f090 0f00 	teq	r0, #0
 8000784:	bf04      	itt	eq
 8000786:	2100      	moveq	r1, #0
 8000788:	4770      	bxeq	lr
 800078a:	b530      	push	{r4, r5, lr}
 800078c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000790:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000794:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000798:	bf48      	it	mi
 800079a:	4240      	negmi	r0, r0
 800079c:	f04f 0100 	mov.w	r1, #0
 80007a0:	e73e      	b.n	8000620 <__adddf3+0x138>
 80007a2:	bf00      	nop

080007a4 <__aeabi_f2d>:
 80007a4:	0042      	lsls	r2, r0, #1
 80007a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007b2:	bf1f      	itttt	ne
 80007b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c0:	4770      	bxne	lr
 80007c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007c6:	bf08      	it	eq
 80007c8:	4770      	bxeq	lr
 80007ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007ce:	bf04      	itt	eq
 80007d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007d4:	4770      	bxeq	lr
 80007d6:	b530      	push	{r4, r5, lr}
 80007d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	e71c      	b.n	8000620 <__adddf3+0x138>
 80007e6:	bf00      	nop

080007e8 <__aeabi_ul2d>:
 80007e8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	f04f 0500 	mov.w	r5, #0
 80007f6:	e00a      	b.n	800080e <__aeabi_l2d+0x16>

080007f8 <__aeabi_l2d>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	b530      	push	{r4, r5, lr}
 8000802:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000806:	d502      	bpl.n	800080e <__aeabi_l2d+0x16>
 8000808:	4240      	negs	r0, r0
 800080a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800080e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000812:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000816:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800081a:	f43f aed8 	beq.w	80005ce <__adddf3+0xe6>
 800081e:	f04f 0203 	mov.w	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000836:	f1c2 0320 	rsb	r3, r2, #32
 800083a:	fa00 fc03 	lsl.w	ip, r0, r3
 800083e:	fa20 f002 	lsr.w	r0, r0, r2
 8000842:	fa01 fe03 	lsl.w	lr, r1, r3
 8000846:	ea40 000e 	orr.w	r0, r0, lr
 800084a:	fa21 f102 	lsr.w	r1, r1, r2
 800084e:	4414      	add	r4, r2
 8000850:	e6bd      	b.n	80005ce <__adddf3+0xe6>
 8000852:	bf00      	nop

08000854 <__aeabi_d2f>:
 8000854:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000858:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800085c:	bf24      	itt	cs
 800085e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000862:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000866:	d90d      	bls.n	8000884 <__aeabi_d2f+0x30>
 8000868:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800086c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000870:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000874:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000878:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800087c:	bf08      	it	eq
 800087e:	f020 0001 	biceq.w	r0, r0, #1
 8000882:	4770      	bx	lr
 8000884:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000888:	d121      	bne.n	80008ce <__aeabi_d2f+0x7a>
 800088a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800088e:	bfbc      	itt	lt
 8000890:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000894:	4770      	bxlt	lr
 8000896:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800089e:	f1c2 0218 	rsb	r2, r2, #24
 80008a2:	f1c2 0c20 	rsb	ip, r2, #32
 80008a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008aa:	fa20 f002 	lsr.w	r0, r0, r2
 80008ae:	bf18      	it	ne
 80008b0:	f040 0001 	orrne.w	r0, r0, #1
 80008b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c0:	ea40 000c 	orr.w	r0, r0, ip
 80008c4:	fa23 f302 	lsr.w	r3, r3, r2
 80008c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008cc:	e7cc      	b.n	8000868 <__aeabi_d2f+0x14>
 80008ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008d2:	d107      	bne.n	80008e4 <__aeabi_d2f+0x90>
 80008d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d8:	bf1e      	ittt	ne
 80008da:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008de:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008e2:	4770      	bxne	lr
 80008e4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008ec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_uldivmod>:
 80008f4:	b953      	cbnz	r3, 800090c <__aeabi_uldivmod+0x18>
 80008f6:	b94a      	cbnz	r2, 800090c <__aeabi_uldivmod+0x18>
 80008f8:	2900      	cmp	r1, #0
 80008fa:	bf08      	it	eq
 80008fc:	2800      	cmpeq	r0, #0
 80008fe:	bf1c      	itt	ne
 8000900:	f04f 31ff 	movne.w	r1, #4294967295
 8000904:	f04f 30ff 	movne.w	r0, #4294967295
 8000908:	f000 b97e 	b.w	8000c08 <__aeabi_idiv0>
 800090c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000914:	f000 f806 	bl	8000924 <__udivmoddi4>
 8000918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000920:	b004      	add	sp, #16
 8000922:	4770      	bx	lr

08000924 <__udivmoddi4>:
 8000924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000928:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800092a:	460c      	mov	r4, r1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d14d      	bne.n	80009cc <__udivmoddi4+0xa8>
 8000930:	428a      	cmp	r2, r1
 8000932:	460f      	mov	r7, r1
 8000934:	4684      	mov	ip, r0
 8000936:	4696      	mov	lr, r2
 8000938:	fab2 f382 	clz	r3, r2
 800093c:	d960      	bls.n	8000a00 <__udivmoddi4+0xdc>
 800093e:	b14b      	cbz	r3, 8000954 <__udivmoddi4+0x30>
 8000940:	fa02 fe03 	lsl.w	lr, r2, r3
 8000944:	f1c3 0220 	rsb	r2, r3, #32
 8000948:	409f      	lsls	r7, r3
 800094a:	fa00 fc03 	lsl.w	ip, r0, r3
 800094e:	fa20 f202 	lsr.w	r2, r0, r2
 8000952:	4317      	orrs	r7, r2
 8000954:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000958:	fa1f f48e 	uxth.w	r4, lr
 800095c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000960:	fbb7 f1f6 	udiv	r1, r7, r6
 8000964:	fb06 7711 	mls	r7, r6, r1, r7
 8000968:	fb01 f004 	mul.w	r0, r1, r4
 800096c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000970:	4290      	cmp	r0, r2
 8000972:	d908      	bls.n	8000986 <__udivmoddi4+0x62>
 8000974:	eb1e 0202 	adds.w	r2, lr, r2
 8000978:	f101 37ff 	add.w	r7, r1, #4294967295
 800097c:	d202      	bcs.n	8000984 <__udivmoddi4+0x60>
 800097e:	4290      	cmp	r0, r2
 8000980:	f200 812d 	bhi.w	8000bde <__udivmoddi4+0x2ba>
 8000984:	4639      	mov	r1, r7
 8000986:	1a12      	subs	r2, r2, r0
 8000988:	fa1f fc8c 	uxth.w	ip, ip
 800098c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000990:	fb06 2210 	mls	r2, r6, r0, r2
 8000994:	fb00 f404 	mul.w	r4, r0, r4
 8000998:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800099c:	4564      	cmp	r4, ip
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x8e>
 80009a0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a8:	d202      	bcs.n	80009b0 <__udivmoddi4+0x8c>
 80009aa:	4564      	cmp	r4, ip
 80009ac:	f200 811a 	bhi.w	8000be4 <__udivmoddi4+0x2c0>
 80009b0:	4610      	mov	r0, r2
 80009b2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b6:	ebac 0c04 	sub.w	ip, ip, r4
 80009ba:	2100      	movs	r1, #0
 80009bc:	b125      	cbz	r5, 80009c8 <__udivmoddi4+0xa4>
 80009be:	fa2c f303 	lsr.w	r3, ip, r3
 80009c2:	2200      	movs	r2, #0
 80009c4:	e9c5 3200 	strd	r3, r2, [r5]
 80009c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d905      	bls.n	80009dc <__udivmoddi4+0xb8>
 80009d0:	b10d      	cbz	r5, 80009d6 <__udivmoddi4+0xb2>
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	2100      	movs	r1, #0
 80009d8:	4608      	mov	r0, r1
 80009da:	e7f5      	b.n	80009c8 <__udivmoddi4+0xa4>
 80009dc:	fab3 f183 	clz	r1, r3
 80009e0:	2900      	cmp	r1, #0
 80009e2:	d14d      	bne.n	8000a80 <__udivmoddi4+0x15c>
 80009e4:	42a3      	cmp	r3, r4
 80009e6:	f0c0 80f2 	bcc.w	8000bce <__udivmoddi4+0x2aa>
 80009ea:	4290      	cmp	r0, r2
 80009ec:	f080 80ef 	bcs.w	8000bce <__udivmoddi4+0x2aa>
 80009f0:	4606      	mov	r6, r0
 80009f2:	4623      	mov	r3, r4
 80009f4:	4608      	mov	r0, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0e6      	beq.n	80009c8 <__udivmoddi4+0xa4>
 80009fa:	e9c5 6300 	strd	r6, r3, [r5]
 80009fe:	e7e3      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f040 80a2 	bne.w	8000b4a <__udivmoddi4+0x226>
 8000a06:	1a8a      	subs	r2, r1, r2
 8000a08:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a0c:	fa1f f68e 	uxth.w	r6, lr
 8000a10:	2101      	movs	r1, #1
 8000a12:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a16:	fb07 2014 	mls	r0, r7, r4, r2
 8000a1a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a22:	fb06 f004 	mul.w	r0, r6, r4
 8000a26:	4290      	cmp	r0, r2
 8000a28:	d90f      	bls.n	8000a4a <__udivmoddi4+0x126>
 8000a2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000a2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000a32:	bf2c      	ite	cs
 8000a34:	f04f 0901 	movcs.w	r9, #1
 8000a38:	f04f 0900 	movcc.w	r9, #0
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d903      	bls.n	8000a48 <__udivmoddi4+0x124>
 8000a40:	f1b9 0f00 	cmp.w	r9, #0
 8000a44:	f000 80c8 	beq.w	8000bd8 <__udivmoddi4+0x2b4>
 8000a48:	4644      	mov	r4, r8
 8000a4a:	1a12      	subs	r2, r2, r0
 8000a4c:	fa1f fc8c 	uxth.w	ip, ip
 8000a50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a54:	fb07 2210 	mls	r2, r7, r0, r2
 8000a58:	fb00 f606 	mul.w	r6, r0, r6
 8000a5c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a60:	4566      	cmp	r6, ip
 8000a62:	d908      	bls.n	8000a76 <__udivmoddi4+0x152>
 8000a64:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6c:	d202      	bcs.n	8000a74 <__udivmoddi4+0x150>
 8000a6e:	4566      	cmp	r6, ip
 8000a70:	f200 80bb 	bhi.w	8000bea <__udivmoddi4+0x2c6>
 8000a74:	4610      	mov	r0, r2
 8000a76:	ebac 0c06 	sub.w	ip, ip, r6
 8000a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7e:	e79d      	b.n	80009bc <__udivmoddi4+0x98>
 8000a80:	f1c1 0620 	rsb	r6, r1, #32
 8000a84:	408b      	lsls	r3, r1
 8000a86:	fa04 fe01 	lsl.w	lr, r4, r1
 8000a8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a8e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a92:	40f4      	lsrs	r4, r6
 8000a94:	408a      	lsls	r2, r1
 8000a96:	431f      	orrs	r7, r3
 8000a98:	ea4e 030c 	orr.w	r3, lr, ip
 8000a9c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000aa0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab8:	fb00 f90c 	mul.w	r9, r0, ip
 8000abc:	45a1      	cmp	r9, r4
 8000abe:	d90e      	bls.n	8000ade <__udivmoddi4+0x1ba>
 8000ac0:	193c      	adds	r4, r7, r4
 8000ac2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ac6:	bf2c      	ite	cs
 8000ac8:	f04f 0b01 	movcs.w	fp, #1
 8000acc:	f04f 0b00 	movcc.w	fp, #0
 8000ad0:	45a1      	cmp	r9, r4
 8000ad2:	d903      	bls.n	8000adc <__udivmoddi4+0x1b8>
 8000ad4:	f1bb 0f00 	cmp.w	fp, #0
 8000ad8:	f000 8093 	beq.w	8000c02 <__udivmoddi4+0x2de>
 8000adc:	4650      	mov	r0, sl
 8000ade:	eba4 0409 	sub.w	r4, r4, r9
 8000ae2:	fa1f f983 	uxth.w	r9, r3
 8000ae6:	fbb4 f3f8 	udiv	r3, r4, r8
 8000aea:	fb08 4413 	mls	r4, r8, r3, r4
 8000aee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000af2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	d906      	bls.n	8000b08 <__udivmoddi4+0x1e4>
 8000afa:	193c      	adds	r4, r7, r4
 8000afc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b00:	d201      	bcs.n	8000b06 <__udivmoddi4+0x1e2>
 8000b02:	45a4      	cmp	ip, r4
 8000b04:	d87a      	bhi.n	8000bfc <__udivmoddi4+0x2d8>
 8000b06:	4643      	mov	r3, r8
 8000b08:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	fba0 9802 	umull	r9, r8, r0, r2
 8000b14:	4544      	cmp	r4, r8
 8000b16:	46cc      	mov	ip, r9
 8000b18:	4643      	mov	r3, r8
 8000b1a:	d302      	bcc.n	8000b22 <__udivmoddi4+0x1fe>
 8000b1c:	d106      	bne.n	8000b2c <__udivmoddi4+0x208>
 8000b1e:	45ce      	cmp	lr, r9
 8000b20:	d204      	bcs.n	8000b2c <__udivmoddi4+0x208>
 8000b22:	3801      	subs	r0, #1
 8000b24:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b28:	eb68 0307 	sbc.w	r3, r8, r7
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x222>
 8000b2e:	ebbe 020c 	subs.w	r2, lr, ip
 8000b32:	eb64 0403 	sbc.w	r4, r4, r3
 8000b36:	fa04 f606 	lsl.w	r6, r4, r6
 8000b3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000b3e:	40cc      	lsrs	r4, r1
 8000b40:	431e      	orrs	r6, r3
 8000b42:	e9c5 6400 	strd	r6, r4, [r5]
 8000b46:	2100      	movs	r1, #0
 8000b48:	e73e      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000b4a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b4e:	f1c3 0120 	rsb	r1, r3, #32
 8000b52:	fa04 f203 	lsl.w	r2, r4, r3
 8000b56:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b5a:	40cc      	lsrs	r4, r1
 8000b5c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b60:	fa20 f101 	lsr.w	r1, r0, r1
 8000b64:	fa1f f68e 	uxth.w	r6, lr
 8000b68:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	fb07 4410 	mls	r4, r7, r0, r4
 8000b72:	0c11      	lsrs	r1, r2, #16
 8000b74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b78:	fb00 f406 	mul.w	r4, r0, r6
 8000b7c:	428c      	cmp	r4, r1
 8000b7e:	d90e      	bls.n	8000b9e <__udivmoddi4+0x27a>
 8000b80:	eb1e 0101 	adds.w	r1, lr, r1
 8000b84:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b88:	bf2c      	ite	cs
 8000b8a:	f04f 0901 	movcs.w	r9, #1
 8000b8e:	f04f 0900 	movcc.w	r9, #0
 8000b92:	428c      	cmp	r4, r1
 8000b94:	d902      	bls.n	8000b9c <__udivmoddi4+0x278>
 8000b96:	f1b9 0f00 	cmp.w	r9, #0
 8000b9a:	d02c      	beq.n	8000bf6 <__udivmoddi4+0x2d2>
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	1b09      	subs	r1, r1, r4
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ba6:	fb07 1114 	mls	r1, r7, r4, r1
 8000baa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bae:	fb04 f106 	mul.w	r1, r4, r6
 8000bb2:	4291      	cmp	r1, r2
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x2a2>
 8000bb6:	eb1e 0202 	adds.w	r2, lr, r2
 8000bba:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bbe:	d201      	bcs.n	8000bc4 <__udivmoddi4+0x2a0>
 8000bc0:	4291      	cmp	r1, r2
 8000bc2:	d815      	bhi.n	8000bf0 <__udivmoddi4+0x2cc>
 8000bc4:	4644      	mov	r4, r8
 8000bc6:	1a52      	subs	r2, r2, r1
 8000bc8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bcc:	e721      	b.n	8000a12 <__udivmoddi4+0xee>
 8000bce:	1a86      	subs	r6, r0, r2
 8000bd0:	eb64 0303 	sbc.w	r3, r4, r3
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e70e      	b.n	80009f6 <__udivmoddi4+0xd2>
 8000bd8:	3c02      	subs	r4, #2
 8000bda:	4472      	add	r2, lr
 8000bdc:	e735      	b.n	8000a4a <__udivmoddi4+0x126>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4472      	add	r2, lr
 8000be2:	e6d0      	b.n	8000986 <__udivmoddi4+0x62>
 8000be4:	44f4      	add	ip, lr
 8000be6:	3802      	subs	r0, #2
 8000be8:	e6e3      	b.n	80009b2 <__udivmoddi4+0x8e>
 8000bea:	44f4      	add	ip, lr
 8000bec:	3802      	subs	r0, #2
 8000bee:	e742      	b.n	8000a76 <__udivmoddi4+0x152>
 8000bf0:	3c02      	subs	r4, #2
 8000bf2:	4472      	add	r2, lr
 8000bf4:	e7e7      	b.n	8000bc6 <__udivmoddi4+0x2a2>
 8000bf6:	3802      	subs	r0, #2
 8000bf8:	4471      	add	r1, lr
 8000bfa:	e7d0      	b.n	8000b9e <__udivmoddi4+0x27a>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	e782      	b.n	8000b08 <__udivmoddi4+0x1e4>
 8000c02:	3802      	subs	r0, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	e76a      	b.n	8000ade <__udivmoddi4+0x1ba>

08000c08 <__aeabi_idiv0>:
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <MX_ADC1_Init+0x84>)
 8000c14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c48:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_ADC1_Init+0x80>)
 8000c7a:	f000 ffc7 	bl	8001c0c <HAL_ADC_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000c84:	f000 fafe 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000078 	.word	0x20000078
 8000c90:	42028000 	.word	0x42028000

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ba      	sub	sp, #232	@ 0xe8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	22c0      	movs	r2, #192	@ 0xc0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f009 fa0b 	bl	800a0d0 <memset>
  if(adcHandle->Instance==ADC1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a24      	ldr	r2, [pc, #144]	@ (8000d50 <HAL_ADC_MspInit+0xbc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d140      	bne.n	8000d46 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000cc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000cd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 fff7 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000ce8:	f000 facc 	bl	8001284 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_ADC_MspInit+0xc0>)
 8000cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf2:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <HAL_ADC_MspInit+0xc0>)
 8000cf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_ADC_MspInit+0xc0>)
 8000cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_ADC_MspInit+0xc0>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d10:	4a10      	ldr	r2, [pc, #64]	@ (8000d54 <HAL_ADC_MspInit+0xc0>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_ADC_MspInit+0xc0>)
 8000d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_ADC_MspInit+0xc4>)
 8000d42:	f001 fbc1 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	37e8      	adds	r7, #232	@ 0xe8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	42028000 	.word	0x42028000
 8000d54:	46020c00 	.word	0x46020c00
 8000d58:	42020800 	.word	0x42020800

08000d5c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b50      	ldr	r3, [pc, #320]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d78:	4a4e      	ldr	r2, [pc, #312]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d82:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b48      	ldr	r3, [pc, #288]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d96:	4a47      	ldr	r2, [pc, #284]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000da0:	4b44      	ldr	r3, [pc, #272]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dae:	4b41      	ldr	r3, [pc, #260]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db4:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd2:	4a38      	ldr	r2, [pc, #224]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ddc:	4b35      	ldr	r3, [pc, #212]	@ (8000eb4 <MX_GPIO_Init+0x158>)
 8000dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2104      	movs	r1, #4
 8000dee:	4832      	ldr	r0, [pc, #200]	@ (8000eb8 <MX_GPIO_Init+0x15c>)
 8000df0:	f001 fd42 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2180      	movs	r1, #128	@ 0x80
 8000df8:	4830      	ldr	r0, [pc, #192]	@ (8000ebc <MX_GPIO_Init+0x160>)
 8000dfa:	f001 fd3d 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	21a0      	movs	r1, #160	@ 0xa0
 8000e02:	482f      	ldr	r0, [pc, #188]	@ (8000ec0 <MX_GPIO_Init+0x164>)
 8000e04:	f001 fd38 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <MX_GPIO_Init+0x168>)
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4827      	ldr	r0, [pc, #156]	@ (8000ebc <MX_GPIO_Init+0x160>)
 8000e1e:	f001 fb53 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000e22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4822      	ldr	r0, [pc, #136]	@ (8000ec0 <MX_GPIO_Init+0x164>)
 8000e38:	f001 fb46 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4819      	ldr	r0, [pc, #100]	@ (8000eb8 <MX_GPIO_Init+0x15c>)
 8000e54:	f001 fb38 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <MX_GPIO_Init+0x160>)
 8000e70:	f001 fb2a 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000e74:	2320      	movs	r3, #32
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_GPIO_Init+0x164>)
 8000e8c:	f001 fb1c 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <MX_GPIO_Init+0x164>)
 8000ea8:	f001 fb0e 	bl	80024c8 <HAL_GPIO_Init>

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	@ 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	46020c00 	.word	0x46020c00
 8000eb8:	42021800 	.word	0x42021800
 8000ebc:	42020800 	.word	0x42020800
 8000ec0:	42020400 	.word	0x42020400
 8000ec4:	10210000 	.word	0x10210000

08000ec8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <MX_I2C1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f44 <MX_I2C1_Init+0x7c>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f02:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f04:	f001 fcd0 	bl	80028a8 <HAL_I2C_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f0e:	f000 f9b9 	bl	8001284 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f16:	f002 f9f3 	bl	8003300 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f20:	f000 f9b0 	bl	8001284 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f28:	f002 fa35 	bl	8003396 <HAL_I2CEx_ConfigDigitalFilter>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 f9a7 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000104 	.word	0x20000104
 8000f40:	40005400 	.word	0x40005400
 8000f44:	30909dec 	.word	0x30909dec

08000f48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	22c0      	movs	r2, #192	@ 0xc0
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f009 f8b1 	bl	800a0d0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a26      	ldr	r2, [pc, #152]	@ (800100c <HAL_I2C_MspInit+0xc4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d145      	bne.n	8001004 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f78:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fe9f 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000f98:	f000 f974 	bl	8001284 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <HAL_I2C_MspInit+0xcc>)
 8000fe2:	f001 fa71 	bl	80024c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	37e8      	adds	r7, #232	@ 0xe8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40005400 	.word	0x40005400
 8001010:	46020c00 	.word	0x46020c00
 8001014:	42020400 	.word	0x42020400

08001018 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800101c:	2000      	movs	r0, #0
 800101e:	f002 fa07 	bl	8003430 <HAL_ICACHE_ConfigAssociativityMode>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001028:	f000 f92c 	bl	8001284 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800102c:	f002 fa20 	bl	8003470 <HAL_ICACHE_Enable>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001036:	f000 f925 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fbf9 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f8a9 	bl	80011a0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800104e:	f000 f90b 	bl	8001268 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f7ff fe83 	bl	8000d5c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001056:	f7ff fdd9 	bl	8000c0c <MX_ADC1_Init>
  MX_ICACHE_Init();
 800105a:	f7ff ffdd 	bl	8001018 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800105e:	f000 fa13 	bl	8001488 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8001062:	f000 fa47 	bl	80014f4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001066:	f000 faf9 	bl	800165c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800106a:	f7ff ff2d 	bl	8000ec8 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //step1 - i2C sending 0x00
	  	  buf[0]= REG_temp;//read instruction
 800106e:	2300      	movs	r3, #0
 8001070:	703b      	strb	r3, [r7, #0]
	  	  ret = HAL_I2C_Master_Transmit(&hi2c1,TEMPI2C_add,buf,1,1000); //I2C init for transmitting data;
 8001072:	2390      	movs	r3, #144	@ 0x90
 8001074:	4619      	mov	r1, r3
 8001076:	463a      	mov	r2, r7
 8001078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	4840      	ldr	r0, [pc, #256]	@ (8001184 <main+0x144>)
 8001082:	f001 fcad 	bl	80029e0 <HAL_I2C_Master_Transmit>
 8001086:	4603      	mov	r3, r0
 8001088:	757b      	strb	r3, [r7, #21]
	  	  if(ret != HAL_OK)//checking if I2C transmit is done without error
 800108a:	7d7b      	ldrb	r3, [r7, #21]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <main+0x62>
	  	  {
	  		  strcpy((char*)buf,"ERROR_TX\r\n");//filling buf with error message
 8001090:	463b      	mov	r3, r7
 8001092:	4a3d      	ldr	r2, [pc, #244]	@ (8001188 <main+0x148>)
 8001094:	ca07      	ldmia	r2, {r0, r1, r2}
 8001096:	c303      	stmia	r3!, {r0, r1}
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	3302      	adds	r3, #2
 800109c:	0c12      	lsrs	r2, r2, #16
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e05f      	b.n	8001162 <main+0x122>
	  	  }
	  	  else{
	  	  ret = HAL_I2C_Master_Receive(&hi2c1,TEMPI2C_add,buf,2,HAL_MAX_DELAY); //I2C init for receiving data//2 byte of expected as per datasheet
 80010a2:	2390      	movs	r3, #144	@ 0x90
 80010a4:	4619      	mov	r1, r3
 80010a6:	463a      	mov	r2, r7
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2302      	movs	r3, #2
 80010b0:	4834      	ldr	r0, [pc, #208]	@ (8001184 <main+0x144>)
 80010b2:	f001 fd89 	bl	8002bc8 <HAL_I2C_Master_Receive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	757b      	strb	r3, [r7, #21]
	  	  if(ret != HAL_OK)//checking if I2C transmit is done without error
 80010ba:	7d7b      	ldrb	r3, [r7, #21]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d008      	beq.n	80010d2 <main+0x92>
	  	 	  {
	  	 		  strcpy((char*)buf,"ERROR_RX\r\n");//filling buf with error message
 80010c0:	463b      	mov	r3, r7
 80010c2:	4a32      	ldr	r2, [pc, #200]	@ (800118c <main+0x14c>)
 80010c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c6:	c303      	stmia	r3!, {r0, r1}
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	3302      	adds	r3, #2
 80010cc:	0c12      	lsrs	r2, r2, #16
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e047      	b.n	8001162 <main+0x122>
	  	 	  }
	  	  else{
	  		  //processing received data into a single readable value
	  		  //typecasting to 16 bit int data
	  		 val = (uint16_t)(buf[0] << 8 | buf[1]);//val is a 16 bit data //thus shifting the buf value into val by shift opertion
 80010d2:	783b      	ldrb	r3, [r7, #0]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21b      	sxth	r3, r3
 80010e0:	82fb      	strh	r3, [r7, #22]

	  		  //convertinf 2'complement value ,is temperature data is negative
	  		  if(val > 0x7FFF){
 80010e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da05      	bge.n	80010f6 <main+0xb6>
	  			  val |= 0xF000;
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80010f0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80010f4:	82fb      	strh	r3, [r7, #22]
	  		  }
	  		  	//converting to float celcius value
	  		  	 temp_c = val * 0.0078125;//as mentioned in datasheet for convertion
 80010f6:	8afb      	ldrh	r3, [r7, #22]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fb41 	bl	8000780 <__aeabi_i2d>
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001106:	f7ff f8bf 	bl	8000288 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fb9f 	bl	8000854 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	613b      	str	r3, [r7, #16]

	  		  	 //converting temp into decimal format
	  		  	temp_c =temp_c*100;//removing float point space
 800111a:	edd7 7a04 	vldr	s15, [r7, #16]
 800111e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001190 <main+0x150>
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	edc7 7a04 	vstr	s15, [r7, #16]
	  		  	 sprintf((char*)buf,"%u.%02u C\r\n",((unsigned int)temp_c / 100),((unsigned int)temp_c % 100));//copying the values of temp in buf to print in UART
 800112a:	edd7 7a04 	vldr	s15, [r7, #16]
 800112e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001132:	ee17 2a90 	vmov	r2, s15
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <main+0x154>)
 8001138:	fba3 2302 	umull	r2, r3, r3, r2
 800113c:	095a      	lsrs	r2, r3, #5
 800113e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001146:	ee17 1a90 	vmov	r1, s15
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <main+0x154>)
 800114c:	fba3 0301 	umull	r0, r3, r3, r1
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	2064      	movs	r0, #100	@ 0x64
 8001154:	fb00 f303 	mul.w	r3, r0, r3
 8001158:	1acb      	subs	r3, r1, r3
 800115a:	4638      	mov	r0, r7
 800115c:	490e      	ldr	r1, [pc, #56]	@ (8001198 <main+0x158>)
 800115e:	f008 ff97 	bl	800a090 <siprintf>
	  		  	 //temp_c/100 gives quoficient of temp anad modulo gives the remainder ex. 22.34 C as output print
	  	  }

	  	  }
	  	  HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);//sending data through usart3 connected to serial in nucleo board
 8001162:	463b      	mov	r3, r7
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f887 	bl	8000278 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	4639      	mov	r1, r7
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	4809      	ldr	r0, [pc, #36]	@ (800119c <main+0x15c>)
 8001176:	f007 fa93 	bl	80086a0 <HAL_UART_Transmit>
	  	  //delay before proceeding to next operation
	  	  HAL_Delay(500);
 800117a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800117e:	f000 fc23 	bl	80019c8 <HAL_Delay>
	  	  buf[0]= REG_temp;//read instruction
 8001182:	e774      	b.n	800106e <main+0x2e>
 8001184:	20000104 	.word	0x20000104
 8001188:	0800aa0c 	.word	0x0800aa0c
 800118c:	0800aa18 	.word	0x0800aa18
 8001190:	42c80000 	.word	0x42c80000
 8001194:	51eb851f 	.word	0x51eb851f
 8001198:	0800aa24 	.word	0x0800aa24
 800119c:	2000015c 	.word	0x2000015c

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09e      	sub	sp, #120	@ 0x78
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2260      	movs	r2, #96	@ 0x60
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f008 ff8e 	bl	800a0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011c4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80011c8:	f003 f9da 	bl	8004580 <HAL_PWREx_ControlVoltageScaling>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80011d2:	f000 f857 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80011d6:	2332      	movs	r3, #50	@ 0x32
 80011d8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e6:	2310      	movs	r3, #16
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011ea:	2301      	movs	r3, #1
 80011ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011ee:	2310      	movs	r3, #16
 80011f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80011f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011fc:	2301      	movs	r3, #1
 80011fe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001204:	2301      	movs	r3, #1
 8001206:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001208:	2350      	movs	r3, #80	@ 0x50
 800120a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001218:	2300      	movs	r3, #0
 800121a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4618      	mov	r0, r3
 8001226:	f003 faa7 	bl	8004778 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001230:	f000 f828 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	231f      	movs	r3, #31
 8001236:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2303      	movs	r3, #3
 800123a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	2104      	movs	r1, #4
 8001250:	4618      	mov	r0, r3
 8001252:	f004 f96d 	bl	8005530 <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800125c:	f000 f812 	bl	8001284 <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3778      	adds	r7, #120	@ 0x78
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800126c:	f003 fa74 	bl	8004758 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001270:	2002      	movs	r0, #2
 8001272:	f003 fa11 	bl	8004698 <HAL_PWREx_ConfigSupply>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800127c:	f000 f802 	bl	8001284 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_MspInit+0x34>)
 8001298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800129c:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <HAL_MspInit+0x34>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_MspInit+0x34>)
 80012a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80012b4:	2004      	movs	r0, #4
 80012b6:	f001 f820 	bl	80022fa <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	46020c00 	.word	0x46020c00

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <NMI_Handler+0x4>

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <UsageFault_Handler+0x4>

080012f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131e:	f000 fb33 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <OTG_FS_IRQHandler+0x10>)
 800132e:	f002 f9c7 	bl	80036c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001f0 	.word	0x200001f0

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f008 feb8 	bl	800a0e0 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200c0000 	.word	0x200c0000
 800139c:	00000400 	.word	0x00000400
 80013a0:	20000158 	.word	0x20000158
 80013a4:	20000820 	.word	0x20000820

080013a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013ac:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <SystemInit+0x68>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	4a17      	ldr	r2, [pc, #92]	@ (8001410 <SystemInit+0x68>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <SystemInit+0x6c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <SystemInit+0x6c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <SystemInit+0x6c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <SystemInit+0x6c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <SystemInit+0x6c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <SystemInit+0x6c>)
 80013da:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80013de:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80013e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <SystemInit+0x6c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <SystemInit+0x6c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <SystemInit+0x6c>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <SystemInit+0x6c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SystemInit+0x68>)
 80013fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001402:	609a      	str	r2, [r3, #8]
  #endif
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	46020c00 	.word	0x46020c00

08001418 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <LL_AHB2_GRP1_EnableClock+0x34>)
 8001422:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001426:	4909      	ldr	r1, [pc, #36]	@ (800144c <LL_AHB2_GRP1_EnableClock+0x34>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4313      	orrs	r3, r2
 800142c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <LL_AHB2_GRP1_EnableClock+0x34>)
 8001432:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	46020c00 	.word	0x46020c00

08001450 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <LL_APB1_GRP2_EnableClock+0x34>)
 800145a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800145e:	4909      	ldr	r1, [pc, #36]	@ (8001484 <LL_APB1_GRP2_EnableClock+0x34>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4313      	orrs	r3, r2
 8001464:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <LL_APB1_GRP2_EnableClock+0x34>)
 800146a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	46020c00 	.word	0x46020c00

08001488 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800149e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80014a2:	f7ff ffd5 	bl	8001450 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f7ff ffb6 	bl	8001418 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff ffb3 	bl	8001418 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80014b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014b8:	2303      	movs	r3, #3
 80014ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	@ (80014ec <MX_UCPD1_Init+0x64>)
 80014c6:	f007 ff98 	bl	80093fa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_UCPD1_Init+0x68>)
 80014de:	f007 ff8c 	bl	80093fa <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	42020400 	.word	0x42020400
 80014f0:	42020000 	.word	0x42020000

080014f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <MX_USART1_UART_Init+0x94>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153c:	4811      	ldr	r0, [pc, #68]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 800153e:	f007 f85f 	bl	8008600 <HAL_UART_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001548:	f7ff fe9c 	bl	8001284 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	480d      	ldr	r0, [pc, #52]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001550:	f007 fd3e 	bl	8008fd0 <HAL_UARTEx_SetTxFifoThreshold>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800155a:	f7ff fe93 	bl	8001284 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800155e:	2100      	movs	r1, #0
 8001560:	4808      	ldr	r0, [pc, #32]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001562:	f007 fd73 	bl	800904c <HAL_UARTEx_SetRxFifoThreshold>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800156c:	f7ff fe8a 	bl	8001284 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MX_USART1_UART_Init+0x90>)
 8001572:	f007 fcf4 	bl	8008f5e <HAL_UARTEx_DisableFifoMode>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800157c:	f7ff fe82 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000015c 	.word	0x2000015c
 8001588:	40013800 	.word	0x40013800

0800158c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0ba      	sub	sp, #232	@ 0xe8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	22c0      	movs	r2, #192	@ 0xc0
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f008 fd8f 	bl	800a0d0 <memset>
  if(uartHandle->Instance==USART1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a26      	ldr	r2, [pc, #152]	@ (8001650 <HAL_UART_MspInit+0xc4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d145      	bne.n	8001648 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015bc:	f04f 0201 	mov.w	r2, #1
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c8:	2300      	movs	r3, #0
 80015ca:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fb7d 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80015dc:	f7ff fe52 	bl	8001284 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <HAL_UART_MspInit+0xc8>)
 80015e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_UART_MspInit+0xc8>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ec:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_UART_MspInit+0xc8>)
 80015f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_UART_MspInit+0xc8>)
 8001600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001604:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <HAL_UART_MspInit+0xc8>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_UART_MspInit+0xc8>)
 8001610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800161c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001620:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001636:	2307      	movs	r3, #7
 8001638:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <HAL_UART_MspInit+0xcc>)
 8001644:	f000 ff40 	bl	80024c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001648:	bf00      	nop
 800164a:	37e8      	adds	r7, #232	@ 0xe8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40013800 	.word	0x40013800
 8001654:	46020c00 	.word	0x46020c00
 8001658:	42020000 	.word	0x42020000

0800165c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001662:	4a16      	ldr	r2, [pc, #88]	@ (80016bc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001664:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001668:	2206      	movs	r2, #6
 800166a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800166e:	2202      	movs	r2, #2
 8001670:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001674:	2202      	movs	r2, #2
 8001676:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800167a:	2200      	movs	r2, #0
 800167c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001680:	2200      	movs	r2, #0
 8001682:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001686:	2200      	movs	r2, #0
 8001688:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800168c:	2200      	movs	r2, #0
 800168e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001692:	2200      	movs	r2, #0
 8001694:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001698:	2200      	movs	r2, #0
 800169a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016a4:	f001 fef4 	bl	8003490 <HAL_PCD_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80016ae:	f7ff fde9 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001f0 	.word	0x200001f0
 80016bc:	42040000 	.word	0x42040000

080016c0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0bc      	sub	sp, #240	@ 0xf0
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	22c0      	movs	r2, #192	@ 0xc0
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f008 fcf5 	bl	800a0d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3c      	ldr	r2, [pc, #240]	@ (80017dc <HAL_PCD_MspInit+0x11c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d171      	bne.n	80017d4 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fae2 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001712:	f7ff fdb7 	bl	8001284 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 8001718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800171c:	4a30      	ldr	r2, [pc, #192]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 8001728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001734:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001738:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800174e:	230a      	movs	r3, #10
 8001750:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001758:	4619      	mov	r1, r3
 800175a:	4822      	ldr	r0, [pc, #136]	@ (80017e4 <HAL_PCD_MspInit+0x124>)
 800175c:	f000 feb4 	bl	80024c8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001766:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 8001772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d119      	bne.n	80017c0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001792:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80017aa:	f002 ffc5 	bl	8004738 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b4:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_PCD_MspInit+0x120>)
 80017b6:	f023 0304 	bic.w	r3, r3, #4
 80017ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017be:	e001      	b.n	80017c4 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80017c0:	f002 ffba 	bl	8004738 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	2049      	movs	r0, #73	@ 0x49
 80017ca:	f000 fda1 	bl	8002310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80017ce:	2049      	movs	r0, #73	@ 0x49
 80017d0:	f000 fdb8 	bl	8002344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017d4:	bf00      	nop
 80017d6:	37f0      	adds	r7, #240	@ 0xf0
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	42040000 	.word	0x42040000
 80017e0:	46020c00 	.word	0x46020c00
 80017e4:	42020000 	.word	0x42020000

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ec:	f7ff fddc 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017f2:	e003      	b.n	80017fc <LoopCopyDataInit>

080017f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017fa:	3104      	adds	r1, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017fc:	480a      	ldr	r0, [pc, #40]	@ (8001828 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001800:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001802:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001804:	d3f6      	bcc.n	80017f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001808:	e002      	b.n	8001810 <LoopFillZerobss>

0800180a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800180a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800180c:	f842 3b04 	str.w	r3, [r2], #4

08001810 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <LoopForever+0x16>)
	cmp	r2, r3
 8001812:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001814:	d3f9      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f008 fc69 	bl	800a0ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fc11 	bl	8001040 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001820:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001824:	0800ab74 	.word	0x0800ab74
	ldr	r0, =_sdata
 8001828:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800182c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001830:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001834:	20000820 	.word	0x20000820

08001838 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_IRQHandler>
	...

0800183c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_Init+0x50>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a11      	ldr	r2, [pc, #68]	@ (800188c <HAL_Init+0x50>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 fd54 	bl	80022fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001852:	f004 f85f 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <HAL_Init+0x54>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <HAL_Init+0x58>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <HAL_Init+0x5c>)
 800186a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800186c:	2004      	movs	r0, #4
 800186e:	f000 fd99 	bl	80023a4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f812 	bl	800189c <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e002      	b.n	8001888 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001882:	f7ff fd05 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40022000 	.word	0x40022000
 8001890:	46020c00 	.word	0x46020c00
 8001894:	0800aa30 	.word	0x0800aa30
 8001898:	20000000 	.word	0x20000000

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <HAL_InitTick+0xdc>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e05c      	b.n	800196e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80018b4:	4b31      	ldr	r3, [pc, #196]	@ (800197c <HAL_InitTick+0xe0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d10c      	bne.n	80018da <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80018c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <HAL_InitTick+0xe4>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <HAL_InitTick+0xdc>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e037      	b.n	800194a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80018da:	f000 fdbb 	bl	8002454 <HAL_SYSTICK_GetCLKSourceConfig>
 80018de:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d023      	beq.n	800192e <HAL_InitTick+0x92>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d82d      	bhi.n	8001948 <HAL_InitTick+0xac>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_InitTick+0x5e>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d00d      	beq.n	8001914 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80018f8:	e026      	b.n	8001948 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <HAL_InitTick+0xe4>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <HAL_InitTick+0xdc>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001908:	fbb3 f3f1 	udiv	r3, r3, r1
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	60fb      	str	r3, [r7, #12]
        break;
 8001912:	e01a      	b.n	800194a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_InitTick+0xdc>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001922:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	60fb      	str	r3, [r7, #12]
        break;
 800192c:	e00d      	b.n	800194a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0xdc>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001938:	fbb3 f3f2 	udiv	r3, r3, r2
 800193c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	60fb      	str	r3, [r7, #12]
        break;
 8001946:	e000      	b.n	800194a <HAL_InitTick+0xae>
        break;
 8001948:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 fd08 	bl	8002360 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e009      	b.n	800196e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195a:	2200      	movs	r2, #0
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	f04f 30ff 	mov.w	r0, #4294967295
 8001962:	f000 fcd5 	bl	8002310 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001966:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <HAL_InitTick+0xe8>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	e000e010 	.word	0xe000e010
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	200006d4 	.word	0x200006d4

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200006d4 	.word	0x200006d4

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <LL_ADC_SetResolution+0x3c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d104      	bne.n	8001a58 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f023 020c 	bic.w	r2, r3, #12
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	60da      	str	r2, [r3, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	46021000 	.word	0x46021000

08001a78 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	2a00      	cmp	r2, #0
 8001aa2:	d002      	beq.n	8001aaa <LL_ADC_SetGainCompensation+0x32>
 8001aa4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001aa8:	e000      	b.n	8001aac <LL_ADC_SetGainCompensation+0x34>
 8001aaa:	2200      	movs	r2, #0
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2107      	movs	r1, #7
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	401a      	ands	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6093      	str	r3, [r2, #8]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b34:	d101      	bne.n	8001b3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <LL_ADC_IsEnabled+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_ADC_IsEnabled+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d101      	bne.n	8001bfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e2b3      	b.n	8002194 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a8b      	ldr	r2, [pc, #556]	@ (8001e68 <HAL_ADC_Init+0x25c>)
 8001c3a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff f825 	bl	8000c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5f 	bl	8001b20 <LL_ADC_IsDeepPowerDownEnabled>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff45 	bl	8001afc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff7a 	bl	8001b70 <LL_ADC_IsInternalRegulatorEnabled>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d115      	bne.n	8001cae <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff5e 	bl	8001b48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c8c:	4b77      	ldr	r3, [pc, #476]	@ (8001e6c <HAL_ADC_Init+0x260>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	4a77      	ldr	r2, [pc, #476]	@ (8001e70 <HAL_ADC_Init+0x264>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f9      	bne.n	8001ca2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff5c 	bl	8001b70 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff6c 	bl	8001bbe <LL_ADC_REG_IsConversionOngoing>
 8001ce6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8244 	bne.w	800217e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 8240 	bne.w	800217e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff40 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d140      	bne.n	8001da0 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a51      	ldr	r2, [pc, #324]	@ (8001e68 <HAL_ADC_Init+0x25c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d028      	beq.n	8001d7a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a51      	ldr	r2, [pc, #324]	@ (8001e74 <HAL_ADC_Init+0x268>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d109      	bne.n	8001d46 <HAL_ADC_Init+0x13a>
 8001d32:	4850      	ldr	r0, [pc, #320]	@ (8001e74 <HAL_ADC_Init+0x268>)
 8001d34:	f7ff ff30 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e008      	b.n	8001d58 <HAL_ADC_Init+0x14c>
 8001d46:	4848      	ldr	r0, [pc, #288]	@ (8001e68 <HAL_ADC_Init+0x25c>)
 8001d48:	f7ff ff26 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d021      	beq.n	8001da0 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a44      	ldr	r2, [pc, #272]	@ (8001e74 <HAL_ADC_Init+0x268>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Init+0x15e>
 8001d66:	4a44      	ldr	r2, [pc, #272]	@ (8001e78 <HAL_ADC_Init+0x26c>)
 8001d68:	e000      	b.n	8001d6c <HAL_ADC_Init+0x160>
 8001d6a:	4a44      	ldr	r2, [pc, #272]	@ (8001e7c <HAL_ADC_Init+0x270>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f7ff fe4c 	bl	8001a10 <LL_ADC_SetCommonClock>
 8001d78:	e012      	b.n	8001da0 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f7ff fe57 	bl	8001a38 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e7c <HAL_ADC_Init+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001d9a:	4938      	ldr	r1, [pc, #224]	@ (8001e7c <HAL_ADC_Init+0x270>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a30      	ldr	r2, [pc, #192]	@ (8001e68 <HAL_ADC_Init+0x25c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d010      	beq.n	8001dcc <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001db0:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001db6:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001dbc:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001dc4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	e030      	b.n	8001e2e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7f1b      	ldrb	r3, [r3, #28]
 8001dd0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dd8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dda:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001de0:	2a00      	cmp	r2, #0
 8001de2:	d002      	beq.n	8001dea <HAL_ADC_Init+0x1de>
 8001de4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001de8:	e000      	b.n	8001dec <HAL_ADC_Init+0x1e0>
 8001dea:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dec:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001df2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da04      	bge.n	8001e06 <HAL_ADC_Init+0x1fa>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e04:	e001      	b.n	8001e0a <HAL_ADC_Init+0x1fe>
 8001e06:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001e0a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4918      	ldr	r1, [pc, #96]	@ (8001e74 <HAL_ADC_Init+0x268>)
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d103      	bne.n	8001e1e <HAL_ADC_Init+0x212>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e1c:	e003      	b.n	8001e26 <HAL_ADC_Init+0x21a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e24:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001e26:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d12f      	bne.n	8001e98 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_ADC_Init+0x25c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	3b01      	subs	r3, #1
 8001e48:	045b      	lsls	r3, r3, #17
 8001e4a:	6a3a      	ldr	r2, [r7, #32]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	e022      	b.n	8001e98 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	e018      	b.n	8001e98 <HAL_ADC_Init+0x28c>
 8001e66:	bf00      	nop
 8001e68:	46021000 	.word	0x46021000
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	053e2d63 	.word	0x053e2d63
 8001e74:	42028000 	.word	0x42028000
 8001e78:	42028308 	.word	0x42028308
 8001e7c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a92      	ldr	r2, [pc, #584]	@ (80020e8 <HAL_ADC_Init+0x4dc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d018      	beq.n	8001ed4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eae:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b89      	ldr	r3, [pc, #548]	@ (80020ec <HAL_ADC_Init+0x4e0>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	60d3      	str	r3, [r2, #12]
 8001ed2:	e031      	b.n	8001f38 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	6a3a      	ldr	r2, [r7, #32]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	4b7e      	ldr	r3, [pc, #504]	@ (80020f0 <HAL_ADC_Init+0x4e4>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	6a39      	ldr	r1, [r7, #32]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6a      	ldr	r2, [pc, #424]	@ (80020e8 <HAL_ADC_Init+0x4dc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f000 8093 	beq.w	800206a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fe38 	bl	8001bbe <LL_ADC_REG_IsConversionOngoing>
 8001f4e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fe45 	bl	8001be4 <LL_ADC_INJ_IsConversionOngoing>
 8001f5a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d161      	bne.n	8002026 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d15e      	bne.n	8002026 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7f1b      	ldrb	r3, [r3, #28]
 8001f6c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4960      	ldr	r1, [pc, #384]	@ (80020f4 <HAL_ADC_Init+0x4e8>)
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d102      	bne.n	8001f7e <HAL_ADC_Init+0x372>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_Init+0x378>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f82:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f84:	4313      	orrs	r3, r2
 8001f86:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f7ff fd60 	bl	8001a78 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d11e      	bne.n	8002000 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	4b4a      	ldr	r3, [pc, #296]	@ (80020f8 <HAL_ADC_Init+0x4ec>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001fd6:	0411      	lsls	r1, r2, #16
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001fe2:	4311      	orrs	r1, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fee:	0892      	lsrs	r2, r2, #2
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	e007      	b.n	8002010 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10c      	bne.n	8002048 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f023 010f 	bic.w	r1, r3, #15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	631a      	str	r2, [r3, #48]	@ 0x30
 8002046:	e007      	b.n	8002058 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 020f 	bic.w	r2, r2, #15
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800205c:	f023 0303 	bic.w	r3, r3, #3
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002068:	e092      	b.n	8002190 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002070:	2b01      	cmp	r3, #1
 8002072:	d111      	bne.n	8002098 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800207c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002082:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002088:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	4313      	orrs	r3, r2
 800208e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <HAL_ADC_Init+0x4f0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	69f9      	ldr	r1, [r7, #28]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b4:	461a      	mov	r2, r3
 80020b6:	2100      	movs	r1, #0
 80020b8:	f7ff fd01 	bl	8001abe <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c4:	461a      	mov	r2, r3
 80020c6:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80020ca:	f7ff fcf8 	bl	8001abe <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d114      	bne.n	8002100 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f062 020f 	orn	r2, r2, #15
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80020e6:	e024      	b.n	8002132 <HAL_ADC_Init+0x526>
 80020e8:	46021000 	.word	0x46021000
 80020ec:	fff0c013 	.word	0xfff0c013
 80020f0:	ffde800d 	.word	0xffde800d
 80020f4:	42028000 	.word	0x42028000
 80020f8:	fc00f81e 	.word	0xfc00f81e
 80020fc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002108:	d113      	bne.n	8002132 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f003 031c 	and.w	r3, r3, #28
 800211c:	f06f 020f 	mvn.w	r2, #15
 8002120:	fa02 f103 	lsl.w	r1, r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4b18      	ldr	r3, [pc, #96]	@ (800219c <HAL_ADC_Init+0x590>)
 800213a:	4013      	ands	r3, r2
 800213c:	6a3a      	ldr	r2, [r7, #32]
 800213e:	429a      	cmp	r2, r3
 8002140:	d10b      	bne.n	800215a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800214c:	f023 0303 	bic.w	r3, r3, #3
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002158:	e01a      	b.n	8002190 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800215e:	f023 0312 	bic.w	r3, r3, #18
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800217c:	e008      	b.n	8002190 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002194:	4618      	mov	r0, r3
 8002196:	3728      	adds	r7, #40	@ 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	833ffff3 	.word	0x833ffff3

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	@ (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff4c 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800231e:	f7ff ff63 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 8002322:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	6978      	ldr	r0, [r7, #20]
 800232a:	f7ff ffb3 	bl	8002294 <NVIC_EncodePriority>
 800232e:	4602      	mov	r2, r0
 8002330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff82 	bl	8002240 <__NVIC_SetPriority>
}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff56 	bl	8002204 <__NVIC_EnableIRQ>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002370:	d301      	bcc.n	8002376 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002372:	2301      	movs	r3, #1
 8002374:	e00d      	b.n	8002392 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_SYSTICK_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_SYSTICK_Config+0x40>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_SYSTICK_Config+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a05      	ldr	r2, [pc, #20]	@ (80023a0 <HAL_SYSTICK_Config+0x40>)
 800238a:	f043 0303 	orr.w	r3, r3, #3
 800238e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d844      	bhi.n	800243c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80023b2:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023db 	.word	0x080023db
 80023bc:	080023f9 	.word	0x080023f9
 80023c0:	0800241b 	.word	0x0800241b
 80023c4:	0800243d 	.word	0x0800243d
 80023c8:	080023cd 	.word	0x080023cd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023cc:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1e      	ldr	r2, [pc, #120]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6013      	str	r3, [r2, #0]
      break;
 80023d8:	e031      	b.n	800243e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023da:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ec:	4a18      	ldr	r2, [pc, #96]	@ (8002450 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80023f6:	e022      	b.n	800243e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a13      	ldr	r2, [pc, #76]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800240e:	4a10      	ldr	r2, [pc, #64]	@ (8002450 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002410:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002418:	e011      	b.n	800243e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002430:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002432:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800243a:	e000      	b.n	800243e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800243c:	bf00      	nop
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010
 8002450:	46020c00 	.word	0x46020c00

08002454 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002466:	2304      	movs	r3, #4
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	e021      	b.n	80024b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002472:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002476:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800247e:	d011      	beq.n	80024a4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002486:	d810      	bhi.n	80024aa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002494:	d003      	beq.n	800249e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002496:	e008      	b.n	80024aa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
        break;
 800249c:	e008      	b.n	80024b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800249e:	2301      	movs	r3, #1
 80024a0:	607b      	str	r3, [r7, #4]
        break;
 80024a2:	e005      	b.n	80024b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80024a4:	2302      	movs	r3, #2
 80024a6:	607b      	str	r3, [r7, #4]
        break;
 80024a8:	e002      	b.n	80024b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
        break;
 80024ae:	bf00      	nop
    }
  }
  return systick_source;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010
 80024c4:	46020c00 	.word	0x46020c00

080024c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024da:	e1ba      	b.n	8002852 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 81aa 	beq.w	800284c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a55      	ldr	r2, [pc, #340]	@ (8002650 <HAL_GPIO_Init+0x188>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d15d      	bne.n	80025bc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002506:	2201      	movs	r2, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	4013      	ands	r3, r2
 8002514:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	4313      	orrs	r3, r2
 8002528:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002530:	4a48      	ldr	r2, [pc, #288]	@ (8002654 <HAL_GPIO_Init+0x18c>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002538:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800253a:	4a46      	ldr	r2, [pc, #280]	@ (8002654 <HAL_GPIO_Init+0x18c>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	3208      	adds	r2, #8
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	4013      	ands	r3, r2
 8002568:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220b      	movs	r2, #11
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	4313      	orrs	r3, r2
 800257c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	3208      	adds	r2, #8
 8002586:	69f9      	ldr	r1, [r7, #28]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2202      	movs	r2, #2
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e067      	b.n	800268c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x104>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d145      	bne.n	8002658 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 020f 	and.w	r2, r3, #15
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	4313      	orrs	r3, r2
 8002608:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	69f9      	ldr	r1, [r7, #28]
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	4013      	ands	r3, r2
 800262e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0203 	and.w	r2, r3, #3
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	4313      	orrs	r3, r2
 8002644:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e01e      	b.n	800268c <HAL_GPIO_Init+0x1c4>
 800264e:	bf00      	nop
 8002650:	46020000 	.word	0x46020000
 8002654:	0800aa88 	.word	0x0800aa88
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	4013      	ands	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	4313      	orrs	r3, r2
 8002684:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d00b      	beq.n	80026ac <HAL_GPIO_Init+0x1e4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d007      	beq.n	80026ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a0:	2b11      	cmp	r3, #17
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d130      	bne.n	800270e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80026e2:	2201      	movs	r2, #1
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0201 	and.w	r2, r3, #1
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	4313      	orrs	r3, r2
 8002706:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d017      	beq.n	8002746 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	4013      	ands	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	4313      	orrs	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d07c      	beq.n	800284c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002752:	4a47      	ldr	r2, [pc, #284]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3318      	adds	r3, #24
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	4013      	ands	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0a9a      	lsrs	r2, r3, #10
 800277a:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <HAL_GPIO_Init+0x3ac>)
 800277c:	4013      	ands	r3, r2
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	f002 0203 	and.w	r2, r2, #3
 8002784:	00d2      	lsls	r2, r2, #3
 8002786:	4093      	lsls	r3, r2
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	4313      	orrs	r3, r2
 800278c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800278e:	4938      	ldr	r1, [pc, #224]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3318      	adds	r3, #24
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800279c:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80027c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80027c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80027ea:	4a21      	ldr	r2, [pc, #132]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80027f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	4013      	ands	r3, r2
 8002800:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002816:	4a16      	ldr	r2, [pc, #88]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800281e:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 8002820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002824:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43db      	mvns	r3, r3
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	4013      	ands	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002844:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <HAL_GPIO_Init+0x3a8>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	f47f ae3d 	bne.w	80024dc <HAL_GPIO_Init+0x14>
  }
}
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	3724      	adds	r7, #36	@ 0x24
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	46022000 	.word	0x46022000
 8002874:	002f7f7f 	.word	0x002f7f7f

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002894:	e002      	b.n	800289c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e08d      	b.n	80029d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fb3a 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	@ 0x24
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002908:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e006      	b.n	8002930 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800292e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d108      	bne.n	800294a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e007      	b.n	800295a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800296c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800297c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	461a      	mov	r2, r3
 80029ec:	460b      	mov	r3, r1
 80029ee:	817b      	strh	r3, [r7, #10]
 80029f0:	4613      	mov	r3, r2
 80029f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 80da 	bne.w	8002bb6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_I2C_Master_Transmit+0x30>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0d3      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1d8>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a18:	f7fe ffca 	bl	80019b0 <HAL_GetTick>
 8002a1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2319      	movs	r3, #25
 8002a24:	2201      	movs	r2, #1
 8002a26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f9e6 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0be      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2221      	movs	r2, #33	@ 0x21
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2210      	movs	r2, #16
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	893a      	ldrh	r2, [r7, #8]
 8002a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2bff      	cmp	r3, #255	@ 0xff
 8002a6a:	d90e      	bls.n	8002a8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	22ff      	movs	r2, #255	@ 0xff
 8002a70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	8979      	ldrh	r1, [r7, #10]
 8002a7a:	4b51      	ldr	r3, [pc, #324]	@ (8002bc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fc0a 	bl	800329c <I2C_TransferConfig>
 8002a88:	e06c      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	4b48      	ldr	r3, [pc, #288]	@ (8002bc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fbf9 	bl	800329c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002aaa:	e05b      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	6a39      	ldr	r1, [r7, #32]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f9fc 	bl	8002eae <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e07b      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d034      	beq.n	8002b64 <HAL_I2C_Master_Transmit+0x184>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d130      	bne.n	8002b64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2180      	movs	r1, #128	@ 0x80
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f975 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e04d      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2bff      	cmp	r3, #255	@ 0xff
 8002b24:	d90e      	bls.n	8002b44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	22ff      	movs	r2, #255	@ 0xff
 8002b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	8979      	ldrh	r1, [r7, #10]
 8002b34:	2300      	movs	r3, #0
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fbad 	bl	800329c <I2C_TransferConfig>
 8002b42:	e00f      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	8979      	ldrh	r1, [r7, #10]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fb9c 	bl	800329c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d19e      	bne.n	8002aac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	6a39      	ldr	r1, [r7, #32]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f9e2 	bl	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e01a      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2220      	movs	r2, #32
 8002b88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b96:	400b      	ands	r3, r1
 8002b98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
  }
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	80002000 	.word	0x80002000
 8002bc4:	fe00e800 	.word	0xfe00e800

08002bc8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	817b      	strh	r3, [r7, #10]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	f040 80db 	bne.w	8002da0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_I2C_Master_Receive+0x30>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0d4      	b.n	8002da2 <HAL_I2C_Master_Receive+0x1da>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe fed6 	bl	80019b0 <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2319      	movs	r3, #25
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f8f2 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0bf      	b.n	8002da2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2222      	movs	r2, #34	@ 0x22
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	893a      	ldrh	r2, [r7, #8]
 8002c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2bff      	cmp	r3, #255	@ 0xff
 8002c52:	d90e      	bls.n	8002c72 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	22ff      	movs	r2, #255	@ 0xff
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	8979      	ldrh	r1, [r7, #10]
 8002c62:	4b52      	ldr	r3, [pc, #328]	@ (8002dac <HAL_I2C_Master_Receive+0x1e4>)
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fb16 	bl	800329c <I2C_TransferConfig>
 8002c70:	e06d      	b.n	8002d4e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	4b49      	ldr	r3, [pc, #292]	@ (8002dac <HAL_I2C_Master_Receive+0x1e4>)
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fb05 	bl	800329c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c92:	e05c      	b.n	8002d4e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	6a39      	ldr	r1, [r7, #32]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f993 	bl	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e07c      	b.n	8002da2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d034      	beq.n	8002d4e <HAL_I2C_Master_Receive+0x186>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d130      	bne.n	8002d4e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f880 	bl	8002dfc <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e04d      	b.n	8002da2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2bff      	cmp	r3, #255	@ 0xff
 8002d0e:	d90e      	bls.n	8002d2e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	22ff      	movs	r2, #255	@ 0xff
 8002d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	8979      	ldrh	r1, [r7, #10]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fab8 	bl	800329c <I2C_TransferConfig>
 8002d2c:	e00f      	b.n	8002d4e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 faa7 	bl	800329c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d19d      	bne.n	8002c94 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	6a39      	ldr	r1, [r7, #32]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f8ed 	bl	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e01a      	b.n	8002da2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2220      	movs	r2, #32
 8002d72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <HAL_I2C_Master_Receive+0x1e8>)
 8002d80:	400b      	ands	r3, r1
 8002d82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	80002400 	.word	0x80002400
 8002db0:	fe00e800 	.word	0xfe00e800

08002db4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d103      	bne.n	8002dd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d007      	beq.n	8002df0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	619a      	str	r2, [r3, #24]
  }
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0c:	e03b      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f962 	bl	80030dc <I2C_IsErrorOccurred>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e041      	b.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d02d      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fe fdc1 	bl	80019b0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d122      	bne.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d113      	bne.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00f      	b.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d0b4      	beq.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eba:	e033      	b.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f90b 	bl	80030dc <I2C_IsErrorOccurred>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e031      	b.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d025      	beq.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed8:	f7fe fd6a 	bl	80019b0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d302      	bcc.n	8002eee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11a      	bne.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d013      	beq.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e007      	b.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d1c4      	bne.n	8002ebc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f48:	e02f      	b.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8c4 	bl	80030dc <I2C_IsErrorOccurred>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e02d      	b.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5e:	f7fe fd27 	bl	80019b0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11a      	bne.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d013      	beq.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d1c8      	bne.n	8002f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002fd4:	e071      	b.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f87e 	bl	80030dc <I2C_IsErrorOccurred>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d13b      	bne.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d138      	bne.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d105      	bne.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b10      	cmp	r3, #16
 8003024:	d121      	bne.n	800306a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2210      	movs	r2, #16
 800302c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2204      	movs	r2, #4
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2220      	movs	r2, #32
 800303a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003048:	400b      	ands	r3, r1
 800304a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
 8003068:	e002      	b.n	8003070 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003070:	f7fe fc9e 	bl	80019b0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	429a      	cmp	r2, r3
 800307e:	d302      	bcc.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d119      	bne.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00f      	beq.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d002      	beq.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d083      	beq.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	fe00e800 	.word	0xfe00e800

080030dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	@ 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	d068      	beq.n	80031da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2210      	movs	r2, #16
 800310e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003110:	e049      	b.n	80031a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d045      	beq.n	80031a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe fc49 	bl	80019b0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_IsErrorOccurred+0x54>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d13a      	bne.n	80031a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003142:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800314e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003152:	d121      	bne.n	8003198 <I2C_IsErrorOccurred+0xbc>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315a:	d01d      	beq.n	8003198 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b20      	cmp	r3, #32
 8003160:	d01a      	beq.n	8003198 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003170:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003172:	f7fe fc1d 	bl	80019b0 <HAL_GetTick>
 8003176:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003178:	e00e      	b.n	8003198 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800317a:	f7fe fc19 	bl	80019b0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b19      	cmp	r3, #25
 8003186:	d907      	bls.n	8003198 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003196:	e006      	b.n	80031a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d1e9      	bne.n	800317a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d003      	beq.n	80031bc <I2C_IsErrorOccurred+0xe0>
 80031b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0aa      	beq.n	8003112 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2220      	movs	r2, #32
 80031ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800321e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff fdaf 	bl	8002db4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <I2C_IsErrorOccurred+0x1bc>)
 8003262:	400b      	ands	r3, r1
 8003264:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800328a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800328e:	4618      	mov	r0, r3
 8003290:	3728      	adds	r7, #40	@ 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	fe00e800 	.word	0xfe00e800

0800329c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	817b      	strh	r3, [r7, #10]
 80032aa:	4613      	mov	r3, r2
 80032ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032b4:	7a7b      	ldrb	r3, [r7, #9]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	0d5b      	lsrs	r3, r3, #21
 80032d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <I2C_TransferConfig+0x60>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	43db      	mvns	r3, r3
 80032e0:	ea02 0103 	and.w	r1, r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	03ff63ff 	.word	0x03ff63ff

08003300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	d138      	bne.n	8003388 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003320:	2302      	movs	r3, #2
 8003322:	e032      	b.n	800338a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	@ 0x24
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003352:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d139      	bne.n	8003420 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e033      	b.n	8003422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2224      	movs	r2, #36	@ 0x24
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e007      	b.n	800345e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800344e:	4b07      	ldr	r3, [pc, #28]	@ (800346c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0204 	bic.w	r2, r3, #4
 8003456:	4905      	ldr	r1, [pc, #20]	@ (800346c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40030400 	.word	0x40030400

08003470 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_ICACHE_Enable+0x1c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a04      	ldr	r2, [pc, #16]	@ (800348c <HAL_ICACHE_Enable+0x1c>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40030400 	.word	0x40030400

08003490 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e108      	b.n	80036b4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fe f8ff 	bl	80016c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2203      	movs	r2, #3
 80034c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4a7b      	ldr	r2, [pc, #492]	@ (80036bc <HAL_PCD_Init+0x22c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d102      	bne.n	80034d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f006 f8d9 	bl	8009694 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7c1a      	ldrb	r2, [r3, #16]
 80034ea:	f88d 2000 	strb.w	r2, [sp]
 80034ee:	3304      	adds	r3, #4
 80034f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f2:	f006 f800 	bl	80094f6 <USB_CoreInit>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0d5      	b.n	80036b4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f006 f8d1 	bl	80096b6 <USB_SetCurrentMode>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0c6      	b.n	80036b4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e04a      	b.n	80035c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3315      	adds	r3, #21
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3314      	adds	r3, #20
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	b298      	uxth	r0, r3
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	332e      	adds	r3, #46	@ 0x2e
 8003568:	4602      	mov	r2, r0
 800356a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3318      	adds	r3, #24
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	331c      	adds	r3, #28
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3320      	adds	r3, #32
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3324      	adds	r3, #36	@ 0x24
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	3301      	adds	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	791b      	ldrb	r3, [r3, #4]
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3af      	bcc.n	800352c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e044      	b.n	800365c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	3301      	adds	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	791b      	ldrb	r3, [r3, #4]
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	429a      	cmp	r2, r3
 8003664:	d3b5      	bcc.n	80035d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7c1a      	ldrb	r2, [r3, #16]
 800366e:	f88d 2000 	strb.w	r2, [sp]
 8003672:	3304      	adds	r3, #4
 8003674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003676:	f006 f86b 	bl	8009750 <USB_DevInit>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e013      	b.n	80036b4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7b1b      	ldrb	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ff3c 	bl	8004520 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f006 fb79 	bl	8009da4 <USB_DevDisconnect>

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	42040000 	.word	0x42040000

080036c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b08d      	sub	sp, #52	@ 0x34
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f006 fc18 	bl	8009f0c <USB_GetMode>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 84b9 	bne.w	8004056 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f006 fb7c 	bl	8009de6 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 84af 	beq.w	8004054 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f006 fb69 	bl	8009de6 <USB_ReadInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d107      	bne.n	800372e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f002 0202 	and.w	r2, r2, #2
 800372c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f006 fb57 	bl	8009de6 <USB_ReadInterrupts>
 8003738:	4603      	mov	r3, r0
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d161      	bne.n	8003806 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0210 	bic.w	r2, r2, #16
 8003750:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 020f 	and.w	r2, r3, #15
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	3304      	adds	r3, #4
 8003770:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	0c5b      	lsrs	r3, r3, #17
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	2b02      	cmp	r3, #2
 800377c:	d124      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d035      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	6a38      	ldr	r0, [r7, #32]
 800379e:	f006 faa9 	bl	8009cf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ae:	441a      	add	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c0:	441a      	add	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	615a      	str	r2, [r3, #20]
 80037c6:	e016      	b.n	80037f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	0c5b      	lsrs	r3, r3, #17
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d110      	bne.n	80037f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037da:	2208      	movs	r2, #8
 80037dc:	4619      	mov	r1, r3
 80037de:	6a38      	ldr	r0, [r7, #32]
 80037e0:	f006 fa88 	bl	8009cf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f0:	441a      	add	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0210 	orr.w	r2, r2, #16
 8003804:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f006 faeb 	bl	8009de6 <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003816:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800381a:	f040 80a7 	bne.w	800396c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f006 faf0 	bl	8009e0c <USB_ReadDevAllOutEpInterrupt>
 800382c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800382e:	e099      	b.n	8003964 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 808e 	beq.w	8003958 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f006 fb14 	bl	8009e74 <USB_ReadDevOutEPInterrupt>
 800384c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003864:	461a      	mov	r2, r3
 8003866:	2301      	movs	r3, #1
 8003868:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800386a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fd29 	bl	80042c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00c      	beq.n	8003896 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	2308      	movs	r3, #8
 800388c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800388e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fdff 	bl	8004494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	2310      	movs	r3, #16
 80038b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d030      	beq.n	800391e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c4:	2b80      	cmp	r3, #128	@ 0x80
 80038c6:	d109      	bne.n	80038dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	3304      	adds	r3, #4
 80038f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	78db      	ldrb	r3, [r3, #3]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d108      	bne.n	800390c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fbf2 	bl	80040f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003918:	461a      	mov	r2, r3
 800391a:	2302      	movs	r3, #2
 800391c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003934:	461a      	mov	r2, r3
 8003936:	2320      	movs	r3, #32
 8003938:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003956:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	3301      	adds	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	f47f af62 	bne.w	8003830 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f006 fa38 	bl	8009de6 <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003980:	f040 80db 	bne.w	8003b3a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f006 fa59 	bl	8009e40 <USB_ReadDevAllInEpInterrupt>
 800398e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003994:	e0cd      	b.n	8003b32 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80c2 	beq.w	8003b26 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f006 fa7f 	bl	8009eb0 <USB_ReadDevInEPInterrupt>
 80039b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d057      	beq.n	8003a6e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	2201      	movs	r2, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69f9      	ldr	r1, [r7, #28]
 80039da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039de:	4013      	ands	r3, r2
 80039e0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ee:	461a      	mov	r2, r3
 80039f0:	2301      	movs	r3, #1
 80039f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	799b      	ldrb	r3, [r3, #6]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d132      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	3320      	adds	r3, #32
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4403      	add	r3, r0
 8003a1c:	331c      	adds	r3, #28
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4419      	add	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4403      	add	r3, r0
 8003a30:	3320      	adds	r3, #32
 8003a32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x3a2>
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3324      	adds	r3, #36	@ 0x24
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d108      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	f006 fa87 	bl	8009f70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fb03 	bl	8004074 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a84:	461a      	mov	r2, r3
 8003a86:	2308      	movs	r3, #8
 8003a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003abc:	461a      	mov	r2, r3
 8003abe:	2340      	movs	r3, #64	@ 0x40
 8003ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d023      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003acc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ace:	6a38      	ldr	r0, [r7, #32]
 8003ad0:	f005 ff8a 	bl	80099e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	3310      	adds	r3, #16
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb03 	bl	8004108 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2302      	movs	r3, #2
 8003b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb42 	bl	80041aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	3301      	adds	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f af2e 	bne.w	8003996 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f006 f951 	bl	8009de6 <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b4e:	d122      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d108      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b76:	2100      	movs	r1, #0
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fcf5 	bl	8004568 <HAL_PCDEx_LPM_Callback>
 8003b7e:	e002      	b.n	8003b86 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 faab 	bl	80040dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f006 f923 	bl	8009de6 <USB_ReadInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003baa:	d112      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d102      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fa83 	bl	80040c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f006 f905 	bl	8009de6 <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003be6:	d121      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003bf6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d111      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	f003 020f 	and.w	r2, r3, #15
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fca2 	bl	8004568 <HAL_PCDEx_LPM_Callback>
 8003c24:	e002      	b.n	8003c2c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fa4e 	bl	80040c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f006 f8d8 	bl	8009de6 <USB_ReadInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	f040 80b7 	bne.w	8003db2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2110      	movs	r1, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f005 fec2 	bl	80099e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c68:	e046      	b.n	8003cf8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003caa:	461a      	mov	r2, r3
 8003cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ccc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cf0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	791b      	ldrb	r3, [r3, #4]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d3b2      	bcc.n	8003c6a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d12:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7bdb      	ldrb	r3, [r3, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d30:	f043 030b 	orr.w	r3, r3, #11
 8003d34:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d46:	f043 030b 	orr.w	r3, r3, #11
 8003d4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4c:	e015      	b.n	8003d7a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d60:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003d64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d74:	f043 030b 	orr.w	r3, r3, #11
 8003d78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d88:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f006 f8e7 	bl	8009f70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f006 f815 	bl	8009de6 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc6:	d123      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f006 f8ab 	bl	8009f28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f005 fe7f 	bl	8009ada <USB_GetDevSpeed>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681c      	ldr	r4, [r3, #0]
 8003de8:	f001 fe96 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8003dec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df2:	461a      	mov	r2, r3
 8003df4:	4620      	mov	r0, r4
 8003df6:	f005 fbab 	bl	8009550 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f95a 	bl	80040b4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f005 ffe6 	bl	8009de6 <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d10a      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f93b 	bl	80040a0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 0208 	and.w	r2, r2, #8
 8003e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f005 ffd1 	bl	8009de6 <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d123      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5e:	e014      	b.n	8003e8a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f962 	bl	8004148 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	3301      	adds	r3, #1
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	791b      	ldrb	r3, [r3, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d3e4      	bcc.n	8003e60 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f005 ffa3 	bl	8009de6 <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eaa:	d13c      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb0:	e02b      	b.n	8003f0a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da12      	bge.n	8003f04 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	3317      	adds	r3, #23
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f922 	bl	8004148 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	3301      	adds	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d3cd      	bcc.n	8003eb2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f005 ff5b 	bl	8009de6 <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f3a:	d156      	bne.n	8003fea <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f40:	e045      	b.n	8003fce <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d12e      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da2b      	bge.n	8003fc8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f7c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d121      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fc4:	6053      	str	r3, [r2, #4]
            break;
 8003fc6:	e008      	b.n	8003fda <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	3301      	adds	r3, #1
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	791b      	ldrb	r3, [r3, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d3b3      	bcc.n	8003f42 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f005 fef9 	bl	8009de6 <USB_ReadInterrupts>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffe:	d10a      	bne.n	8004016 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f88d 	bl	8004120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f005 fee3 	bl	8009de6 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d115      	bne.n	8004056 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f879 	bl	8004134 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	e000      	b.n	8004056 <HAL_PCD_IRQHandler+0x996>
      return;
 8004054:	bf00      	nop
    }
  }
}
 8004056:	3734      	adds	r7, #52	@ 0x34
 8004058:	46bd      	mov	sp, r7
 800405a:	bd90      	pop	{r4, r7, pc}

0800405c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004158:	2b00      	cmp	r3, #0
 800415a:	da0c      	bge.n	8004176 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	3310      	adds	r3, #16
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	3304      	adds	r3, #4
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e00c      	b.n	8004190 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	4618      	mov	r0, r3
 8004198:	f005 fcc4 	bl	8009b24 <USB_EPStopXfer>
 800419c:	4603      	mov	r3, r0
 800419e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041a0:	7afb      	ldrb	r3, [r7, #11]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08a      	sub	sp, #40	@ 0x28
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	3310      	adds	r3, #16
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	3304      	adds	r3, #4
 80041d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d901      	bls.n	80041e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06b      	b.n	80042ba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d902      	bls.n	80041fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3303      	adds	r3, #3
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004206:	e02a      	b.n	800425e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	429a      	cmp	r2, r3
 800421c:	d902      	bls.n	8004224 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3303      	adds	r3, #3
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68d9      	ldr	r1, [r3, #12]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	4603      	mov	r3, r0
 8004240:	6978      	ldr	r0, [r7, #20]
 8004242:	f005 fd19 	bl	8009c78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	441a      	add	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	441a      	add	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	429a      	cmp	r2, r3
 8004272:	d809      	bhi.n	8004288 <PCD_WriteEmptyTxFifo+0xde>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800427c:	429a      	cmp	r2, r3
 800427e:	d203      	bcs.n	8004288 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1bf      	bne.n	8004208 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	d811      	bhi.n	80042b8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	2201      	movs	r2, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	6939      	ldr	r1, [r7, #16]
 80042b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042b4:	4013      	ands	r3, r2
 80042b6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	333c      	adds	r3, #60	@ 0x3c
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	799b      	ldrb	r3, [r3, #6]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d17b      	bne.n	80043f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4a61      	ldr	r2, [pc, #388]	@ (800448c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	f240 80b9 	bls.w	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80b3 	beq.w	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432c:	6093      	str	r3, [r2, #8]
 800432e:	e0a7      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	2320      	movs	r3, #32
 800434a:	6093      	str	r3, [r2, #8]
 800434c:	e098      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 8093 	bne.w	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	4a4b      	ldr	r2, [pc, #300]	@ (800448c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d90f      	bls.n	8004382 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800437e:	6093      	str	r3, [r2, #8]
 8004380:	e07e      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	0159      	lsls	r1, r3, #5
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d114      	bne.n	80043e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043cc:	461a      	mov	r2, r3
 80043ce:	2101      	movs	r1, #1
 80043d0:	f005 fdce 	bl	8009f70 <USB_EP0_OutStart>
 80043d4:	e006      	b.n	80043e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	441a      	add	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fe36 	bl	800405c <HAL_PCD_DataOutStageCallback>
 80043f0:	e046      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	4a26      	ldr	r2, [pc, #152]	@ (8004490 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d124      	bne.n	8004444 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004410:	461a      	mov	r2, r3
 8004412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	e032      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	2320      	movs	r3, #32
 8004434:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fe0d 	bl	800405c <HAL_PCD_DataOutStageCallback>
 8004442:	e01d      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d114      	bne.n	8004474 <PCD_EP_OutXfrComplete_int+0x1b0>
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800446c:	461a      	mov	r2, r3
 800446e:	2100      	movs	r1, #0
 8004470:	f005 fd7e 	bl	8009f70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff fdee 	bl	800405c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	4f54300a 	.word	0x4f54300a
 8004490:	4f54310a 	.word	0x4f54310a

08004494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	333c      	adds	r3, #60	@ 0x3c
 80044ac:	3304      	adds	r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a15      	ldr	r2, [pc, #84]	@ (800451c <PCD_EP_OutSetupPacket_int+0x88>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d90e      	bls.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fdcf 	bl	800408c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <PCD_EP_OutSetupPacket_int+0x88>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d90c      	bls.n	8004510 <PCD_EP_OutSetupPacket_int+0x7c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	799b      	ldrb	r3, [r3, #6]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d108      	bne.n	8004510 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004508:	461a      	mov	r2, r3
 800450a:	2101      	movs	r1, #1
 800450c:	f005 fd30 	bl	8009f70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	4f54300a 	.word	0x4f54300a

08004520 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004552:	f043 0303 	orr.w	r3, r3, #3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004588:	4b39      	ldr	r3, [pc, #228]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800458a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004590:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	429a      	cmp	r2, r3
 8004598:	d10b      	bne.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a0:	d905      	bls.n	80045ae <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80045a2:	4b33      	ldr	r3, [pc, #204]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a32      	ldr	r2, [pc, #200]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ac:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e057      	b.n	8004662 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b8:	d90a      	bls.n	80045d0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80045ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045cc:	60d3      	str	r3, [r2, #12]
 80045ce:	e007      	b.n	80045e0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80045d0:	4b27      	ldr	r3, [pc, #156]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80045d8:	4925      	ldr	r1, [pc, #148]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80045e0:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a24      	ldr	r2, [pc, #144]	@ (8004678 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	2232      	movs	r2, #50	@ 0x32
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	4a21      	ldr	r2, [pc, #132]	@ (8004678 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80045fe:	e002      	b.n	8004606 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b01      	subs	r3, #1
 8004604:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004606:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f3      	bne.n	8004600 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01b      	beq.n	8004656 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a15      	ldr	r2, [pc, #84]	@ (8004678 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	099b      	lsrs	r3, r3, #6
 800462a:	2232      	movs	r2, #50	@ 0x32
 800462c:	fb02 f303 	mul.w	r3, r2, r3
 8004630:	4a11      	ldr	r2, [pc, #68]	@ (8004678 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800463c:	e002      	b.n	8004644 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3b01      	subs	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004644:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f3      	bne.n	800463e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e000      	b.n	8004662 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	46020800 	.word	0x46020800
 8004674:	20000000 	.word	0x20000000
 8004678:	10624dd3 	.word	0x10624dd3

0800467c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004680:	4b04      	ldr	r3, [pc, #16]	@ (8004694 <HAL_PWREx_GetVoltageRange+0x18>)
 8004682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	46020800 	.word	0x46020800

08004698 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80046a0:	4b22      	ldr	r3, [pc, #136]	@ (800472c <HAL_PWREx_ConfigSupply+0x94>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a22      	ldr	r2, [pc, #136]	@ (8004730 <HAL_PWREx_ConfigSupply+0x98>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	2232      	movs	r2, #50	@ 0x32
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_PWREx_ConfigSupply+0x98>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d113      	bne.n	80046ec <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <HAL_PWREx_ConfigSupply+0x9c>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <HAL_PWREx_ConfigSupply+0x9c>)
 80046ca:	f023 0302 	bic.w	r3, r3, #2
 80046ce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80046d0:	e002      	b.n	80046d8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80046d8:	4b16      	ldr	r3, [pc, #88]	@ (8004734 <HAL_PWREx_ConfigSupply+0x9c>)
 80046da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d116      	bne.n	8004712 <HAL_PWREx_ConfigSupply+0x7a>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f3      	bne.n	80046d2 <HAL_PWREx_ConfigSupply+0x3a>
 80046ea:	e012      	b.n	8004712 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80046ec:	4b11      	ldr	r3, [pc, #68]	@ (8004734 <HAL_PWREx_ConfigSupply+0x9c>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a10      	ldr	r2, [pc, #64]	@ (8004734 <HAL_PWREx_ConfigSupply+0x9c>)
 80046f2:	f043 0302 	orr.w	r3, r3, #2
 80046f6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80046f8:	e002      	b.n	8004700 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <HAL_PWREx_ConfigSupply+0x9c>)
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <HAL_PWREx_ConfigSupply+0x7a>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f3      	bne.n	80046fa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e000      	b.n	800471e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000000 	.word	0x20000000
 8004730:	10624dd3 	.word	0x10624dd3
 8004734:	46020800 	.word	0x46020800

08004738 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_PWREx_EnableVddUSB+0x1c>)
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	4a04      	ldr	r2, [pc, #16]	@ (8004754 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004746:	6113      	str	r3, [r2, #16]
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	46020800 	.word	0x46020800

08004758 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800475c:	4b05      	ldr	r3, [pc, #20]	@ (8004774 <HAL_PWREx_EnableVddIO2+0x1c>)
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	4a04      	ldr	r2, [pc, #16]	@ (8004774 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004762:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004766:	6113      	str	r3, [r2, #16]
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	46020800 	.word	0x46020800

08004778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	@ 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f000 bec8 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004792:	4b99      	ldr	r3, [pc, #612]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479c:	4b96      	ldr	r3, [pc, #600]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 816c 	beq.w	8004a8c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_RCC_OscConfig+0x52>
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	f040 80de 	bne.w	800497e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 80da 	bne.w	800497e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f000 bea5 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047dc:	4b86      	ldr	r3, [pc, #536]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_RCC_OscConfig+0x7a>
 80047e8:	4b83      	ldr	r3, [pc, #524]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80047f0:	e005      	b.n	80047fe <HAL_RCC_OscConfig+0x86>
 80047f2:	4b81      	ldr	r3, [pc, #516]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80047f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80047fe:	4293      	cmp	r3, r2
 8004800:	d255      	bcs.n	80048ae <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f001 f9d9 	bl	8005bc4 <RCC_SetFlashLatencyFromMSIRange>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f000 be82 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800481e:	4b76      	ldr	r3, [pc, #472]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4a75      	ldr	r2, [pc, #468]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004824:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004828:	6093      	str	r3, [r2, #8]
 800482a:	4b73      	ldr	r3, [pc, #460]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	4970      	ldr	r1, [pc, #448]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004844:	d309      	bcc.n	800485a <HAL_RCC_OscConfig+0xe2>
 8004846:	4b6c      	ldr	r3, [pc, #432]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f023 021f 	bic.w	r2, r3, #31
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	4969      	ldr	r1, [pc, #420]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004854:	4313      	orrs	r3, r2
 8004856:	60cb      	str	r3, [r1, #12]
 8004858:	e07e      	b.n	8004958 <HAL_RCC_OscConfig+0x1e0>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	da0a      	bge.n	8004878 <HAL_RCC_OscConfig+0x100>
 8004862:	4b65      	ldr	r3, [pc, #404]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	4961      	ldr	r1, [pc, #388]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004872:	4313      	orrs	r3, r2
 8004874:	60cb      	str	r3, [r1, #12]
 8004876:	e06f      	b.n	8004958 <HAL_RCC_OscConfig+0x1e0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004880:	d30a      	bcc.n	8004898 <HAL_RCC_OscConfig+0x120>
 8004882:	4b5d      	ldr	r3, [pc, #372]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	029b      	lsls	r3, r3, #10
 8004890:	4959      	ldr	r1, [pc, #356]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004892:	4313      	orrs	r3, r2
 8004894:	60cb      	str	r3, [r1, #12]
 8004896:	e05f      	b.n	8004958 <HAL_RCC_OscConfig+0x1e0>
 8004898:	4b57      	ldr	r3, [pc, #348]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	03db      	lsls	r3, r3, #15
 80048a6:	4954      	ldr	r1, [pc, #336]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60cb      	str	r3, [r1, #12]
 80048ac:	e054      	b.n	8004958 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80048ae:	4b52      	ldr	r3, [pc, #328]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4a51      	ldr	r2, [pc, #324]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048b8:	6093      	str	r3, [r2, #8]
 80048ba:	4b4f      	ldr	r3, [pc, #316]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	494c      	ldr	r1, [pc, #304]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80048d4:	d309      	bcc.n	80048ea <HAL_RCC_OscConfig+0x172>
 80048d6:	4b48      	ldr	r3, [pc, #288]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f023 021f 	bic.w	r2, r3, #31
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4945      	ldr	r1, [pc, #276]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60cb      	str	r3, [r1, #12]
 80048e8:	e028      	b.n	800493c <HAL_RCC_OscConfig+0x1c4>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da0a      	bge.n	8004908 <HAL_RCC_OscConfig+0x190>
 80048f2:	4b41      	ldr	r3, [pc, #260]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	015b      	lsls	r3, r3, #5
 8004900:	493d      	ldr	r1, [pc, #244]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004902:	4313      	orrs	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
 8004906:	e019      	b.n	800493c <HAL_RCC_OscConfig+0x1c4>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004910:	d30a      	bcc.n	8004928 <HAL_RCC_OscConfig+0x1b0>
 8004912:	4b39      	ldr	r3, [pc, #228]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	029b      	lsls	r3, r3, #10
 8004920:	4935      	ldr	r1, [pc, #212]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004922:	4313      	orrs	r3, r2
 8004924:	60cb      	str	r3, [r1, #12]
 8004926:	e009      	b.n	800493c <HAL_RCC_OscConfig+0x1c4>
 8004928:	4b33      	ldr	r3, [pc, #204]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	03db      	lsls	r3, r3, #15
 8004936:	4930      	ldr	r1, [pc, #192]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004938:	4313      	orrs	r3, r2
 800493a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f93c 	bl	8005bc4 <RCC_SetFlashLatencyFromMSIRange>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f000 bde5 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004958:	f001 f8de 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800495c:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <HAL_RCC_OscConfig+0x284>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc ff9b 	bl	800189c <HAL_InitTick>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800496c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 808a 	beq.w	8004a8a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800497a:	f000 bdd2 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d066      	beq.n	8004a54 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004986:	4b1c      	ldr	r3, [pc, #112]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1b      	ldr	r2, [pc, #108]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004992:	f7fd f80d 	bl	80019b0 <HAL_GetTick>
 8004996:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004998:	e009      	b.n	80049ae <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800499a:	f7fd f809 	bl	80019b0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d902      	bls.n	80049ae <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	f000 bdba 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80049ae:	4b12      	ldr	r3, [pc, #72]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0ef      	beq.n	800499a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049ba:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4a0e      	ldr	r2, [pc, #56]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80049c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049c4:	6093      	str	r3, [r2, #8]
 80049c6:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	4909      	ldr	r1, [pc, #36]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049e0:	d30e      	bcc.n	8004a00 <HAL_RCC_OscConfig+0x288>
 80049e2:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 021f 	bic.w	r2, r3, #31
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	4902      	ldr	r1, [pc, #8]	@ (80049f8 <HAL_RCC_OscConfig+0x280>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
 80049f4:	e04a      	b.n	8004a8c <HAL_RCC_OscConfig+0x314>
 80049f6:	bf00      	nop
 80049f8:	46020c00 	.word	0x46020c00
 80049fc:	20000004 	.word	0x20000004
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	da0a      	bge.n	8004a1e <HAL_RCC_OscConfig+0x2a6>
 8004a08:	4b98      	ldr	r3, [pc, #608]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	015b      	lsls	r3, r3, #5
 8004a16:	4995      	ldr	r1, [pc, #596]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60cb      	str	r3, [r1, #12]
 8004a1c:	e036      	b.n	8004a8c <HAL_RCC_OscConfig+0x314>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a26:	d30a      	bcc.n	8004a3e <HAL_RCC_OscConfig+0x2c6>
 8004a28:	4b90      	ldr	r3, [pc, #576]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	029b      	lsls	r3, r3, #10
 8004a36:	498d      	ldr	r1, [pc, #564]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60cb      	str	r3, [r1, #12]
 8004a3c:	e026      	b.n	8004a8c <HAL_RCC_OscConfig+0x314>
 8004a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	03db      	lsls	r3, r3, #15
 8004a4c:	4987      	ldr	r1, [pc, #540]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60cb      	str	r3, [r1, #12]
 8004a52:	e01b      	b.n	8004a8c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004a54:	4b85      	ldr	r3, [pc, #532]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a84      	ldr	r2, [pc, #528]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a60:	f7fc ffa6 	bl	80019b0 <HAL_GetTick>
 8004a64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004a66:	e009      	b.n	8004a7c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a68:	f7fc ffa2 	bl	80019b0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d902      	bls.n	8004a7c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	f000 bd53 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ef      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2f0>
 8004a88:	e000      	b.n	8004a8c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 808b 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_OscConfig+0x334>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d109      	bne.n	8004aba <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d17d      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f000 bd34 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x35a>
 8004ac4:	4b69      	ldr	r3, [pc, #420]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a68      	ldr	r2, [pc, #416]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e041      	b.n	8004b56 <HAL_RCC_OscConfig+0x3de>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ada:	d112      	bne.n	8004b02 <HAL_RCC_OscConfig+0x38a>
 8004adc:	4b63      	ldr	r3, [pc, #396]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a62      	ldr	r2, [pc, #392]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004ae2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b60      	ldr	r3, [pc, #384]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a5f      	ldr	r2, [pc, #380]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b5d      	ldr	r3, [pc, #372]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5c      	ldr	r2, [pc, #368]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e029      	b.n	8004b56 <HAL_RCC_OscConfig+0x3de>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004b0a:	d112      	bne.n	8004b32 <HAL_RCC_OscConfig+0x3ba>
 8004b0c:	4b57      	ldr	r3, [pc, #348]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a56      	ldr	r2, [pc, #344]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b54      	ldr	r3, [pc, #336]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a53      	ldr	r2, [pc, #332]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b51      	ldr	r3, [pc, #324]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a50      	ldr	r2, [pc, #320]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	e011      	b.n	8004b56 <HAL_RCC_OscConfig+0x3de>
 8004b32:	4b4e      	ldr	r3, [pc, #312]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a4d      	ldr	r2, [pc, #308]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a4a      	ldr	r2, [pc, #296]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b48      	ldr	r3, [pc, #288]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a47      	ldr	r2, [pc, #284]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004b5e:	f7fc ff27 	bl	80019b0 <HAL_GetTick>
 8004b62:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b64:	e009      	b.n	8004b7a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b66:	f7fc ff23 	bl	80019b0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	@ 0x64
 8004b72:	d902      	bls.n	8004b7a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	f000 bcd4 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ef      	beq.n	8004b66 <HAL_RCC_OscConfig+0x3ee>
 8004b86:	e013      	b.n	8004bb0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004b88:	f7fc ff12 	bl	80019b0 <HAL_GetTick>
 8004b8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fc ff0e 	bl	80019b0 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	@ 0x64
 8004b9c:	d902      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	f000 bcbf 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ba4:	4b31      	ldr	r3, [pc, #196]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ef      	bne.n	8004b90 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05f      	beq.n	8004c7c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d005      	beq.n	8004bce <HAL_RCC_OscConfig+0x456>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d114      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d111      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f000 bca3 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b23      	ldr	r3, [pc, #140]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	4920      	ldr	r1, [pc, #128]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004bf0:	e044      	b.n	8004c7c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d024      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c06:	f7fc fed3 	bl	80019b0 <HAL_GetTick>
 8004c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c0c:	e009      	b.n	8004c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0e:	f7fc fecf 	bl	80019b0 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d902      	bls.n	8004c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	f000 bc80 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	490b      	ldr	r1, [pc, #44]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]
 8004c42:	e01b      	b.n	8004c7c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004c44:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a08      	ldr	r2, [pc, #32]	@ (8004c6c <HAL_RCC_OscConfig+0x4f4>)
 8004c4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c4e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c50:	f7fc feae 	bl	80019b0 <HAL_GetTick>
 8004c54:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c56:	e00b      	b.n	8004c70 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c58:	f7fc feaa 	bl	80019b0 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d904      	bls.n	8004c70 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	f000 bc5b 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
 8004c6c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c70:	4baf      	ldr	r3, [pc, #700]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ed      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80c8 	beq.w	8004e1a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c90:	4ba7      	ldr	r3, [pc, #668]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4ba4      	ldr	r3, [pc, #656]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca4:	4aa2      	ldr	r2, [pc, #648]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004cae:	4ba0      	ldr	r3, [pc, #640]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d119      	bne.n	8004d02 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004cce:	4b99      	ldr	r3, [pc, #612]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	4a98      	ldr	r2, [pc, #608]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cda:	f7fc fe69 	bl	80019b0 <HAL_GetTick>
 8004cde:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ce0:	e009      	b.n	8004cf6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fc fe65 	bl	80019b0 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d902      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	f000 bc16 	b.w	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ef      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d05f      	beq.n	8004dca <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004d0a:	4b89      	ldr	r3, [pc, #548]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d10:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d037      	beq.n	8004d90 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e3f4      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01b      	beq.n	8004d7a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004d42:	4b7b      	ldr	r3, [pc, #492]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d48:	4a79      	ldr	r2, [pc, #484]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d4a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004d4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004d52:	f7fc fe2d 	bl	80019b0 <HAL_GetTick>
 8004d56:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7fc fe29 	bl	80019b0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e3da      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d6c:	4b70      	ldr	r3, [pc, #448]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ef      	bne.n	8004d5a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	4969      	ldr	r1, [pc, #420]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004d90:	4b67      	ldr	r3, [pc, #412]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d96:	4a66      	ldr	r2, [pc, #408]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004d98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004da0:	f7fc fe06 	bl	80019b0 <HAL_GetTick>
 8004da4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da8:	f7fc fe02 	bl	80019b0 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e3b3      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004dba:	4b5d      	ldr	r3, [pc, #372]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ef      	beq.n	8004da8 <HAL_RCC_OscConfig+0x630>
 8004dc8:	e01b      	b.n	8004e02 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004dca:	4b59      	ldr	r3, [pc, #356]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dd0:	4a57      	ldr	r2, [pc, #348]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004dd2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004dda:	f7fc fde9 	bl	80019b0 <HAL_GetTick>
 8004dde:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de2:	f7fc fde5 	bl	80019b0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e396      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004df4:	4b4e      	ldr	r3, [pc, #312]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ef      	bne.n	8004de2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e02:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0a:	4b49      	ldr	r3, [pc, #292]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e10:	4a47      	ldr	r2, [pc, #284]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004e12:	f023 0304 	bic.w	r3, r3, #4
 8004e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8111 	beq.w	800504a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b40      	ldr	r3, [pc, #256]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d111      	bne.n	8004e60 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e42:	4a3b      	ldr	r2, [pc, #236]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e4c:	4b38      	ldr	r3, [pc, #224]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e60:	4b34      	ldr	r3, [pc, #208]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d118      	bne.n	8004e9e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004e6c:	4b31      	ldr	r3, [pc, #196]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	4a30      	ldr	r2, [pc, #192]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e78:	f7fc fd9a 	bl	80019b0 <HAL_GetTick>
 8004e7c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e80:	f7fc fd96 	bl	80019b0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e347      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e92:	4b28      	ldr	r3, [pc, #160]	@ (8004f34 <HAL_RCC_OscConfig+0x7bc>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01f      	beq.n	8004eea <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d010      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004ebe:	f043 0304 	orr.w	r3, r3, #4
 8004ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ecc:	4a18      	ldr	r2, [pc, #96]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ed6:	e018      	b.n	8004f0a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ed8:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ede:	4a14      	ldr	r2, [pc, #80]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ee8:	e00f      	b.n	8004f0a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004eea:	4b11      	ldr	r3, [pc, #68]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f00:	4a0b      	ldr	r2, [pc, #44]	@ (8004f30 <HAL_RCC_OscConfig+0x7b8>)
 8004f02:	f023 0304 	bic.w	r3, r3, #4
 8004f06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d057      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004f12:	f7fc fd4d 	bl	80019b0 <HAL_GetTick>
 8004f16:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f18:	e00e      	b.n	8004f38 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fc fd49 	bl	80019b0 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d905      	bls.n	8004f38 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e2f8      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
 8004f30:	46020c00 	.word	0x46020c00
 8004f34:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f38:	4b9c      	ldr	r3, [pc, #624]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0e9      	beq.n	8004f1a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01b      	beq.n	8004f8a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f52:	4b96      	ldr	r3, [pc, #600]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f58:	4a94      	ldr	r2, [pc, #592]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fc fd24 	bl	80019b0 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e2d3      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f7a:	4b8c      	ldr	r3, [pc, #560]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ed      	beq.n	8004f64 <HAL_RCC_OscConfig+0x7ec>
 8004f88:	e053      	b.n	8005032 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f8a:	4b88      	ldr	r3, [pc, #544]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f90:	4a86      	ldr	r2, [pc, #536]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fc fd08 	bl	80019b0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e2b7      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fb2:	4b7e      	ldr	r3, [pc, #504]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ed      	bne.n	8004f9c <HAL_RCC_OscConfig+0x824>
 8004fc0:	e037      	b.n	8005032 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004fc2:	f7fc fcf5 	bl	80019b0 <HAL_GetTick>
 8004fc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	f7fc fcf1 	bl	80019b0 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e2a0      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fe0:	4b72      	ldr	r3, [pc, #456]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ed      	bne.n	8004fca <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004fee:	4b6f      	ldr	r3, [pc, #444]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01a      	beq.n	8005032 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8004ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005002:	4a6a      	ldr	r2, [pc, #424]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005008:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fc fccf 	bl	80019b0 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e27e      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005024:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800502a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ed      	bne.n	800500e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005032:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005036:	2b01      	cmp	r3, #1
 8005038:	d107      	bne.n	800504a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b5c      	ldr	r3, [pc, #368]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005040:	4a5a      	ldr	r2, [pc, #360]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005042:	f023 0304 	bic.w	r3, r3, #4
 8005046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d036      	beq.n	80050c4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d019      	beq.n	8005092 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800505e:	4b53      	ldr	r3, [pc, #332]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a52      	ldr	r2, [pc, #328]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005064:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005068:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800506a:	f7fc fca1 	bl	80019b0 <HAL_GetTick>
 800506e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005072:	f7fc fc9d 	bl	80019b0 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e24e      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005084:	4b49      	ldr	r3, [pc, #292]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x8fa>
 8005090:	e018      	b.n	80050c4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005092:	4b46      	ldr	r3, [pc, #280]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a45      	ldr	r2, [pc, #276]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800509c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800509e:	f7fc fc87 	bl	80019b0 <HAL_GetTick>
 80050a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a6:	f7fc fc83 	bl	80019b0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e234      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80050b8:	4b3c      	ldr	r3, [pc, #240]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f0      	bne.n	80050a6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d036      	beq.n	800513e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d019      	beq.n	800510c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80050d8:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a33      	ldr	r2, [pc, #204]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 80050de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050e4:	f7fc fc64 	bl	80019b0 <HAL_GetTick>
 80050e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80050ec:	f7fc fc60 	bl	80019b0 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e211      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80050fe:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x974>
 800510a:	e018      	b.n	800513e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800510c:	4b27      	ldr	r3, [pc, #156]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a26      	ldr	r2, [pc, #152]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005116:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005118:	f7fc fc4a 	bl	80019b0 <HAL_GetTick>
 800511c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005120:	f7fc fc46 	bl	80019b0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e1f7      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005132:	4b1e      	ldr	r3, [pc, #120]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d07f      	beq.n	800524a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	d062      	beq.n	8005218 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005152:	4b16      	ldr	r3, [pc, #88]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005158:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800515c:	6093      	str	r3, [r2, #8]
 800515e:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	4910      	ldr	r1, [pc, #64]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005178:	d309      	bcc.n	800518e <HAL_RCC_OscConfig+0xa16>
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f023 021f 	bic.w	r2, r3, #31
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	4909      	ldr	r1, [pc, #36]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005188:	4313      	orrs	r3, r2
 800518a:	60cb      	str	r3, [r1, #12]
 800518c:	e02a      	b.n	80051e4 <HAL_RCC_OscConfig+0xa6c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	da0c      	bge.n	80051b0 <HAL_RCC_OscConfig+0xa38>
 8005196:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	015b      	lsls	r3, r3, #5
 80051a4:	4901      	ldr	r1, [pc, #4]	@ (80051ac <HAL_RCC_OscConfig+0xa34>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60cb      	str	r3, [r1, #12]
 80051aa:	e01b      	b.n	80051e4 <HAL_RCC_OscConfig+0xa6c>
 80051ac:	46020c00 	.word	0x46020c00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b8:	d30a      	bcc.n	80051d0 <HAL_RCC_OscConfig+0xa58>
 80051ba:	4ba1      	ldr	r3, [pc, #644]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	029b      	lsls	r3, r3, #10
 80051c8:	499d      	ldr	r1, [pc, #628]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60cb      	str	r3, [r1, #12]
 80051ce:	e009      	b.n	80051e4 <HAL_RCC_OscConfig+0xa6c>
 80051d0:	4b9b      	ldr	r3, [pc, #620]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	03db      	lsls	r3, r3, #15
 80051de:	4998      	ldr	r1, [pc, #608]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80051e4:	4b96      	ldr	r3, [pc, #600]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a95      	ldr	r2, [pc, #596]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80051ea:	f043 0310 	orr.w	r3, r3, #16
 80051ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051f0:	f7fc fbde 	bl	80019b0 <HAL_GetTick>
 80051f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80051f8:	f7fc fbda 	bl	80019b0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e18b      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800520a:	4b8d      	ldr	r3, [pc, #564]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0xa80>
 8005216:	e018      	b.n	800524a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005218:	4b89      	ldr	r3, [pc, #548]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a88      	ldr	r2, [pc, #544]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800521e:	f023 0310 	bic.w	r3, r3, #16
 8005222:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005224:	f7fc fbc4 	bl	80019b0 <HAL_GetTick>
 8005228:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800522c:	f7fc fbc0 	bl	80019b0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e171      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800523e:	4b80      	ldr	r3, [pc, #512]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8166 	beq.w	8005520 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800525a:	4b79      	ldr	r3, [pc, #484]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b0c      	cmp	r3, #12
 8005264:	f000 80f2 	beq.w	800544c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	2b02      	cmp	r3, #2
 800526e:	f040 80c5 	bne.w	80053fc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b73      	ldr	r3, [pc, #460]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a72      	ldr	r2, [pc, #456]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800527c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800527e:	f7fc fb97 	bl	80019b0 <HAL_GetTick>
 8005282:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005286:	f7fc fb93 	bl	80019b0 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e144      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005298:	4b69      	ldr	r3, [pc, #420]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a4:	4b66      	ldr	r3, [pc, #408]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80052a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d111      	bne.n	80052d6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80052b2:	4b63      	ldr	r3, [pc, #396]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80052b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b8:	4a61      	ldr	r2, [pc, #388]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80052ba:	f043 0304 	orr.w	r3, r3, #4
 80052be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80052c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80052c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80052d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005444 <HAL_RCC_OscConfig+0xccc>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052e2:	d102      	bne.n	80052ea <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80052ea:	4b56      	ldr	r3, [pc, #344]	@ (8005444 <HAL_RCC_OscConfig+0xccc>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	4a55      	ldr	r2, [pc, #340]	@ (8005444 <HAL_RCC_OscConfig+0xccc>)
 80052f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052f4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80052f6:	4b52      	ldr	r3, [pc, #328]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800530a:	3a01      	subs	r2, #1
 800530c:	0212      	lsls	r2, r2, #8
 800530e:	4311      	orrs	r1, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005314:	430a      	orrs	r2, r1
 8005316:	494a      	ldr	r1, [pc, #296]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	628b      	str	r3, [r1, #40]	@ 0x28
 800531c:	4b48      	ldr	r3, [pc, #288]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800531e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005320:	4b49      	ldr	r3, [pc, #292]	@ (8005448 <HAL_RCC_OscConfig+0xcd0>)
 8005322:	4013      	ands	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005328:	3a01      	subs	r2, #1
 800532a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005332:	3a01      	subs	r2, #1
 8005334:	0252      	lsls	r2, r2, #9
 8005336:	b292      	uxth	r2, r2
 8005338:	4311      	orrs	r1, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800533e:	3a01      	subs	r2, #1
 8005340:	0412      	lsls	r2, r2, #16
 8005342:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005346:	4311      	orrs	r1, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800534c:	3a01      	subs	r2, #1
 800534e:	0612      	lsls	r2, r2, #24
 8005350:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005354:	430a      	orrs	r2, r1
 8005356:	493a      	ldr	r1, [pc, #232]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800535c:	4b38      	ldr	r3, [pc, #224]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	4a37      	ldr	r2, [pc, #220]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005362:	f023 0310 	bic.w	r3, r3, #16
 8005366:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536c:	4a34      	ldr	r2, [pc, #208]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005372:	4b33      	ldr	r3, [pc, #204]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	4a32      	ldr	r2, [pc, #200]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005378:	f043 0310 	orr.w	r3, r3, #16
 800537c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800537e:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	f023 020c 	bic.w	r2, r3, #12
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538a:	492d      	ldr	r1, [pc, #180]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 800538c:	4313      	orrs	r3, r2
 800538e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005390:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005398:	4b2a      	ldr	r3, [pc, #168]	@ (8005444 <HAL_RCC_OscConfig+0xccc>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <HAL_RCC_OscConfig+0xccc>)
 800539e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053a2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80053a4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80053ac:	4b24      	ldr	r3, [pc, #144]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b2:	4a23      	ldr	r2, [pc, #140]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053b4:	f023 0304 	bic.w	r3, r3, #4
 80053b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80053bc:	4b20      	ldr	r3, [pc, #128]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053c8:	f7fc faf2 	bl	80019b0 <HAL_GetTick>
 80053cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fc faee 	bl	80019b0 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e09f      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80053e2:	4b17      	ldr	r3, [pc, #92]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053ee:	4b14      	ldr	r3, [pc, #80]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	4a13      	ldr	r2, [pc, #76]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053f8:	6293      	str	r3, [r2, #40]	@ 0x28
 80053fa:	e091      	b.n	8005520 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80053fc:	4b10      	ldr	r3, [pc, #64]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0f      	ldr	r2, [pc, #60]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005406:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005408:	f7fc fad2 	bl	80019b0 <HAL_GetTick>
 800540c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fc face 	bl	80019b0 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e07f      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005422:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800542e:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	4a03      	ldr	r2, [pc, #12]	@ (8005440 <HAL_RCC_OscConfig+0xcc8>)
 8005434:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005438:	f023 0303 	bic.w	r3, r3, #3
 800543c:	6293      	str	r3, [r2, #40]	@ 0x28
 800543e:	e06f      	b.n	8005520 <HAL_RCC_OscConfig+0xda8>
 8005440:	46020c00 	.word	0x46020c00
 8005444:	46020800 	.word	0x46020800
 8005448:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800544c:	4b37      	ldr	r3, [pc, #220]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005452:	4b36      	ldr	r3, [pc, #216]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 8005454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005456:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	2b01      	cmp	r3, #1
 800545e:	d039      	beq.n	80054d4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0203 	and.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d132      	bne.n	80054d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d129      	bne.n	80054d4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d122      	bne.n	80054d4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005498:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d11a      	bne.n	80054d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	0a5b      	lsrs	r3, r3, #9
 80054a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d111      	bne.n	80054d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054bc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d108      	bne.n	80054d4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	0e1b      	lsrs	r3, r3, #24
 80054c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ce:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e024      	b.n	8005522 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80054d8:	4b14      	ldr	r3, [pc, #80]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d01a      	beq.n	8005520 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80054ea:	4b10      	ldr	r3, [pc, #64]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ee:	4a0f      	ldr	r2, [pc, #60]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 80054f0:	f023 0310 	bic.w	r3, r3, #16
 80054f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fc fa5b 	bl	80019b0 <HAL_GetTick>
 80054fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80054fc:	bf00      	nop
 80054fe:	f7fc fa57 	bl	80019b0 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	4293      	cmp	r3, r2
 8005508:	d0f9      	beq.n	80054fe <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550e:	4a07      	ldr	r2, [pc, #28]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005514:	4b05      	ldr	r3, [pc, #20]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	4a04      	ldr	r2, [pc, #16]	@ (800552c <HAL_RCC_OscConfig+0xdb4>)
 800551a:	f043 0310 	orr.w	r3, r3, #16
 800551e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3738      	adds	r7, #56	@ 0x38
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	46020c00 	.word	0x46020c00

08005530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e1d9      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b9b      	ldr	r3, [pc, #620]	@ (80057b4 <HAL_RCC_ClockConfig+0x284>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d910      	bls.n	8005574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b98      	ldr	r3, [pc, #608]	@ (80057b4 <HAL_RCC_ClockConfig+0x284>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 020f 	bic.w	r2, r3, #15
 800555a:	4996      	ldr	r1, [pc, #600]	@ (80057b4 <HAL_RCC_ClockConfig+0x284>)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b94      	ldr	r3, [pc, #592]	@ (80057b4 <HAL_RCC_ClockConfig+0x284>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e1c1      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	4b8c      	ldr	r3, [pc, #560]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005590:	4b89      	ldr	r3, [pc, #548]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	4986      	ldr	r1, [pc, #536]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	4b81      	ldr	r3, [pc, #516]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055bc:	429a      	cmp	r2, r3
 80055be:	d909      	bls.n	80055d4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80055c0:	4b7d      	ldr	r3, [pc, #500]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	497a      	ldr	r1, [pc, #488]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b74      	ldr	r3, [pc, #464]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d908      	bls.n	8005602 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b71      	ldr	r3, [pc, #452]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	496e      	ldr	r1, [pc, #440]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	4b69      	ldr	r3, [pc, #420]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	429a      	cmp	r2, r3
 800561c:	d908      	bls.n	8005630 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800561e:	4b66      	ldr	r3, [pc, #408]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 020f 	bic.w	r2, r3, #15
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4963      	ldr	r1, [pc, #396]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800562c:	4313      	orrs	r3, r2
 800562e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80d2 	beq.w	80057e2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d143      	bne.n	80056d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564a:	4b5b      	ldr	r3, [pc, #364]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d110      	bne.n	800567a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	4b57      	ldr	r3, [pc, #348]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800565a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800565e:	4a56      	ldr	r2, [pc, #344]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005668:	4b53      	ldr	r3, [pc, #332]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800566a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800567a:	f7fc f999 	bl	80019b0 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005680:	4b4e      	ldr	r3, [pc, #312]	@ (80057bc <HAL_RCC_ClockConfig+0x28c>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00f      	beq.n	80056ac <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800568e:	f7fc f98f 	bl	80019b0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e12b      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80056a0:	4b46      	ldr	r3, [pc, #280]	@ (80057bc <HAL_RCC_ClockConfig+0x28c>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d107      	bne.n	80056c2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80056b2:	4b41      	ldr	r3, [pc, #260]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056b8:	4a3f      	ldr	r2, [pc, #252]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056ba:	f023 0304 	bic.w	r3, r3, #4
 80056be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056c2:	4b3d      	ldr	r3, [pc, #244]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d121      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e112      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056da:	4b37      	ldr	r3, [pc, #220]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d115      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e106      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d107      	bne.n	8005702 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80056f2:	4b31      	ldr	r3, [pc, #196]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e0fa      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005702:	4b2d      	ldr	r3, [pc, #180]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0f2      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005712:	4b29      	ldr	r3, [pc, #164]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f023 0203 	bic.w	r2, r3, #3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4926      	ldr	r1, [pc, #152]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005724:	f7fc f944 	bl	80019b0 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d112      	bne.n	8005758 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005732:	e00a      	b.n	800574a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005734:	f7fc f93c 	bl	80019b0 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0d6      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800574a:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d1ee      	bne.n	8005734 <HAL_RCC_ClockConfig+0x204>
 8005756:	e044      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d112      	bne.n	8005786 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005760:	e00a      	b.n	8005778 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005762:	f7fc f925 	bl	80019b0 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005770:	4293      	cmp	r3, r2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e0bf      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005778:	4b0f      	ldr	r3, [pc, #60]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 030c 	and.w	r3, r3, #12
 8005780:	2b08      	cmp	r3, #8
 8005782:	d1ee      	bne.n	8005762 <HAL_RCC_ClockConfig+0x232>
 8005784:	e02d      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d123      	bne.n	80057d6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fc f90e 	bl	80019b0 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0a8      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057a6:	4b04      	ldr	r3, [pc, #16]	@ (80057b8 <HAL_RCC_ClockConfig+0x288>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1ee      	bne.n	8005790 <HAL_RCC_ClockConfig+0x260>
 80057b2:	e016      	b.n	80057e2 <HAL_RCC_ClockConfig+0x2b2>
 80057b4:	40022000 	.word	0x40022000
 80057b8:	46020c00 	.word	0x46020c00
 80057bc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c0:	f7fc f8f6 	bl	80019b0 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e090      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d1ee      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	4b43      	ldr	r3, [pc, #268]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d208      	bcs.n	8005810 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80057fe:	4b40      	ldr	r3, [pc, #256]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 020f 	bic.w	r2, r3, #15
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	493d      	ldr	r1, [pc, #244]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800580c:	4313      	orrs	r3, r2
 800580e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005810:	4b3c      	ldr	r3, [pc, #240]	@ (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d210      	bcs.n	8005840 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b39      	ldr	r3, [pc, #228]	@ (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f023 020f 	bic.w	r2, r3, #15
 8005826:	4937      	ldr	r1, [pc, #220]	@ (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b35      	ldr	r3, [pc, #212]	@ (8005904 <HAL_RCC_ClockConfig+0x3d4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e05b      	b.n	80058f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005858:	429a      	cmp	r2, r3
 800585a:	d208      	bcs.n	800586e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4925      	ldr	r1, [pc, #148]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800586a:	4313      	orrs	r3, r2
 800586c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d012      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005888:	429a      	cmp	r2, r3
 800588a:	d209      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800588c:	4b1c      	ldr	r3, [pc, #112]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4919      	ldr	r1, [pc, #100]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 800589c:	4313      	orrs	r3, r2
 800589e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d208      	bcs.n	80058ce <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80058bc:	4b10      	ldr	r3, [pc, #64]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	490d      	ldr	r1, [pc, #52]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80058ce:	f000 f821 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005900 <HAL_RCC_ClockConfig+0x3d0>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	490a      	ldr	r1, [pc, #40]	@ (8005908 <HAL_RCC_ClockConfig+0x3d8>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
 80058e4:	4a09      	ldr	r2, [pc, #36]	@ (800590c <HAL_RCC_ClockConfig+0x3dc>)
 80058e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058e8:	4b09      	ldr	r3, [pc, #36]	@ (8005910 <HAL_RCC_ClockConfig+0x3e0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fb ffd5 	bl	800189c <HAL_InitTick>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	46020c00 	.word	0x46020c00
 8005904:	40022000 	.word	0x40022000
 8005908:	0800aa30 	.word	0x0800aa30
 800590c:	20000000 	.word	0x20000000
 8005910:	20000004 	.word	0x20000004

08005914 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005914:	b480      	push	{r7}
 8005916:	b08b      	sub	sp, #44	@ 0x2c
 8005918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005922:	4b78      	ldr	r3, [pc, #480]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800592c:	4b75      	ldr	r3, [pc, #468]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0x34>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d121      	bne.n	8005986 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d11e      	bne.n	8005986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005948:	4b6e      	ldr	r3, [pc, #440]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005954:	4b6b      	ldr	r3, [pc, #428]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800595a:	0b1b      	lsrs	r3, r3, #12
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
 8005962:	e005      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005964:	4b67      	ldr	r3, [pc, #412]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	0f1b      	lsrs	r3, r3, #28
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005970:	4a65      	ldr	r2, [pc, #404]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d110      	bne.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005984:	e00d      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005986:	4b5f      	ldr	r3, [pc, #380]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b04      	cmp	r3, #4
 8005990:	d102      	bne.n	8005998 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005992:	4b5e      	ldr	r3, [pc, #376]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	e004      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b08      	cmp	r3, #8
 800599c:	d101      	bne.n	80059a2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800599e:	4b5b      	ldr	r3, [pc, #364]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80059a0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b0c      	cmp	r3, #12
 80059a6:	f040 80a5 	bne.w	8005af4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80059aa:	4b56      	ldr	r3, [pc, #344]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80059b4:	4b53      	ldr	r3, [pc, #332]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	3301      	adds	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80059c2:	4b50      	ldr	r3, [pc, #320]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80059ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d003      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d022      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x128>
 80059f6:	e043      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a1a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a1e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005b14 <HAL_RCC_GetSysClockFreq+0x200>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a3a:	e046      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005b10 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a5e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a62:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005b14 <HAL_RCC_GetSysClockFreq+0x200>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a7e:	e024      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a98:	4b1a      	ldr	r3, [pc, #104]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005aa8:	ed97 6a01 	vldr	s12, [r7, #4]
 8005aac:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005b14 <HAL_RCC_GetSysClockFreq+0x200>
 8005ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ac8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005aca:	4b0e      	ldr	r3, [pc, #56]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ace:	0e1b      	lsrs	r3, r3, #24
 8005ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aee:	ee17 3a90 	vmov	r3, s15
 8005af2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005af4:	6a3b      	ldr	r3, [r7, #32]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	372c      	adds	r7, #44	@ 0x2c
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	46020c00 	.word	0x46020c00
 8005b08:	0800aa48 	.word	0x0800aa48
 8005b0c:	00f42400 	.word	0x00f42400
 8005b10:	4b742400 	.word	0x4b742400
 8005b14:	46000000 	.word	0x46000000

08005b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b1c:	f7ff fefa 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <HAL_RCC_GetHCLKFreq+0x28>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	4906      	ldr	r1, [pc, #24]	@ (8005b44 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005b2c:	5ccb      	ldrb	r3, [r1, r3]
 8005b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b32:	4a05      	ldr	r2, [pc, #20]	@ (8005b48 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b34:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005b36:	4b04      	ldr	r3, [pc, #16]	@ (8005b48 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b38:	681b      	ldr	r3, [r3, #0]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	46020c00 	.word	0x46020c00
 8005b44:	0800aa30 	.word	0x0800aa30
 8005b48:	20000000 	.word	0x20000000

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005b50:	f7ff ffe2 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	091b      	lsrs	r3, r3, #4
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4903      	ldr	r1, [pc, #12]	@ (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	46020c00 	.word	0x46020c00
 8005b70:	0800aa40 	.word	0x0800aa40

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005b78:	f7ff ffce 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	@ (8005b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	@ (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	46020c00 	.word	0x46020c00
 8005b98:	0800aa40 	.word	0x0800aa40

08005b9c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005ba0:	f7ff ffba 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <HAL_RCC_GetPCLK3Freq+0x20>)
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	4903      	ldr	r1, [pc, #12]	@ (8005bc0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005bb2:	5ccb      	ldrb	r3, [r1, r3]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	46020c00 	.word	0x46020c00
 8005bc0:	0800aa40 	.word	0x0800aa40

08005bc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bda:	f7fe fd4f 	bl	800467c <HAL_PWREx_GetVoltageRange>
 8005bde:	6178      	str	r0, [r7, #20]
 8005be0:	e019      	b.n	8005c16 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005be2:	4b39      	ldr	r3, [pc, #228]	@ (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005be8:	4a37      	ldr	r2, [pc, #220]	@ (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005bea:	f043 0304 	orr.w	r3, r3, #4
 8005bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005bf2:	4b35      	ldr	r3, [pc, #212]	@ (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c00:	f7fe fd3c 	bl	800467c <HAL_PWREx_GetVoltageRange>
 8005c04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c06:	4b30      	ldr	r3, [pc, #192]	@ (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c0e:	f023 0304 	bic.w	r3, r3, #4
 8005c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c1c:	d003      	beq.n	8005c26 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c24:	d109      	bne.n	8005c3a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c2c:	d202      	bcs.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c2e:	2301      	movs	r3, #1
 8005c30:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005c32:	e033      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005c38:	e030      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c40:	d208      	bcs.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c48:	d102      	bne.n	8005c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e025      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e035      	b.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c5a:	d90f      	bls.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c68:	d902      	bls.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e015      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005c70:	2301      	movs	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	e012      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e00f      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c82:	d109      	bne.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c8a:	d102      	bne.n	8005c92 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	e004      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005c92:	2302      	movs	r3, #2
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	e001      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005c98:	2301      	movs	r3, #1
 8005c9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 020f 	bic.w	r2, r3, #15
 8005ca4:	4909      	ldr	r1, [pc, #36]	@ (8005ccc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005cac:	4b07      	ldr	r3, [pc, #28]	@ (8005ccc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d001      	beq.n	8005cbe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	46020c00 	.word	0x46020c00
 8005ccc:	40022000 	.word	0x40022000

08005cd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b0b8      	sub	sp, #224	@ 0xe0
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f002 0401 	and.w	r4, r2, #1
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	ea54 0305 	orrs.w	r3, r4, r5
 8005cfa:	d00b      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005cfc:	4bca      	ldr	r3, [pc, #808]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d02:	f023 0103 	bic.w	r1, r3, #3
 8005d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d0c:	4ac6      	ldr	r2, [pc, #792]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f002 0802 	and.w	r8, r2, #2
 8005d20:	f04f 0900 	mov.w	r9, #0
 8005d24:	ea58 0309 	orrs.w	r3, r8, r9
 8005d28:	d00b      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005d2a:	4bbf      	ldr	r3, [pc, #764]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d30:	f023 010c 	bic.w	r1, r3, #12
 8005d34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	4abb      	ldr	r2, [pc, #748]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f002 0a04 	and.w	sl, r2, #4
 8005d4e:	f04f 0b00 	mov.w	fp, #0
 8005d52:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d56:	d00b      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005d58:	4bb3      	ldr	r3, [pc, #716]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d5e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	4aaf      	ldr	r2, [pc, #700]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f002 0308 	and.w	r3, r2, #8
 8005d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	d00b      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005d90:	4ba5      	ldr	r3, [pc, #660]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da0:	4aa1      	ldr	r2, [pc, #644]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005da2:	430b      	orrs	r3, r1
 8005da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f002 0310 	and.w	r3, r2, #16
 8005db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005db8:	2300      	movs	r3, #0
 8005dba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005dbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005dc8:	4b97      	ldr	r3, [pc, #604]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd8:	4a93      	ldr	r2, [pc, #588]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f002 0320 	and.w	r3, r2, #32
 8005dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005df6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005e00:	4b89      	ldr	r3, [pc, #548]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e06:	f023 0107 	bic.w	r1, r3, #7
 8005e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e10:	4a85      	ldr	r2, [pc, #532]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e32:	460b      	mov	r3, r1
 8005e34:	4313      	orrs	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005e38:	4b7b      	ldr	r3, [pc, #492]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e3e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e48:	4a77      	ldr	r2, [pc, #476]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e66:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	d00b      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005e70:	4b6d      	ldr	r3, [pc, #436]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e80:	4a69      	ldr	r2, [pc, #420]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e82:	430b      	orrs	r3, r1
 8005e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005eb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb8:	4a5b      	ldr	r2, [pc, #364]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ecc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ed6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005eda:	460b      	mov	r3, r1
 8005edc:	4313      	orrs	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005ee0:	4b51      	ldr	r3, [pc, #324]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ee6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ef8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f0e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f12:	460b      	mov	r3, r1
 8005f14:	4313      	orrs	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005f18:	4b43      	ldr	r3, [pc, #268]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f1e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f28:	4a3f      	ldr	r2, [pc, #252]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f40:	2300      	movs	r3, #0
 8005f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	d00b      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005f50:	4b35      	ldr	r3, [pc, #212]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f56:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f60:	4a31      	ldr	r2, [pc, #196]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f76:	2300      	movs	r3, #0
 8005f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f7a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4313      	orrs	r3, r2
 8005f82:	d00c      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005f84:	4b28      	ldr	r3, [pc, #160]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f96:	4a24      	ldr	r2, [pc, #144]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005faa:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fac:	2300      	movs	r3, #0
 8005fae:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fb0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d04f      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc2:	2b80      	cmp	r3, #128	@ 0x80
 8005fc4:	d02d      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8005fc6:	2b80      	cmp	r3, #128	@ 0x80
 8005fc8:	d827      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005fca:	2b60      	cmp	r3, #96	@ 0x60
 8005fcc:	d02e      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005fce:	2b60      	cmp	r3, #96	@ 0x60
 8005fd0:	d823      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005fd2:	2b40      	cmp	r3, #64	@ 0x40
 8005fd4:	d006      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d81f      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d011      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005fe2:	e01a      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fe4:	4b10      	ldr	r3, [pc, #64]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ff0:	e01d      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f002 f9d1 	bl	80083a0 <RCCEx_PLL2_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006004:	e013      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800600a:	332c      	adds	r3, #44	@ 0x2c
 800600c:	4618      	mov	r0, r3
 800600e:	f002 fa5f 	bl	80084d0 <RCCEx_PLL3_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006018:	e009      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006020:	e005      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006022:	bf00      	nop
 8006024:	e003      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006026:	bf00      	nop
 8006028:	46020c00 	.word	0x46020c00
        break;
 800602c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006036:	4bb6      	ldr	r3, [pc, #728]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800603c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006048:	4ab1      	ldr	r2, [pc, #708]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800604a:	430b      	orrs	r3, r1
 800604c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006056:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800605a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006066:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006068:	2300      	movs	r3, #0
 800606a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800606c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006070:	460b      	mov	r3, r1
 8006072:	4313      	orrs	r3, r2
 8006074:	d053      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800607a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800607e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006082:	d033      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006088:	d82c      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800608a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800608e:	d02f      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006090:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006094:	d826      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800609a:	d008      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800609c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a0:	d820      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060aa:	d011      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80060ac:	e01a      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060ae:	4b98      	ldr	r3, [pc, #608]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	4a97      	ldr	r2, [pc, #604]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80060ba:	e01a      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060c0:	3308      	adds	r3, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f002 f96c 	bl	80083a0 <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80060ce:	e010      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060d4:	332c      	adds	r3, #44	@ 0x2c
 80060d6:	4618      	mov	r0, r3
 80060d8:	f002 f9fa 	bl	80084d0 <RCCEx_PLL3_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80060e2:	e006      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80060ea:	e002      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80060ec:	bf00      	nop
 80060ee:	e000      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80060f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10d      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80060fa:	4b85      	ldr	r3, [pc, #532]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006100:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800610c:	4a80      	ldr	r2, [pc, #512]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800610e:	430b      	orrs	r3, r1
 8006110:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006114:	e003      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800611a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800611e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800612a:	663b      	str	r3, [r7, #96]	@ 0x60
 800612c:	2300      	movs	r3, #0
 800612e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006130:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006134:	460b      	mov	r3, r1
 8006136:	4313      	orrs	r3, r2
 8006138:	d046      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800613a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800613e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006142:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006146:	d028      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006148:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800614c:	d821      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800614e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006152:	d022      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006158:	d81b      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800615a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800615e:	d01c      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006164:	d815      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800616a:	d008      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800616c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006170:	d80f      	bhi.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d011      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617a:	d00e      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800617c:	e009      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800617e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006182:	3308      	adds	r3, #8
 8006184:	4618      	mov	r0, r3
 8006186:	f002 f90b 	bl	80083a0 <RCCEx_PLL2_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006190:	e004      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10d      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80061a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061aa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061b6:	4a56      	ldr	r2, [pc, #344]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061b8:	430b      	orrs	r3, r1
 80061ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80061c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80061c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80061d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061d6:	2300      	movs	r3, #0
 80061d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80061de:	460b      	mov	r3, r1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	d03f      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80061e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d81e      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80061f0:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006237 	.word	0x08006237
 80061fc:	0800620d 	.word	0x0800620d
 8006200:	0800621b 	.word	0x0800621b
 8006204:	08006237 	.word	0x08006237
 8006208:	08006237 	.word	0x08006237
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800620c:	4b40      	ldr	r3, [pc, #256]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	4a3f      	ldr	r2, [pc, #252]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006216:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006218:	e00e      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800621a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800621e:	332c      	adds	r3, #44	@ 0x2c
 8006220:	4618      	mov	r0, r3
 8006222:	f002 f955 	bl	80084d0 <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800622c:	e004      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006236:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006238:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10d      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006240:	4b33      	ldr	r3, [pc, #204]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006246:	f023 0107 	bic.w	r1, r3, #7
 800624a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006252:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006254:	430b      	orrs	r3, r1
 8006256:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006260:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006270:	653b      	str	r3, [r7, #80]	@ 0x50
 8006272:	2300      	movs	r3, #0
 8006274:	657b      	str	r3, [r7, #84]	@ 0x54
 8006276:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	d04d      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006288:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800628c:	d028      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800628e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006292:	d821      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006294:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006298:	d024      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800629a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800629e:	d81b      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80062a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a4:	d00e      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80062a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062aa:	d815      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80062b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b4:	d110      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062b6:	4b16      	ldr	r3, [pc, #88]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	4a15      	ldr	r2, [pc, #84]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062c0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80062c2:	e012      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062c8:	332c      	adds	r3, #44	@ 0x2c
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 f900 	bl	80084d0 <RCCEx_PLL3_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062d6:	e008      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80062de:	e004      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80062e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d110      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80062f2:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80062fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006304:	4a02      	ldr	r2, [pc, #8]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006306:	430b      	orrs	r3, r1
 8006308:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800630c:	e006      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800630e:	bf00      	nop
 8006310:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006314:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006318:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800631c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800632a:	2300      	movs	r3, #0
 800632c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	f000 80b5 	beq.w	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633a:	2300      	movs	r3, #0
 800633c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006340:	4b9d      	ldr	r3, [pc, #628]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d113      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634e:	4b9a      	ldr	r3, [pc, #616]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006354:	4a98      	ldr	r2, [pc, #608]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006356:	f043 0304 	orr.w	r3, r3, #4
 800635a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800635e:	4b96      	ldr	r3, [pc, #600]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800636c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006370:	2301      	movs	r3, #1
 8006372:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006376:	4b91      	ldr	r3, [pc, #580]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	4a90      	ldr	r2, [pc, #576]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006382:	f7fb fb15 	bl	80019b0 <HAL_GetTick>
 8006386:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800638a:	e00b      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638c:	f7fb fb10 	bl	80019b0 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d903      	bls.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80063a2:	e005      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80063a4:	4b85      	ldr	r3, [pc, #532]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ed      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80063b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d165      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063b8:	4b7f      	ldr	r3, [pc, #508]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80063c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d023      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80063ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063d2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80063d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01b      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063de:	4b76      	ldr	r3, [pc, #472]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063ec:	4b72      	ldr	r3, [pc, #456]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063f2:	4a71      	ldr	r2, [pc, #452]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063fc:	4b6e      	ldr	r3, [pc, #440]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006402:	4a6d      	ldr	r2, [pc, #436]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006408:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800640c:	4a6a      	ldr	r2, [pc, #424]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800640e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006412:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006422:	f7fb fac5 	bl	80019b0 <HAL_GetTick>
 8006426:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642a:	e00d      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642c:	f7fb fac0 	bl	80019b0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	f241 3388 	movw	r3, #5000	@ 0x1388
 800643c:	429a      	cmp	r2, r3
 800643e:	d903      	bls.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006446:	e006      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006448:	4b5b      	ldr	r3, [pc, #364]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800644a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0ea      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006456:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10d      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800645e:	4b56      	ldr	r3, [pc, #344]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006464:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800646c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006470:	4a51      	ldr	r2, [pc, #324]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006472:	430b      	orrs	r3, r1
 8006474:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006478:	e008      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800647a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800647e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006482:	e003      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006488:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800648c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006490:	2b01      	cmp	r3, #1
 8006492:	d107      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006494:	4b48      	ldr	r3, [pc, #288]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800649a:	4a47      	ldr	r2, [pc, #284]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800649c:	f023 0304 	bic.w	r3, r3, #4
 80064a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80064a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80064b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064b2:	2300      	movs	r3, #0
 80064b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064ba:	460b      	mov	r3, r1
 80064bc:	4313      	orrs	r3, r2
 80064be:	d042      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80064c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80064cc:	d022      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80064ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80064d2:	d81b      	bhi.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80064d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d8:	d011      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80064da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064de:	d815      	bhi.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d019      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80064e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064e8:	d110      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064ee:	3308      	adds	r3, #8
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 ff55 	bl	80083a0 <RCCEx_PLL2_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80064fc:	e00d      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fe:	4b2e      	ldr	r3, [pc, #184]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	4a2d      	ldr	r2, [pc, #180]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006508:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800650a:	e006      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006512:	e002      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006514:	bf00      	nop
 8006516:	e000      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006518:	bf00      	nop
    }
    if (ret == HAL_OK)
 800651a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10d      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006522:	4b25      	ldr	r3, [pc, #148]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006528:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800652c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006530:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006534:	4a20      	ldr	r2, [pc, #128]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006536:	430b      	orrs	r3, r1
 8006538:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800653c:	e003      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006542:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006546:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006554:	2300      	movs	r3, #0
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006558:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800655c:	460b      	mov	r3, r1
 800655e:	4313      	orrs	r3, r2
 8006560:	d032      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006566:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800656a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800656e:	d00b      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006574:	d804      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657e:	d007      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006586:	e004      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006588:	bf00      	nop
 800658a:	e002      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800658c:	bf00      	nop
 800658e:	e000      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006590:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006592:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006596:	2b00      	cmp	r3, #0
 8006598:	d112      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800659a:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800659c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ac:	4a02      	ldr	r2, [pc, #8]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065ae:	430b      	orrs	r3, r1
 80065b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80065b4:	e008      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80065b6:	bf00      	nop
 80065b8:	46020c00 	.word	0x46020c00
 80065bc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80065c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80065c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d6:	2300      	movs	r3, #0
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80065de:	460b      	mov	r3, r1
 80065e0:	4313      	orrs	r3, r2
 80065e2:	d019      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80065e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065f0:	d105      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065f2:	4b88      	ldr	r3, [pc, #544]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f6:	4a87      	ldr	r2, [pc, #540]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065fc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80065fe:	4b85      	ldr	r3, [pc, #532]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006600:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006604:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800660c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006610:	4a80      	ldr	r2, [pc, #512]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006612:	430b      	orrs	r3, r1
 8006614:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006626:	2300      	movs	r3, #0
 8006628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800662a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d00c      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006634:	4b77      	ldr	r3, [pc, #476]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800663a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800663e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006646:	4973      	ldr	r1, [pc, #460]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800664e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	2300      	movs	r3, #0
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006660:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d00c      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800666a:	4b6a      	ldr	r3, [pc, #424]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800666c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006674:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800667c:	4965      	ldr	r1, [pc, #404]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800669a:	460b      	mov	r3, r1
 800669c:	4313      	orrs	r3, r2
 800669e:	d00c      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80066a0:	4b5c      	ldr	r3, [pc, #368]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066a6:	f023 0218 	bic.w	r2, r3, #24
 80066aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066b2:	4958      	ldr	r1, [pc, #352]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80066ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d032      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80066d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	4a4a      	ldr	r2, [pc, #296]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ee:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80066f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066fc:	d108      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006702:	3308      	adds	r3, #8
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fe4b 	bl	80083a0 <RCCEx_PLL2_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006710:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10d      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006718:	4b3e      	ldr	r3, [pc, #248]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800671a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800671e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800672a:	493a      	ldr	r1, [pc, #232]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006732:	e003      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006738:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800673c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	d03a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800675c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006764:	d00e      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800676a:	d815      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006774:	d110      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006776:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	4a26      	ldr	r2, [pc, #152]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800677c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006780:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006782:	e00e      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006788:	3308      	adds	r3, #8
 800678a:	4618      	mov	r0, r3
 800678c:	f001 fe08 	bl	80083a0 <RCCEx_PLL2_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006796:	e004      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80067a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80067aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80067b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067bc:	4915      	ldr	r1, [pc, #84]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067ca:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80067ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	2300      	movs	r3, #0
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d00c      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80067ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067f0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80067f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067fc:	4905      	ldr	r1, [pc, #20]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006804:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006808:	4618      	mov	r0, r3
 800680a:	37e0      	adds	r7, #224	@ 0xe0
 800680c:	46bd      	mov	sp, r7
 800680e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006812:	bf00      	nop
 8006814:	46020c00 	.word	0x46020c00

08006818 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006818:	b480      	push	{r7}
 800681a:	b089      	sub	sp, #36	@ 0x24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006820:	4ba6      	ldr	r3, [pc, #664]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006828:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800682a:	4ba4      	ldr	r3, [pc, #656]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006834:	4ba1      	ldr	r3, [pc, #644]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	3301      	adds	r3, #1
 8006840:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006842:	4b9e      	ldr	r3, [pc, #632]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	091b      	lsrs	r3, r3, #4
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800684e:	4b9b      	ldr	r3, [pc, #620]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	08db      	lsrs	r3, r3, #3
 8006854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	fb02 f303 	mul.w	r3, r2, r3
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006866:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d062      	beq.n	8006936 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b03      	cmp	r3, #3
 8006874:	f200 8081 	bhi.w	800697a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d024      	beq.n	80068c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d17a      	bne.n	800697a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006896:	4b89      	ldr	r3, [pc, #548]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068c6:	e08f      	b.n	80069e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80068c8:	4b7c      	ldr	r3, [pc, #496]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80068d4:	4b79      	ldr	r3, [pc, #484]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	0f1b      	lsrs	r3, r3, #28
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	e006      	b.n	80068ee <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80068e0:	4b76      	ldr	r3, [pc, #472]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068e6:	041b      	lsls	r3, r3, #16
 80068e8:	0f1b      	lsrs	r3, r3, #28
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	4a76      	ldr	r2, [pc, #472]	@ (8006ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80068f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f4:	ee07 3a90 	vmov	s15, r3
 80068f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	ee07 3a90 	vmov	s15, r3
 8006910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006914:	ed97 6a02 	vldr	s12, [r7, #8]
 8006918:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800691c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006928:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800692c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006930:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006934:	e058      	b.n	80069e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006940:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006948:	4b5c      	ldr	r3, [pc, #368]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800694a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006958:	ed97 6a02 	vldr	s12, [r7, #8]
 800695c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006960:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006964:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006968:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800696c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006974:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006978:	e036      	b.n	80069e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800697a:	4b50      	ldr	r3, [pc, #320]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006986:	4b4d      	ldr	r3, [pc, #308]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	0f1b      	lsrs	r3, r3, #28
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	e006      	b.n	80069a0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006992:	4b4a      	ldr	r3, [pc, #296]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	0f1b      	lsrs	r3, r3, #28
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	4a49      	ldr	r2, [pc, #292]	@ (8006ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80069a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80069ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80069de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80069e8:	4b34      	ldr	r3, [pc, #208]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d017      	beq.n	8006a24 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80069f4:	4b31      	ldr	r3, [pc, #196]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80069f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f8:	0a5b      	lsrs	r3, r3, #9
 80069fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a1a:	ee17 2a90 	vmov	r2, s15
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006a2a:	4b24      	ldr	r3, [pc, #144]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d017      	beq.n	8006a66 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a36:	4b21      	ldr	r3, [pc, #132]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3a:	0c1b      	lsrs	r3, r3, #16
 8006a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a5c:	ee17 2a90 	vmov	r2, s15
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	605a      	str	r2, [r3, #4]
 8006a64:	e002      	b.n	8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006a6c:	4b13      	ldr	r3, [pc, #76]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d017      	beq.n	8006aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a78:	4b10      	ldr	r3, [pc, #64]	@ (8006abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7c:	0e1b      	lsrs	r3, r3, #24
 8006a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9e:	ee17 2a90 	vmov	r2, s15
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006aa6:	e002      	b.n	8006aae <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	609a      	str	r2, [r3, #8]
}
 8006aae:	bf00      	nop
 8006ab0:	3724      	adds	r7, #36	@ 0x24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	46020c00 	.word	0x46020c00
 8006ac0:	4b742400 	.word	0x4b742400
 8006ac4:	46000000 	.word	0x46000000
 8006ac8:	0800aa48 	.word	0x0800aa48

08006acc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b089      	sub	sp, #36	@ 0x24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006ad4:	4ba6      	ldr	r3, [pc, #664]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006adc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006ade:	4ba4      	ldr	r3, [pc, #656]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006ae8:	4ba1      	ldr	r3, [pc, #644]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	3301      	adds	r3, #1
 8006af4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006af6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	091b      	lsrs	r3, r3, #4
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006b02:	4b9b      	ldr	r3, [pc, #620]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	08db      	lsrs	r3, r3, #3
 8006b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	fb02 f303 	mul.w	r3, r2, r3
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d062      	beq.n	8006bea <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	f200 8081 	bhi.w	8006c2e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d024      	beq.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d17a      	bne.n	8006c2e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b42:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4a:	4b89      	ldr	r3, [pc, #548]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b5e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b7a:	e08f      	b.n	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006b88:	4b79      	ldr	r3, [pc, #484]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	0f1b      	lsrs	r3, r3, #28
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	e006      	b.n	8006ba2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006b94:	4b76      	ldr	r3, [pc, #472]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	0f1b      	lsrs	r3, r3, #28
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	4a76      	ldr	r2, [pc, #472]	@ (8006d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bcc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006be8:	e058      	b.n	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c10:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c2c:	e036      	b.n	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006c2e:	4b50      	ldr	r3, [pc, #320]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	e006      	b.n	8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006c46:	4b4a      	ldr	r3, [pc, #296]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	0f1b      	lsrs	r3, r3, #28
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	4a49      	ldr	r2, [pc, #292]	@ (8006d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c7e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c9a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006c9c:	4b34      	ldr	r3, [pc, #208]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d017      	beq.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ca8:	4b31      	ldr	r3, [pc, #196]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cac:	0a5b      	lsrs	r3, r3, #9
 8006cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cce:	ee17 2a90 	vmov	r2, s15
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	e002      	b.n	8006cde <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006cde:	4b24      	ldr	r3, [pc, #144]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d017      	beq.n	8006d1a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006cea:	4b21      	ldr	r3, [pc, #132]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	0c1b      	lsrs	r3, r3, #16
 8006cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf4:	ee07 3a90 	vmov	s15, r3
 8006cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d00:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d10:	ee17 2a90 	vmov	r2, s15
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006d20:	4b13      	ldr	r3, [pc, #76]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d017      	beq.n	8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d2c:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d30:	0e1b      	lsrs	r3, r3, #24
 8006d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d42:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d52:	ee17 2a90 	vmov	r2, s15
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d5a:	e002      	b.n	8006d62 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	609a      	str	r2, [r3, #8]
}
 8006d62:	bf00      	nop
 8006d64:	3724      	adds	r7, #36	@ 0x24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	46020c00 	.word	0x46020c00
 8006d74:	4b742400 	.word	0x4b742400
 8006d78:	46000000 	.word	0x46000000
 8006d7c:	0800aa48 	.word	0x0800aa48

08006d80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	@ 0x24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006d88:	4ba6      	ldr	r3, [pc, #664]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006d92:	4ba4      	ldr	r3, [pc, #656]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006d9c:	4ba1      	ldr	r3, [pc, #644]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da0:	0a1b      	lsrs	r3, r3, #8
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	3301      	adds	r3, #1
 8006da8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006daa:	4b9e      	ldr	r3, [pc, #632]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006db6:	4b9b      	ldr	r3, [pc, #620]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d062      	beq.n	8006e9e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	f200 8081 	bhi.w	8006ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d024      	beq.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d17a      	bne.n	8006ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b89      	ldr	r3, [pc, #548]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e12:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800702c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006e2e:	e08f      	b.n	8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006e30:	4b7c      	ldr	r3, [pc, #496]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006e3c:	4b79      	ldr	r3, [pc, #484]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	0f1b      	lsrs	r3, r3, #28
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	e006      	b.n	8006e56 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006e48:	4b76      	ldr	r3, [pc, #472]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	0f1b      	lsrs	r3, r3, #28
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	4a76      	ldr	r2, [pc, #472]	@ (8007030 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e80:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800702c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e9c:	e058      	b.n	8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ec0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ec4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800702c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006edc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee0:	e036      	b.n	8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006ee2:	4b50      	ldr	r3, [pc, #320]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006eee:	4b4d      	ldr	r3, [pc, #308]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	0f1b      	lsrs	r3, r3, #28
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	e006      	b.n	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006efa:	4b4a      	ldr	r3, [pc, #296]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	0f1b      	lsrs	r3, r3, #28
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	4a49      	ldr	r2, [pc, #292]	@ (8007030 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	ee07 3a90 	vmov	s15, r3
 8006f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f32:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800702c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f4e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006f50:	4b34      	ldr	r3, [pc, #208]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f5c:	4b31      	ldr	r3, [pc, #196]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f60:	0a5b      	lsrs	r3, r3, #9
 8006f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f82:	ee17 2a90 	vmov	r2, s15
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e002      	b.n	8006f92 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006f92:	4b24      	ldr	r3, [pc, #144]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d017      	beq.n	8006fce <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f9e:	4b21      	ldr	r3, [pc, #132]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa8:	ee07 3a90 	vmov	s15, r3
 8006fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006fb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc4:	ee17 2a90 	vmov	r2, s15
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	605a      	str	r2, [r3, #4]
 8006fcc:	e002      	b.n	8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006fd4:	4b13      	ldr	r3, [pc, #76]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d017      	beq.n	8007010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006fe0:	4b10      	ldr	r3, [pc, #64]	@ (8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe4:	0e1b      	lsrs	r3, r3, #24
 8006fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007006:	ee17 2a90 	vmov	r2, s15
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800700e:	e002      	b.n	8007016 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	609a      	str	r2, [r3, #8]
}
 8007016:	bf00      	nop
 8007018:	3724      	adds	r7, #36	@ 0x24
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	46020c00 	.word	0x46020c00
 8007028:	4b742400 	.word	0x4b742400
 800702c:	46000000 	.word	0x46000000
 8007030:	0800aa48 	.word	0x0800aa48

08007034 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08e      	sub	sp, #56	@ 0x38
 8007038:	af00      	add	r7, sp, #0
 800703a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800703e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007042:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007046:	430b      	orrs	r3, r1
 8007048:	d145      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800704a:	4baa      	ldr	r3, [pc, #680]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800704c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007054:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007056:	4ba7      	ldr	r3, [pc, #668]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b02      	cmp	r3, #2
 8007062:	d108      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706a:	d104      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800706c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007070:	637b      	str	r3, [r7, #52]	@ 0x34
 8007072:	f001 b987 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007076:	4b9f      	ldr	r3, [pc, #636]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800707c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007084:	d114      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800708c:	d110      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800708e:	4b99      	ldr	r3, [pc, #612]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800709c:	d103      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800709e:	23fa      	movs	r3, #250	@ 0xfa
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070a2:	f001 b96f 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80070a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070ac:	f001 b96a 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80070b0:	4b90      	ldr	r3, [pc, #576]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070bc:	d107      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80070be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070c4:	d103      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80070c6:	4b8c      	ldr	r3, [pc, #560]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ca:	f001 b95b 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d2:	f001 b957 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070da:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80070de:	430b      	orrs	r3, r1
 80070e0:	d151      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80070e2:	4b84      	ldr	r3, [pc, #528]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80070e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070e8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80070ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	2b80      	cmp	r3, #128	@ 0x80
 80070f2:	d035      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	2b80      	cmp	r3, #128	@ 0x80
 80070f8:	d841      	bhi.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	2b60      	cmp	r3, #96	@ 0x60
 80070fe:	d02a      	beq.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	2b60      	cmp	r3, #96	@ 0x60
 8007104:	d83b      	bhi.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	2b40      	cmp	r3, #64	@ 0x40
 800710a:	d009      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	2b40      	cmp	r3, #64	@ 0x40
 8007110:	d835      	bhi.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00c      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	2b20      	cmp	r3, #32
 800711c:	d012      	beq.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800711e:	e02e      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fb77 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800712e:	f001 b929 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007132:	f107 0318 	add.w	r3, r7, #24
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff fcc8 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007140:	f001 b920 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007144:	f107 030c 	add.w	r3, r7, #12
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fe19 	bl	8006d80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007152:	f001 b917 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007156:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800715c:	f001 b912 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007160:	4b64      	ldr	r3, [pc, #400]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716c:	d103      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800716e:	4b63      	ldr	r3, [pc, #396]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007172:	f001 b907 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800717a:	f001 b903 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007182:	f001 b8ff 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800718e:	430b      	orrs	r3, r1
 8007190:	d158      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007192:	4b58      	ldr	r3, [pc, #352]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007198:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800719c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a4:	d03b      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ac:	d846      	bhi.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071b4:	d02e      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071bc:	d83e      	bhi.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c4:	d00b      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071cc:	d836      	bhi.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00d      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071da:	d012      	beq.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80071dc:	e02e      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fb18 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ec:	f001 b8ca 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f0:	f107 0318 	add.w	r3, r7, #24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fc69 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071fe:	f001 b8c1 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007202:	f107 030c 	add.w	r3, r7, #12
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff fdba 	bl	8006d80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007210:	f001 b8b8 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007214:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007218:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800721a:	f001 b8b3 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800721e:	4b35      	ldr	r3, [pc, #212]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800722a:	d103      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800722c:	4b33      	ldr	r3, [pc, #204]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007230:	f001 b8a8 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007238:	f001 b8a4 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007240:	f001 b8a0 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007248:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800724c:	430b      	orrs	r3, r1
 800724e:	d16e      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007250:	4b28      	ldr	r3, [pc, #160]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007256:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800725a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007262:	d034      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800726a:	d85c      	bhi.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007272:	d00b      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800727a:	d854      	bhi.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007288:	d009      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800728a:	e04c      	b.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800728c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fac1 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800729a:	f001 b873 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800729e:	f107 0318 	add.w	r3, r7, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fc12 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ac:	f001 b86a 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80072b0:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072bc:	d103      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80072be:	4b10      	ldr	r3, [pc, #64]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072c2:	f001 b85f 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ca:	f001 b85b 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072ce:	4b09      	ldr	r3, [pc, #36]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d121      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072da:	4b06      	ldr	r3, [pc, #24]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80072e6:	4b03      	ldr	r3, [pc, #12]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	0e1b      	lsrs	r3, r3, #24
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	e00f      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80072f2:	bf00      	nop
 80072f4:	46020c00 	.word	0x46020c00
 80072f8:	0007a120 	.word	0x0007a120
 80072fc:	00f42400 	.word	0x00f42400
 8007300:	02dc6c00 	.word	0x02dc6c00
 8007304:	4ba7      	ldr	r3, [pc, #668]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800730a:	041b      	lsls	r3, r3, #16
 800730c:	0e1b      	lsrs	r3, r3, #24
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	4aa5      	ldr	r2, [pc, #660]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800731a:	f001 b833 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007322:	f001 b82f 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800732a:	f001 b82b 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800732e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007332:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007336:	430b      	orrs	r3, r1
 8007338:	d17f      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800733a:	4b9a      	ldr	r3, [pc, #616]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800733c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	2b00      	cmp	r3, #0
 800734a:	d165      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800734c:	4b95      	ldr	r3, [pc, #596]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800734e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007352:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800735e:	d034      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007366:	d853      	bhi.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800736e:	d00b      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007376:	d84b      	bhi.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737a:	2b00      	cmp	r3, #0
 800737c:	d016      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007384:	d009      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007386:	e043      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fa43 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007396:	f000 bff5 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739a:	f107 0318 	add.w	r3, r7, #24
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff fb94 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80073a8:	f000 bfec 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80073ac:	4b7d      	ldr	r3, [pc, #500]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b8:	d103      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80073ba:	4b7c      	ldr	r3, [pc, #496]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80073bc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80073be:	f000 bfe1 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80073c6:	f000 bfdd 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073ca:	4b76      	ldr	r3, [pc, #472]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d118      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073d6:	4b73      	ldr	r3, [pc, #460]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80073e2:	4b70      	ldr	r3, [pc, #448]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	0e1b      	lsrs	r3, r3, #24
 80073e8:	f003 030f 	and.w	r3, r3, #15
 80073ec:	e006      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80073ee:	4b6d      	ldr	r3, [pc, #436]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	0e1b      	lsrs	r3, r3, #24
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	4a6a      	ldr	r2, [pc, #424]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80073fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007402:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007404:	f000 bfbe 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800740c:	f000 bfba 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007414:	f000 bfb6 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800741e:	d108      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff f9f7 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
 800742e:	f000 bfa9 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
 8007436:	f000 bfa5 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800743a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743e:	1e51      	subs	r1, r2, #1
 8007440:	430b      	orrs	r3, r1
 8007442:	d136      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007444:	4b57      	ldr	r3, [pc, #348]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007456:	f7fe fb8d 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 800745a:	6378      	str	r0, [r7, #52]	@ 0x34
 800745c:	f000 bf92 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	2b01      	cmp	r3, #1
 8007464:	d104      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007466:	f7fe fa55 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 800746a:	6378      	str	r0, [r7, #52]	@ 0x34
 800746c:	f000 bf8a 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007470:	4b4c      	ldr	r3, [pc, #304]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800747c:	d106      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	2b02      	cmp	r3, #2
 8007482:	d103      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007484:	4b4a      	ldr	r3, [pc, #296]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
 8007488:	f000 bf7c 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800748c:	4b45      	ldr	r3, [pc, #276]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800748e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b02      	cmp	r3, #2
 8007498:	d107      	bne.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	2b03      	cmp	r3, #3
 800749e:	d104      	bne.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80074a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a6:	f000 bf6d 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ae:	f000 bf69 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80074b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b6:	1e91      	subs	r1, r2, #2
 80074b8:	430b      	orrs	r3, r1
 80074ba:	d136      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80074bc:	4b39      	ldr	r3, [pc, #228]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80074be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074c2:	f003 030c 	and.w	r3, r3, #12
 80074c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80074ce:	f7fe fb3d 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 80074d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80074d4:	f000 bf56 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d104      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074de:	f7fe fa19 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80074e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80074e4:	f000 bf4e 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80074e8:	4b2e      	ldr	r3, [pc, #184]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f4:	d106      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d103      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80074fc:	4b2c      	ldr	r3, [pc, #176]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80074fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007500:	f000 bf40 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007504:	4b27      	ldr	r3, [pc, #156]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d107      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	2b0c      	cmp	r3, #12
 8007516:	d104      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007518:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
 800751e:	f000 bf31 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
 8007526:	f000 bf2d 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800752a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800752e:	1f11      	subs	r1, r2, #4
 8007530:	430b      	orrs	r3, r1
 8007532:	d13f      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007534:	4b1b      	ldr	r3, [pc, #108]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800753a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800753e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007546:	f7fe fb01 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 800754a:	6378      	str	r0, [r7, #52]	@ 0x34
 800754c:	f000 bf1a 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	2b10      	cmp	r3, #16
 8007554:	d104      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007556:	f7fe f9dd 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 800755a:	6378      	str	r0, [r7, #52]	@ 0x34
 800755c:	f000 bf12 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007560:	4b10      	ldr	r3, [pc, #64]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756c:	d106      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	2b20      	cmp	r3, #32
 8007572:	d103      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007574:	4b0e      	ldr	r3, [pc, #56]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
 8007578:	f000 bf04 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800757c:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800757e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b02      	cmp	r3, #2
 8007588:	d107      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2b30      	cmp	r3, #48	@ 0x30
 800758e:	d104      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
 8007596:	f000 bef5 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
 800759e:	f000 bef1 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80075a2:	bf00      	nop
 80075a4:	46020c00 	.word	0x46020c00
 80075a8:	0800aa48 	.word	0x0800aa48
 80075ac:	02dc6c00 	.word	0x02dc6c00
 80075b0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80075b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b8:	f1a2 0108 	sub.w	r1, r2, #8
 80075bc:	430b      	orrs	r3, r1
 80075be:	d136      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80075c0:	4ba4      	ldr	r3, [pc, #656]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80075c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075d2:	f7fe fabb 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 80075d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80075d8:	f000 bed4 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80075dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075de:	2b40      	cmp	r3, #64	@ 0x40
 80075e0:	d104      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075e2:	f7fe f997 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80075e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80075e8:	f000 becc 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80075ec:	4b99      	ldr	r3, [pc, #612]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f8:	d106      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	2b80      	cmp	r3, #128	@ 0x80
 80075fe:	d103      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007600:	4b95      	ldr	r3, [pc, #596]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
 8007604:	f000 bebe 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007608:	4b92      	ldr	r3, [pc, #584]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800760a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b02      	cmp	r3, #2
 8007614:	d107      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	2bc0      	cmp	r3, #192	@ 0xc0
 800761a:	d104      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 800761c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
 8007622:	f000 beaf 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	637b      	str	r3, [r7, #52]	@ 0x34
 800762a:	f000 beab 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800762e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007632:	f1a2 0110 	sub.w	r1, r2, #16
 8007636:	430b      	orrs	r3, r1
 8007638:	d139      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800763a:	4b86      	ldr	r3, [pc, #536]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800763c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007644:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fe fa7e 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8007650:	6378      	str	r0, [r7, #52]	@ 0x34
 8007652:	f000 be97 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765c:	d104      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800765e:	f7fe f959 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007662:	6378      	str	r0, [r7, #52]	@ 0x34
 8007664:	f000 be8e 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007668:	4b7a      	ldr	r3, [pc, #488]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007674:	d107      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800767c:	d103      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800767e:	4b76      	ldr	r3, [pc, #472]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007680:	637b      	str	r3, [r7, #52]	@ 0x34
 8007682:	f000 be7f 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007686:	4b73      	ldr	r3, [pc, #460]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b02      	cmp	r3, #2
 8007692:	d108      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800769a:	d104      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800769c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a2:	f000 be6f 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076aa:	f000 be6b 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80076ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b2:	f1a2 0120 	sub.w	r1, r2, #32
 80076b6:	430b      	orrs	r3, r1
 80076b8:	d158      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80076ba:	4b66      	ldr	r3, [pc, #408]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80076bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80076cc:	f7fe fa66 	bl	8005b9c <HAL_RCC_GetPCLK3Freq>
 80076d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80076d2:	f000 be57 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d104      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076dc:	f7fe f91a 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 80076e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80076e2:	f000 be4f 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80076e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076f2:	d106      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d103      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80076fa:	4b57      	ldr	r3, [pc, #348]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076fe:	f000 be41 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007702:	4b54      	ldr	r3, [pc, #336]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b02      	cmp	r3, #2
 800770e:	d107      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	2b03      	cmp	r3, #3
 8007714:	d104      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800771a:	637b      	str	r3, [r7, #52]	@ 0x34
 800771c:	f000 be32 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007720:	4b4c      	ldr	r3, [pc, #304]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0320 	and.w	r3, r3, #32
 8007728:	2b20      	cmp	r3, #32
 800772a:	d11b      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	2b04      	cmp	r3, #4
 8007730:	d118      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007732:	4b48      	ldr	r3, [pc, #288]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800773e:	4b45      	ldr	r3, [pc, #276]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	0e1b      	lsrs	r3, r3, #24
 8007744:	f003 030f 	and.w	r3, r3, #15
 8007748:	e006      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800774a:	4b42      	ldr	r3, [pc, #264]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800774c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	0e1b      	lsrs	r3, r3, #24
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	4a40      	ldr	r2, [pc, #256]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800775a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800775e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007760:	f000 be10 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	637b      	str	r3, [r7, #52]	@ 0x34
 8007768:	f000 be0c 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800776c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007770:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007774:	430b      	orrs	r3, r1
 8007776:	d173      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007778:	4b36      	ldr	r3, [pc, #216]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800777a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800777e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007782:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800778a:	d104      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800778c:	f7fe f8c2 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007790:	6378      	str	r0, [r7, #52]	@ 0x34
 8007792:	f000 bdf7 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800779c:	d108      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800779e:	f107 0318 	add.w	r3, r7, #24
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff f992 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ac:	f000 bdea 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80077b6:	f7fe f9af 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 80077ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80077bc:	f000 bde2 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077c6:	d122      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077c8:	4b22      	ldr	r3, [pc, #136]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d118      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80077e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	0e1b      	lsrs	r3, r3, #24
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	e006      	b.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80077ec:	4b19      	ldr	r3, [pc, #100]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077f2:	041b      	lsls	r3, r3, #16
 80077f4:	0e1b      	lsrs	r3, r3, #24
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	4a18      	ldr	r2, [pc, #96]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80077fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007800:	637b      	str	r3, [r7, #52]	@ 0x34
 8007802:	f000 bdbf 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
 800780a:	f000 bdbb 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800780e:	4b11      	ldr	r3, [pc, #68]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800781a:	d107      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007822:	d103      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007824:	4b0c      	ldr	r3, [pc, #48]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007826:	637b      	str	r3, [r7, #52]	@ 0x34
 8007828:	f000 bdac 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800782c:	4b09      	ldr	r3, [pc, #36]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007838:	d107      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007840:	d103      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007842:	4b05      	ldr	r3, [pc, #20]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
 8007846:	f000 bd9d 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
 800784e:	f000 bd99 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007852:	bf00      	nop
 8007854:	46020c00 	.word	0x46020c00
 8007858:	00f42400 	.word	0x00f42400
 800785c:	0800aa48 	.word	0x0800aa48
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007864:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007868:	430b      	orrs	r3, r1
 800786a:	d158      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800786c:	4bad      	ldr	r3, [pc, #692]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800786e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	2b04      	cmp	r3, #4
 800787c:	d84b      	bhi.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078bd 	.word	0x080078bd
 8007888:	08007899 	.word	0x08007899
 800788c:	080078ab 	.word	0x080078ab
 8007890:	080078c7 	.word	0x080078c7
 8007894:	080078d1 	.word	0x080078d1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe ffbb 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078a6:	f000 bd6d 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078aa:	f107 030c 	add.w	r3, r7, #12
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fa66 	bl	8006d80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078b8:	f000 bd64 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80078bc:	f7fe f92c 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 80078c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80078c2:	f000 bd5f 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80078c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078cc:	f000 bd5a 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80078d0:	4b94      	ldr	r3, [pc, #592]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d118      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078dc:	4b91      	ldr	r3, [pc, #580]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80078e8:	4b8e      	ldr	r3, [pc, #568]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	0e1b      	lsrs	r3, r3, #24
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	e006      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80078f4:	4b8b      	ldr	r3, [pc, #556]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80078f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078fa:	041b      	lsls	r3, r3, #16
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	4a89      	ldr	r2, [pc, #548]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007908:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800790a:	f000 bd3b 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007912:	f000 bd37 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800791a:	f000 bd33 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800791e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007922:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007926:	430b      	orrs	r3, r1
 8007928:	d167      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800792a:	4b7e      	ldr	r3, [pc, #504]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800792c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007930:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007934:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800793c:	d036      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007944:	d855      	bhi.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800794c:	d029      	beq.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007954:	d84d      	bhi.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800795c:	d013      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007964:	d845      	bhi.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	d015      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007972:	d13e      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe ff4d 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800797e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007982:	f000 bcff 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff f9f8 	bl	8006d80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007994:	f000 bcf6 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007998:	f7fe f8be 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 800799c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800799e:	f000 bcf1 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079a8:	f000 bcec 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80079ac:	4b5d      	ldr	r3, [pc, #372]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d118      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80079c4:	4b57      	ldr	r3, [pc, #348]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	0e1b      	lsrs	r3, r3, #24
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	e006      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80079d0:	4b54      	ldr	r3, [pc, #336]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80079d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	0e1b      	lsrs	r3, r3, #24
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	4a52      	ldr	r2, [pc, #328]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80079e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079e6:	f000 bccd 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ee:	f000 bcc9 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079f6:	f000 bcc5 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80079fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079fe:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007a02:	430b      	orrs	r3, r1
 8007a04:	d14c      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007a06:	4b47      	ldr	r3, [pc, #284]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a18:	f7fe f898 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8007a1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a1e:	f000 bcb1 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a28:	d104      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a2a:	f7fd ff73 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007a2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a30:	f000 bca8 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007a34:	4b3b      	ldr	r3, [pc, #236]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a40:	d107      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a48:	d103      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8007a4a:	4b38      	ldr	r3, [pc, #224]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4e:	f000 bc99 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007a52:	4b34      	ldr	r3, [pc, #208]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d11c      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a64:	d118      	bne.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a66:	4b2f      	ldr	r3, [pc, #188]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007a72:	4b2c      	ldr	r3, [pc, #176]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	0e1b      	lsrs	r3, r3, #24
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	e006      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007a7e:	4b29      	ldr	r3, [pc, #164]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007a80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a84:	041b      	lsls	r3, r3, #16
 8007a86:	0e1b      	lsrs	r3, r3, #24
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	4a26      	ldr	r2, [pc, #152]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a94:	f000 bc76 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9c:	f000 bc72 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	d152      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007aac:	4b1d      	ldr	r3, [pc, #116]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ab2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007abe:	f7fe f845 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8007ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ac4:	f000 bc5e 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ace:	d104      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ad0:	f7fd ff20 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007ad4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ad6:	f000 bc55 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007ada:	4b12      	ldr	r3, [pc, #72]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae6:	d107      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aee:	d103      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8007af0:	4b0e      	ldr	r3, [pc, #56]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af4:	f000 bc46 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007af8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	d122      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b0a:	d11e      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b0c:	4b05      	ldr	r3, [pc, #20]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007b18:	4b02      	ldr	r3, [pc, #8]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	0e1b      	lsrs	r3, r3, #24
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	e00c      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007b24:	46020c00 	.word	0x46020c00
 8007b28:	0800aa48 	.word	0x0800aa48
 8007b2c:	00f42400 	.word	0x00f42400
 8007b30:	4ba1      	ldr	r3, [pc, #644]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	0e1b      	lsrs	r3, r3, #24
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	4a9f      	ldr	r2, [pc, #636]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b46:	f000 bc1d 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4e:	f000 bc19 	b.w	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b56:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	d151      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007b5e:	4b96      	ldr	r3, [pc, #600]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b64:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b6e:	d024      	beq.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b74:	d842      	bhi.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	2b80      	cmp	r3, #128	@ 0x80
 8007b7a:	d00d      	beq.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	2b80      	cmp	r3, #128	@ 0x80
 8007b80:	d83c      	bhi.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	2b40      	cmp	r3, #64	@ 0x40
 8007b8c:	d011      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8007b8e:	e035      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007b90:	f7fe f804 	bl	8005b9c <HAL_RCC_GetPCLK3Freq>
 8007b94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b96:	e3f5      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b98:	4b87      	ldr	r3, [pc, #540]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ba4:	d102      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007ba6:	4b86      	ldr	r3, [pc, #536]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007baa:	e3eb      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bb0:	e3e8      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007bb2:	f7fd feaf 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007bb6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bb8:	e3e4      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bba:	4b7f      	ldr	r3, [pc, #508]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d117      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8007bd2:	4b79      	ldr	r3, [pc, #484]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	0e1b      	lsrs	r3, r3, #24
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	e006      	b.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8007bde:	4b76      	ldr	r3, [pc, #472]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	4a73      	ldr	r2, [pc, #460]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bf4:	e3c6      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bfa:	e3c3      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c00:	e3c0      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c06:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	d147      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c20:	f7fd ff94 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8007c24:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c26:	e3ad      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c2e:	d103      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c30:	f7fd fe70 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007c34:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c36:	e3a5      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007c38:	4b5f      	ldr	r3, [pc, #380]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c44:	d106      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8007c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c52:	e397      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007c54:	4b58      	ldr	r3, [pc, #352]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d11b      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c66:	d117      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c68:	4b53      	ldr	r3, [pc, #332]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007c74:	4b50      	ldr	r3, [pc, #320]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	0e1b      	lsrs	r3, r3, #24
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	e006      	b.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007c80:	4b4d      	ldr	r3, [pc, #308]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	0e1b      	lsrs	r3, r3, #24
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	4a4b      	ldr	r2, [pc, #300]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c96:	e375      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9c:	e372      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	d164      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007caa:	4b43      	ldr	r3, [pc, #268]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cb4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d120      	bne.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d117      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007cd4:	4b38      	ldr	r3, [pc, #224]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	0e1b      	lsrs	r3, r3, #24
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	e006      	b.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8007ce0:	4b35      	ldr	r3, [pc, #212]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ce2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ce6:	041b      	lsls	r3, r3, #16
 8007ce8:	0e1b      	lsrs	r3, r3, #24
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	4a33      	ldr	r2, [pc, #204]	@ (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf6:	e345      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cfc:	e342      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d0c:	d112      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d14:	d10e      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d16:	4b28      	ldr	r3, [pc, #160]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d24:	d102      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007d26:	23fa      	movs	r3, #250	@ 0xfa
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d2a:	e32b      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007d2c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d32:	e327      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007d34:	4b20      	ldr	r3, [pc, #128]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d40:	d106      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d48:	d102      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4e:	e319      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007d50:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d64:	d103      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6c:	e30a      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d72:	e307      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d78:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	d16b      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007d80:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d86:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d127      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d92:	4b09      	ldr	r3, [pc, #36]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d11e      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d9e:	4b06      	ldr	r3, [pc, #24]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8007daa:	4b03      	ldr	r3, [pc, #12]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	0e1b      	lsrs	r3, r3, #24
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	e00d      	b.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007db6:	bf00      	nop
 8007db8:	46020c00 	.word	0x46020c00
 8007dbc:	0800aa48 	.word	0x0800aa48
 8007dc0:	00f42400 	.word	0x00f42400
 8007dc4:	4b94      	ldr	r3, [pc, #592]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	0e1b      	lsrs	r3, r3, #24
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	4a92      	ldr	r2, [pc, #584]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dda:	e2d3      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de0:	e2d0      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007de2:	4b8d      	ldr	r3, [pc, #564]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007df0:	d112      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df8:	d10e      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dfa:	4b87      	ldr	r3, [pc, #540]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8007e0a:	23fa      	movs	r3, #250	@ 0xfa
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e0e:	e2b9      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007e10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e16:	e2b5      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007e18:	4b7f      	ldr	r3, [pc, #508]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e24:	d106      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e2c:	d102      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8007e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e32:	e2a7      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007e34:	4b78      	ldr	r3, [pc, #480]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d107      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8007e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e48:	d103      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8007e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e50:	e298      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e56:	e295      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007e60:	430b      	orrs	r3, r1
 8007e62:	d147      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007e64:	4b6c      	ldr	r3, [pc, #432]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e6a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007e6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d103      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e76:	f7fd fe69 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8007e7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e7c:	e282      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007e7e:	4b66      	ldr	r3, [pc, #408]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e8c:	d112      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e94:	d10e      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e96:	4b60      	ldr	r3, [pc, #384]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ea4:	d102      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8007ea6:	23fa      	movs	r3, #250	@ 0xfa
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eaa:	e26b      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007eac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eb2:	e267      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007eb4:	4b58      	ldr	r3, [pc, #352]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ec0:	d106      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ec8:	d102      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8007eca:	4b55      	ldr	r3, [pc, #340]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ece:	e259      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007ed0:	4b51      	ldr	r3, [pc, #324]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007ed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d107      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007ee4:	d103      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8007ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eec:	e24a      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef2:	e247      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007efc:	430b      	orrs	r3, r1
 8007efe:	d12d      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007f00:	4b45      	ldr	r3, [pc, #276]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f06:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007f0a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007f0c:	4b42      	ldr	r3, [pc, #264]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f18:	d105      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8007f20:	4b3f      	ldr	r3, [pc, #252]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f24:	e22e      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f2c:	d107      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fc70 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3c:	e222      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f44:	d107      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fdbe 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f54:	e216      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5a:	e213      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f60:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007f64:	430b      	orrs	r3, r1
 8007f66:	d15d      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007f68:	4b2b      	ldr	r3, [pc, #172]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f6e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007f72:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f7a:	d028      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f82:	d845      	bhi.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f8a:	d013      	beq.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f92:	d83d      	bhi.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fa0:	d004      	beq.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8007fa2:	e035      	b.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007fa4:	f7fd fde6 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8007fa8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007faa:	e1eb      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007fac:	f7fd fcb2 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8007fb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fb2:	e1e7      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fb4:	4b18      	ldr	r3, [pc, #96]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc0:	d102      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8007fc2:	4b17      	ldr	r3, [pc, #92]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007fc6:	e1dd      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fcc:	e1da      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007fce:	4b12      	ldr	r3, [pc, #72]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d117      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fda:	4b0f      	ldr	r3, [pc, #60]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	0e1b      	lsrs	r3, r3, #24
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	e006      	b.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8007ff2:	4b09      	ldr	r3, [pc, #36]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	0e1b      	lsrs	r3, r3, #24
 8007ffc:	f003 030f 	and.w	r3, r3, #15
 8008000:	4a06      	ldr	r2, [pc, #24]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008006:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008008:	e1bc      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800800e:	e1b9      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008014:	e1b6      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008016:	bf00      	nop
 8008018:	46020c00 	.word	0x46020c00
 800801c:	0800aa48 	.word	0x0800aa48
 8008020:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008028:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800802c:	430b      	orrs	r3, r1
 800802e:	d156      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008030:	4ba5      	ldr	r3, [pc, #660]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800803a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008042:	d028      	beq.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800804a:	d845      	bhi.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008052:	d013      	beq.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800805a:	d83d      	bhi.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008068:	d004      	beq.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800806a:	e035      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800806c:	f7fd fd6e 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8008070:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008072:	e187      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008074:	f7fd fc4e 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8008078:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800807a:	e183      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800807c:	4b92      	ldr	r3, [pc, #584]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008088:	d102      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800808a:	4b90      	ldr	r3, [pc, #576]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800808e:	e179      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008094:	e176      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008096:	4b8c      	ldr	r3, [pc, #560]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d117      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080a2:	4b89      	ldr	r3, [pc, #548]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80080ae:	4b86      	ldr	r3, [pc, #536]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	0e1b      	lsrs	r3, r3, #24
 80080b4:	f003 030f 	and.w	r3, r3, #15
 80080b8:	e006      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80080ba:	4b83      	ldr	r3, [pc, #524]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80080bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080c0:	041b      	lsls	r3, r3, #16
 80080c2:	0e1b      	lsrs	r3, r3, #24
 80080c4:	f003 030f 	and.w	r3, r3, #15
 80080c8:	4a81      	ldr	r2, [pc, #516]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80080ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080d0:	e158      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080d6:	e155      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080dc:	e152      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80080de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80080e6:	430b      	orrs	r3, r1
 80080e8:	d177      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80080ea:	4b77      	ldr	r3, [pc, #476]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80080ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080f0:	f003 0318 	and.w	r3, r3, #24
 80080f4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	2b18      	cmp	r3, #24
 80080fa:	d86b      	bhi.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80080fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008169 	.word	0x08008169
 8008108:	080081d5 	.word	0x080081d5
 800810c:	080081d5 	.word	0x080081d5
 8008110:	080081d5 	.word	0x080081d5
 8008114:	080081d5 	.word	0x080081d5
 8008118:	080081d5 	.word	0x080081d5
 800811c:	080081d5 	.word	0x080081d5
 8008120:	080081d5 	.word	0x080081d5
 8008124:	08008171 	.word	0x08008171
 8008128:	080081d5 	.word	0x080081d5
 800812c:	080081d5 	.word	0x080081d5
 8008130:	080081d5 	.word	0x080081d5
 8008134:	080081d5 	.word	0x080081d5
 8008138:	080081d5 	.word	0x080081d5
 800813c:	080081d5 	.word	0x080081d5
 8008140:	080081d5 	.word	0x080081d5
 8008144:	08008179 	.word	0x08008179
 8008148:	080081d5 	.word	0x080081d5
 800814c:	080081d5 	.word	0x080081d5
 8008150:	080081d5 	.word	0x080081d5
 8008154:	080081d5 	.word	0x080081d5
 8008158:	080081d5 	.word	0x080081d5
 800815c:	080081d5 	.word	0x080081d5
 8008160:	080081d5 	.word	0x080081d5
 8008164:	08008193 	.word	0x08008193
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008168:	f7fd fd18 	bl	8005b9c <HAL_RCC_GetPCLK3Freq>
 800816c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800816e:	e109      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008170:	f7fd fbd0 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8008174:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008176:	e105      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008178:	4b53      	ldr	r3, [pc, #332]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008184:	d102      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8008186:	4b51      	ldr	r3, [pc, #324]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008188:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800818a:	e0fb      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008190:	e0f8      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008192:	4b4d      	ldr	r3, [pc, #308]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b20      	cmp	r3, #32
 800819c:	d117      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800819e:	4b4a      	ldr	r3, [pc, #296]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80081aa:	4b47      	ldr	r3, [pc, #284]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	0e1b      	lsrs	r3, r3, #24
 80081b0:	f003 030f 	and.w	r3, r3, #15
 80081b4:	e006      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80081b6:	4b44      	ldr	r3, [pc, #272]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80081b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081bc:	041b      	lsls	r3, r3, #16
 80081be:	0e1b      	lsrs	r3, r3, #24
 80081c0:	f003 030f 	and.w	r3, r3, #15
 80081c4:	4a42      	ldr	r2, [pc, #264]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80081c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081cc:	e0da      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081d2:	e0d7      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081d8:	e0d4      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80081da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081de:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80081e2:	430b      	orrs	r3, r1
 80081e4:	d155      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80081e6:	4b38      	ldr	r3, [pc, #224]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80081e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081ec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80081f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081f8:	d013      	beq.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008200:	d844      	bhi.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008208:	d013      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800820a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008210:	d83c      	bhi.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	2b00      	cmp	r3, #0
 8008216:	d014      	beq.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800821e:	d014      	beq.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008220:	e034      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008222:	f107 0318 	add.w	r3, r7, #24
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe fc50 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008230:	e0a8      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe faee 	bl	8006818 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008240:	e0a0      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008242:	f7fd fb67 	bl	8005914 <HAL_RCC_GetSysClockFreq>
 8008246:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008248:	e09c      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800824a:	4b1f      	ldr	r3, [pc, #124]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b20      	cmp	r3, #32
 8008254:	d117      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008256:	4b1c      	ldr	r3, [pc, #112]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008262:	4b19      	ldr	r3, [pc, #100]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	0e1b      	lsrs	r3, r3, #24
 8008268:	f003 030f 	and.w	r3, r3, #15
 800826c:	e006      	b.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800826e:	4b16      	ldr	r3, [pc, #88]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008274:	041b      	lsls	r3, r3, #16
 8008276:	0e1b      	lsrs	r3, r3, #24
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	4a14      	ldr	r2, [pc, #80]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800827e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008282:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008284:	e07e      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800828a:	e07b      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008290:	e078      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008296:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800829a:	430b      	orrs	r3, r1
 800829c:	d138      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800829e:	4b0a      	ldr	r3, [pc, #40]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80082a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082a8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80082aa:	4b07      	ldr	r3, [pc, #28]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80082ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d10d      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10a      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 80082be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c4:	e05e      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80082c6:	bf00      	nop
 80082c8:	46020c00 	.word	0x46020c00
 80082cc:	00f42400 	.word	0x00f42400
 80082d0:	0800aa48 	.word	0x0800aa48
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80082d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80082d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e2:	d112      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ea:	d10e      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082ec:	4b28      	ldr	r3, [pc, #160]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80082ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082fa:	d102      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80082fc:	23fa      	movs	r3, #250	@ 0xfa
 80082fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008300:	e040      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008302:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008308:	e03c      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34
 800830e:	e039      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008314:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008318:	430b      	orrs	r3, r1
 800831a:	d131      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800831c:	4b1c      	ldr	r3, [pc, #112]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800831e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008322:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008328:	4b19      	ldr	r3, [pc, #100]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008334:	d105      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800833c:	4b15      	ldr	r3, [pc, #84]	@ (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008340:	e020      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008342:	4b13      	ldr	r3, [pc, #76]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800834a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834e:	d106      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008356:	d102      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008358:	4b0f      	ldr	r3, [pc, #60]	@ (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	e012      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800835e:	4b0c      	ldr	r3, [pc, #48]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800836a:	d106      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008372:	d102      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008374:	4b09      	ldr	r3, [pc, #36]	@ (800839c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008376:	637b      	str	r3, [r7, #52]	@ 0x34
 8008378:	e004      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
 800837e:	e001      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008386:	4618      	mov	r0, r3
 8008388:	3738      	adds	r7, #56	@ 0x38
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	46020c00 	.word	0x46020c00
 8008394:	02dc6c00 	.word	0x02dc6c00
 8008398:	016e3600 	.word	0x016e3600
 800839c:	00f42400 	.word	0x00f42400

080083a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80083a8:	4b47      	ldr	r3, [pc, #284]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a46      	ldr	r2, [pc, #280]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 80083ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083b4:	f7f9 fafc 	bl	80019b0 <HAL_GetTick>
 80083b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083ba:	e008      	b.n	80083ce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083bc:	f7f9 faf8 	bl	80019b0 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e077      	b.n	80084be <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083ce:	4b3e      	ldr	r3, [pc, #248]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80083da:	4b3b      	ldr	r3, [pc, #236]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 80083dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80083e2:	f023 0303 	bic.w	r3, r3, #3
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6811      	ldr	r1, [r2, #0]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6852      	ldr	r2, [r2, #4]
 80083ee:	3a01      	subs	r2, #1
 80083f0:	0212      	lsls	r2, r2, #8
 80083f2:	430a      	orrs	r2, r1
 80083f4:	4934      	ldr	r1, [pc, #208]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80083fa:	4b33      	ldr	r3, [pc, #204]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 80083fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083fe:	4b33      	ldr	r3, [pc, #204]	@ (80084cc <RCCEx_PLL2_Config+0x12c>)
 8008400:	4013      	ands	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6892      	ldr	r2, [r2, #8]
 8008406:	3a01      	subs	r2, #1
 8008408:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	68d2      	ldr	r2, [r2, #12]
 8008410:	3a01      	subs	r2, #1
 8008412:	0252      	lsls	r2, r2, #9
 8008414:	b292      	uxth	r2, r2
 8008416:	4311      	orrs	r1, r2
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6912      	ldr	r2, [r2, #16]
 800841c:	3a01      	subs	r2, #1
 800841e:	0412      	lsls	r2, r2, #16
 8008420:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008424:	4311      	orrs	r1, r2
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6952      	ldr	r2, [r2, #20]
 800842a:	3a01      	subs	r2, #1
 800842c:	0612      	lsls	r2, r2, #24
 800842e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008432:	430a      	orrs	r2, r1
 8008434:	4924      	ldr	r1, [pc, #144]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008436:	4313      	orrs	r3, r2
 8008438:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800843a:	4b23      	ldr	r3, [pc, #140]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 800843c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843e:	f023 020c 	bic.w	r2, r3, #12
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	4920      	ldr	r1, [pc, #128]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008448:	4313      	orrs	r3, r2
 800844a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800844c:	4b1e      	ldr	r3, [pc, #120]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 800844e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	491c      	ldr	r1, [pc, #112]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008456:	4313      	orrs	r3, r2
 8008458:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800845a:	4b1b      	ldr	r3, [pc, #108]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	4a1a      	ldr	r2, [pc, #104]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008460:	f023 0310 	bic.w	r3, r3, #16
 8008464:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008466:	4b18      	ldr	r3, [pc, #96]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800846e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	69d2      	ldr	r2, [r2, #28]
 8008476:	00d2      	lsls	r2, r2, #3
 8008478:	4913      	ldr	r1, [pc, #76]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 800847a:	4313      	orrs	r3, r2
 800847c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800847e:	4b12      	ldr	r3, [pc, #72]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	4a11      	ldr	r2, [pc, #68]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008484:	f043 0310 	orr.w	r3, r3, #16
 8008488:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800848a:	4b0f      	ldr	r3, [pc, #60]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a0e      	ldr	r2, [pc, #56]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 8008490:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008494:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008496:	f7f9 fa8b 	bl	80019b0 <HAL_GetTick>
 800849a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800849c:	e008      	b.n	80084b0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800849e:	f7f9 fa87 	bl	80019b0 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e006      	b.n	80084be <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084b0:	4b05      	ldr	r3, [pc, #20]	@ (80084c8 <RCCEx_PLL2_Config+0x128>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0f0      	beq.n	800849e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0

}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	46020c00 	.word	0x46020c00
 80084cc:	80800000 	.word	0x80800000

080084d0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80084d8:	4b47      	ldr	r3, [pc, #284]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a46      	ldr	r2, [pc, #280]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80084de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084e4:	f7f9 fa64 	bl	80019b0 <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ea:	e008      	b.n	80084fe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084ec:	f7f9 fa60 	bl	80019b0 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d901      	bls.n	80084fe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e077      	b.n	80085ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084fe:	4b3e      	ldr	r3, [pc, #248]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f0      	bne.n	80084ec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800850a:	4b3b      	ldr	r3, [pc, #236]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 800850c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008512:	f023 0303 	bic.w	r3, r3, #3
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6811      	ldr	r1, [r2, #0]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6852      	ldr	r2, [r2, #4]
 800851e:	3a01      	subs	r2, #1
 8008520:	0212      	lsls	r2, r2, #8
 8008522:	430a      	orrs	r2, r1
 8008524:	4934      	ldr	r1, [pc, #208]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 8008526:	4313      	orrs	r3, r2
 8008528:	630b      	str	r3, [r1, #48]	@ 0x30
 800852a:	4b33      	ldr	r3, [pc, #204]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 800852c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800852e:	4b33      	ldr	r3, [pc, #204]	@ (80085fc <RCCEx_PLL3_Config+0x12c>)
 8008530:	4013      	ands	r3, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6892      	ldr	r2, [r2, #8]
 8008536:	3a01      	subs	r2, #1
 8008538:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	68d2      	ldr	r2, [r2, #12]
 8008540:	3a01      	subs	r2, #1
 8008542:	0252      	lsls	r2, r2, #9
 8008544:	b292      	uxth	r2, r2
 8008546:	4311      	orrs	r1, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6912      	ldr	r2, [r2, #16]
 800854c:	3a01      	subs	r2, #1
 800854e:	0412      	lsls	r2, r2, #16
 8008550:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008554:	4311      	orrs	r1, r2
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6952      	ldr	r2, [r2, #20]
 800855a:	3a01      	subs	r2, #1
 800855c:	0612      	lsls	r2, r2, #24
 800855e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008562:	430a      	orrs	r2, r1
 8008564:	4924      	ldr	r1, [pc, #144]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 8008566:	4313      	orrs	r3, r2
 8008568:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800856a:	4b23      	ldr	r3, [pc, #140]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 800856c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856e:	f023 020c 	bic.w	r2, r3, #12
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	4920      	ldr	r1, [pc, #128]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 8008578:	4313      	orrs	r3, r2
 800857a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800857c:	4b1e      	ldr	r3, [pc, #120]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 800857e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	491c      	ldr	r1, [pc, #112]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 8008586:	4313      	orrs	r3, r2
 8008588:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800858a:	4b1b      	ldr	r3, [pc, #108]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 800858c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858e:	4a1a      	ldr	r2, [pc, #104]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 8008590:	f023 0310 	bic.w	r3, r3, #16
 8008594:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008596:	4b18      	ldr	r3, [pc, #96]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 8008598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800859a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800859e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	69d2      	ldr	r2, [r2, #28]
 80085a6:	00d2      	lsls	r2, r2, #3
 80085a8:	4913      	ldr	r1, [pc, #76]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80085ae:	4b12      	ldr	r3, [pc, #72]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b2:	4a11      	ldr	r2, [pc, #68]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80085b4:	f043 0310 	orr.w	r3, r3, #16
 80085b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80085ba:	4b0f      	ldr	r3, [pc, #60]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a0e      	ldr	r2, [pc, #56]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80085c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085c4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085c6:	f7f9 f9f3 	bl	80019b0 <HAL_GetTick>
 80085ca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085cc:	e008      	b.n	80085e0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085ce:	f7f9 f9ef 	bl	80019b0 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d901      	bls.n	80085e0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e006      	b.n	80085ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085e0:	4b05      	ldr	r3, [pc, #20]	@ (80085f8 <RCCEx_PLL3_Config+0x128>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0f0      	beq.n	80085ce <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	46020c00 	.word	0x46020c00
 80085fc:	80800000 	.word	0x80800000

08008600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e042      	b.n	8008698 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008618:	2b00      	cmp	r3, #0
 800861a:	d106      	bne.n	800862a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7f8 ffb1 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2224      	movs	r2, #36	@ 0x24
 800862e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0201 	bic.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa68 	bl	8008b20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8c3 	bl	80087dc <UART_SetConfig>
 8008656:	4603      	mov	r3, r0
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e01b      	b.n	8008698 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800866e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800867e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fae7 	bl	8008c64 <UART_CheckIdleState>
 8008696:	4603      	mov	r3, r0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08a      	sub	sp, #40	@ 0x28
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	4613      	mov	r3, r2
 80086ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	f040 808b 	bne.w	80087d2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <HAL_UART_Transmit+0x28>
 80086c2:	88fb      	ldrh	r3, [r7, #6]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e083      	b.n	80087d4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b80      	cmp	r3, #128	@ 0x80
 80086d8:	d107      	bne.n	80086ea <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086e8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2221      	movs	r2, #33	@ 0x21
 80086f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086fa:	f7f9 f959 	bl	80019b0 <HAL_GetTick>
 80086fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	88fa      	ldrh	r2, [r7, #6]
 8008704:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	88fa      	ldrh	r2, [r7, #6]
 800870c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008718:	d108      	bne.n	800872c <HAL_UART_Transmit+0x8c>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d104      	bne.n	800872c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	61bb      	str	r3, [r7, #24]
 800872a:	e003      	b.n	8008734 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008730:	2300      	movs	r3, #0
 8008732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008734:	e030      	b.n	8008798 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2200      	movs	r2, #0
 800873e:	2180      	movs	r1, #128	@ 0x80
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fb39 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e03d      	b.n	80087d4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800876c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	3302      	adds	r3, #2
 8008772:	61bb      	str	r3, [r7, #24]
 8008774:	e007      	b.n	8008786 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	3301      	adds	r3, #1
 8008784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800878c:	b29b      	uxth	r3, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1c8      	bne.n	8008736 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	2140      	movs	r1, #64	@ 0x40
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 fb02 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e006      	b.n	80087d4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e000      	b.n	80087d4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80087d2:	2302      	movs	r3, #2
  }
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3720      	adds	r7, #32
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e0:	b094      	sub	sp, #80	@ 0x50
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80087ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	4b7e      	ldr	r3, [pc, #504]	@ (80089ec <UART_SetConfig+0x210>)
 80087f2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	431a      	orrs	r2, r3
 8008804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	4313      	orrs	r3, r2
 800880a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4977      	ldr	r1, [pc, #476]	@ (80089f0 <UART_SetConfig+0x214>)
 8008814:	4019      	ands	r1, r3
 8008816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800881c:	430b      	orrs	r3, r1
 800881e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800882a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882c:	68d9      	ldr	r1, [r3, #12]
 800882e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	ea40 0301 	orr.w	r3, r0, r1
 8008836:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800883e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b6a      	ldr	r3, [pc, #424]	@ (80089ec <UART_SetConfig+0x210>)
 8008844:	429a      	cmp	r2, r3
 8008846:	d009      	beq.n	800885c <UART_SetConfig+0x80>
 8008848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	4b69      	ldr	r3, [pc, #420]	@ (80089f4 <UART_SetConfig+0x218>)
 800884e:	429a      	cmp	r2, r3
 8008850:	d004      	beq.n	800885c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008858:	4313      	orrs	r3, r2
 800885a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008866:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800886a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008870:	430b      	orrs	r3, r1
 8008872:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	f023 000f 	bic.w	r0, r3, #15
 800887e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008880:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	ea40 0301 	orr.w	r3, r0, r1
 800888a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800888c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	4b59      	ldr	r3, [pc, #356]	@ (80089f8 <UART_SetConfig+0x21c>)
 8008892:	429a      	cmp	r2, r3
 8008894:	d102      	bne.n	800889c <UART_SetConfig+0xc0>
 8008896:	2301      	movs	r3, #1
 8008898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800889a:	e029      	b.n	80088f0 <UART_SetConfig+0x114>
 800889c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	4b56      	ldr	r3, [pc, #344]	@ (80089fc <UART_SetConfig+0x220>)
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d102      	bne.n	80088ac <UART_SetConfig+0xd0>
 80088a6:	2302      	movs	r3, #2
 80088a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088aa:	e021      	b.n	80088f0 <UART_SetConfig+0x114>
 80088ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	4b53      	ldr	r3, [pc, #332]	@ (8008a00 <UART_SetConfig+0x224>)
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d102      	bne.n	80088bc <UART_SetConfig+0xe0>
 80088b6:	2304      	movs	r3, #4
 80088b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ba:	e019      	b.n	80088f0 <UART_SetConfig+0x114>
 80088bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	4b50      	ldr	r3, [pc, #320]	@ (8008a04 <UART_SetConfig+0x228>)
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d102      	bne.n	80088cc <UART_SetConfig+0xf0>
 80088c6:	2308      	movs	r3, #8
 80088c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ca:	e011      	b.n	80088f0 <UART_SetConfig+0x114>
 80088cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008a08 <UART_SetConfig+0x22c>)
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d102      	bne.n	80088dc <UART_SetConfig+0x100>
 80088d6:	2310      	movs	r3, #16
 80088d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088da:	e009      	b.n	80088f0 <UART_SetConfig+0x114>
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4b42      	ldr	r3, [pc, #264]	@ (80089ec <UART_SetConfig+0x210>)
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d102      	bne.n	80088ec <UART_SetConfig+0x110>
 80088e6:	2320      	movs	r3, #32
 80088e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ea:	e001      	b.n	80088f0 <UART_SetConfig+0x114>
 80088ec:	2300      	movs	r3, #0
 80088ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	4b3d      	ldr	r3, [pc, #244]	@ (80089ec <UART_SetConfig+0x210>)
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d005      	beq.n	8008906 <UART_SetConfig+0x12a>
 80088fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	4b3d      	ldr	r3, [pc, #244]	@ (80089f4 <UART_SetConfig+0x218>)
 8008900:	429a      	cmp	r2, r3
 8008902:	f040 8085 	bne.w	8008a10 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008908:	2200      	movs	r2, #0
 800890a:	623b      	str	r3, [r7, #32]
 800890c:	627a      	str	r2, [r7, #36]	@ 0x24
 800890e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008912:	f7fe fb8f 	bl	8007034 <HAL_RCCEx_GetPeriphCLKFreq>
 8008916:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80e8 	beq.w	8008af0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008924:	4a39      	ldr	r2, [pc, #228]	@ (8008a0c <UART_SetConfig+0x230>)
 8008926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800892a:	461a      	mov	r2, r3
 800892c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800892e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008932:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	4413      	add	r3, r2
 800893e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008940:	429a      	cmp	r2, r3
 8008942:	d305      	bcc.n	8008950 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800894a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800894c:	429a      	cmp	r2, r3
 800894e:	d903      	bls.n	8008958 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008956:	e048      	b.n	80089ea <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800895a:	2200      	movs	r2, #0
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	61fa      	str	r2, [r7, #28]
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008964:	4a29      	ldr	r2, [pc, #164]	@ (8008a0c <UART_SetConfig+0x230>)
 8008966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800896a:	b29b      	uxth	r3, r3
 800896c:	2200      	movs	r2, #0
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	617a      	str	r2, [r7, #20]
 8008972:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008976:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800897a:	f7f7 ffbb 	bl	80008f4 <__aeabi_uldivmod>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4610      	mov	r0, r2
 8008984:	4619      	mov	r1, r3
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	020b      	lsls	r3, r1, #8
 8008990:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008994:	0202      	lsls	r2, r0, #8
 8008996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008998:	6849      	ldr	r1, [r1, #4]
 800899a:	0849      	lsrs	r1, r1, #1
 800899c:	2000      	movs	r0, #0
 800899e:	460c      	mov	r4, r1
 80089a0:	4605      	mov	r5, r0
 80089a2:	eb12 0804 	adds.w	r8, r2, r4
 80089a6:	eb43 0905 	adc.w	r9, r3, r5
 80089aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	60fa      	str	r2, [r7, #12]
 80089b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	f7f7 ff9a 	bl	80008f4 <__aeabi_uldivmod>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4613      	mov	r3, r2
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ce:	d308      	bcc.n	80089e2 <UART_SetConfig+0x206>
 80089d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089d6:	d204      	bcs.n	80089e2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	e003      	b.n	80089ea <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80089e8:	e082      	b.n	8008af0 <UART_SetConfig+0x314>
 80089ea:	e081      	b.n	8008af0 <UART_SetConfig+0x314>
 80089ec:	46002400 	.word	0x46002400
 80089f0:	cfff69f3 	.word	0xcfff69f3
 80089f4:	56002400 	.word	0x56002400
 80089f8:	40013800 	.word	0x40013800
 80089fc:	40004400 	.word	0x40004400
 8008a00:	40004800 	.word	0x40004800
 8008a04:	40004c00 	.word	0x40004c00
 8008a08:	40005000 	.word	0x40005000
 8008a0c:	0800ab08 	.word	0x0800ab08
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a18:	d13c      	bne.n	8008a94 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	607a      	str	r2, [r7, #4]
 8008a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a26:	f7fe fb05 	bl	8007034 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a2a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d05e      	beq.n	8008af0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a36:	4a39      	ldr	r2, [pc, #228]	@ (8008b1c <UART_SetConfig+0x340>)
 8008a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a44:	005a      	lsls	r2, r3, #1
 8008a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	441a      	add	r2, r3
 8008a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5a:	2b0f      	cmp	r3, #15
 8008a5c:	d916      	bls.n	8008a8c <UART_SetConfig+0x2b0>
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a64:	d212      	bcs.n	8008a8c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f023 030f 	bic.w	r3, r3, #15
 8008a6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008a88:	60da      	str	r2, [r3, #12]
 8008a8a:	e031      	b.n	8008af0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008a92:	e02d      	b.n	8008af0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a96:	2200      	movs	r2, #0
 8008a98:	469a      	mov	sl, r3
 8008a9a:	4693      	mov	fp, r2
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	4659      	mov	r1, fp
 8008aa0:	f7fe fac8 	bl	8007034 <HAL_RCCEx_GetPeriphCLKFreq>
 8008aa4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d021      	beq.n	8008af0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8008b1c <UART_SetConfig+0x340>)
 8008ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8008abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	441a      	add	r2, r3
 8008ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad2:	2b0f      	cmp	r3, #15
 8008ad4:	d909      	bls.n	8008aea <UART_SetConfig+0x30e>
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008adc:	d205      	bcs.n	8008aea <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60da      	str	r2, [r3, #12]
 8008ae8:	e002      	b.n	8008af0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af2:	2201      	movs	r2, #1
 8008af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	2201      	movs	r2, #1
 8008afc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b02:	2200      	movs	r2, #0
 8008b04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	2200      	movs	r2, #0
 8008b0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3750      	adds	r7, #80	@ 0x50
 8008b14:	46bd      	mov	sp, r7
 8008b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b1a:	bf00      	nop
 8008b1c:	0800ab08 	.word	0x0800ab08

08008b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b92:	f003 0304 	and.w	r3, r3, #4
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c1e:	d10a      	bne.n	8008c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b098      	sub	sp, #96	@ 0x60
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c74:	f7f8 fe9c 	bl	80019b0 <HAL_GetTick>
 8008c78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d12f      	bne.n	8008ce8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c90:	2200      	movs	r2, #0
 8008c92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f88e 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d022      	beq.n	8008ce8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e6      	bne.n	8008ca2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e063      	b.n	8008db0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0304 	and.w	r3, r3, #4
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d149      	bne.n	8008d8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cf6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f857 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d03c      	beq.n	8008d8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e6      	bne.n	8008d10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3308      	adds	r3, #8
 8008d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d62:	61fa      	str	r2, [r7, #28]
 8008d64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	69b9      	ldr	r1, [r7, #24]
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e5      	bne.n	8008d42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e012      	b.n	8008db0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3758      	adds	r7, #88	@ 0x58
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc8:	e04f      	b.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd0:	d04b      	beq.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd2:	f7f8 fded 	bl	80019b0 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e04e      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0304 	and.w	r3, r3, #4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d037      	beq.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b80      	cmp	r3, #128	@ 0x80
 8008dfe:	d034      	beq.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2b40      	cmp	r3, #64	@ 0x40
 8008e04:	d031      	beq.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d110      	bne.n	8008e36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2208      	movs	r2, #8
 8008e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 f838 	bl	8008e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2208      	movs	r2, #8
 8008e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e029      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e44:	d111      	bne.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 f81e 	bl	8008e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e00f      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	4013      	ands	r3, r2
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	bf0c      	ite	eq
 8008e7a:	2301      	moveq	r3, #1
 8008e7c:	2300      	movne	r3, #0
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	461a      	mov	r2, r3
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d0a0      	beq.n	8008dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b095      	sub	sp, #84	@ 0x54
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008eba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ebe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e6      	bne.n	8008e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ee2:	f023 0301 	bic.w	r3, r3, #1
 8008ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e3      	bne.n	8008ecc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d118      	bne.n	8008f3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f023 0310 	bic.w	r3, r3, #16
 8008f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f2a:	61bb      	str	r3, [r7, #24]
 8008f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6979      	ldr	r1, [r7, #20]
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	613b      	str	r3, [r7, #16]
   return(result);
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e6      	bne.n	8008f0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f52:	bf00      	nop
 8008f54:	3754      	adds	r7, #84	@ 0x54
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d101      	bne.n	8008f74 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f70:	2302      	movs	r3, #2
 8008f72:	e027      	b.n	8008fc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2224      	movs	r2, #36	@ 0x24
 8008f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0201 	bic.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008fa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e02d      	b.n	8009044 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2224      	movs	r2, #36	@ 0x24
 8008ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0201 	bic.w	r2, r2, #1
 800900e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f84f 	bl	80090c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009060:	2302      	movs	r3, #2
 8009062:	e02d      	b.n	80090c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2224      	movs	r2, #36	@ 0x24
 8009070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f811 	bl	80090c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d108      	bne.n	80090ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090e8:	e031      	b.n	800914e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090ea:	2308      	movs	r3, #8
 80090ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090ee:	2308      	movs	r3, #8
 80090f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	0e5b      	lsrs	r3, r3, #25
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	0f5b      	lsrs	r3, r3, #29
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0307 	and.w	r3, r3, #7
 8009110:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	7b3a      	ldrb	r2, [r7, #12]
 8009116:	4911      	ldr	r1, [pc, #68]	@ (800915c <UARTEx_SetNbDataToProcess+0x94>)
 8009118:	5c8a      	ldrb	r2, [r1, r2]
 800911a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800911e:	7b3a      	ldrb	r2, [r7, #12]
 8009120:	490f      	ldr	r1, [pc, #60]	@ (8009160 <UARTEx_SetNbDataToProcess+0x98>)
 8009122:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009124:	fb93 f3f2 	sdiv	r3, r3, r2
 8009128:	b29a      	uxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	7b7a      	ldrb	r2, [r7, #13]
 8009134:	4909      	ldr	r1, [pc, #36]	@ (800915c <UARTEx_SetNbDataToProcess+0x94>)
 8009136:	5c8a      	ldrb	r2, [r1, r2]
 8009138:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800913c:	7b7a      	ldrb	r2, [r7, #13]
 800913e:	4908      	ldr	r1, [pc, #32]	@ (8009160 <UARTEx_SetNbDataToProcess+0x98>)
 8009140:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009142:	fb93 f3f2 	sdiv	r3, r3, r2
 8009146:	b29a      	uxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800914e:	bf00      	nop
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	0800ab20 	.word	0x0800ab20
 8009160:	0800ab28 	.word	0x0800ab28

08009164 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009164:	b480      	push	{r7}
 8009166:	b08b      	sub	sp, #44	@ 0x2c
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	fa93 f3a3 	rbit	r3, r3
 800917e:	613b      	str	r3, [r7, #16]
  return result;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800918a:	2320      	movs	r3, #32
 800918c:	e003      	b.n	8009196 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	fab3 f383 	clz	r3, r3
 8009194:	b2db      	uxtb	r3, r3
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	2103      	movs	r1, #3
 800919a:	fa01 f303 	lsl.w	r3, r1, r3
 800919e:	43db      	mvns	r3, r3
 80091a0:	401a      	ands	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	fa93 f3a3 	rbit	r3, r3
 80091ac:	61fb      	str	r3, [r7, #28]
  return result;
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80091b8:	2320      	movs	r3, #32
 80091ba:	e003      	b.n	80091c4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	fab3 f383 	clz	r3, r3
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	fa01 f303 	lsl.w	r3, r1, r3
 80091cc:	431a      	orrs	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 80091d2:	bf00      	nop
 80091d4:	372c      	adds	r7, #44	@ 0x2c
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	43db      	mvns	r3, r3
 80091f2:	401a      	ands	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	431a      	orrs	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	605a      	str	r2, [r3, #4]
}
 8009202:	bf00      	nop
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800920e:	b480      	push	{r7}
 8009210:	b08b      	sub	sp, #44	@ 0x2c
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	fa93 f3a3 	rbit	r3, r3
 8009228:	613b      	str	r3, [r7, #16]
  return result;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009234:	2320      	movs	r3, #32
 8009236:	e003      	b.n	8009240 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	fab3 f383 	clz	r3, r3
 800923e:	b2db      	uxtb	r3, r3
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	2103      	movs	r1, #3
 8009244:	fa01 f303 	lsl.w	r3, r1, r3
 8009248:	43db      	mvns	r3, r3
 800924a:	401a      	ands	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	fa93 f3a3 	rbit	r3, r3
 8009256:	61fb      	str	r3, [r7, #28]
  return result;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009262:	2320      	movs	r3, #32
 8009264:	e003      	b.n	800926e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	fab3 f383 	clz	r3, r3
 800926c:	b2db      	uxtb	r3, r3
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	fa01 f303 	lsl.w	r3, r1, r3
 8009276:	431a      	orrs	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800927c:	bf00      	nop
 800927e:	372c      	adds	r7, #44	@ 0x2c
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009288:	b480      	push	{r7}
 800928a:	b08b      	sub	sp, #44	@ 0x2c
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	fa93 f3a3 	rbit	r3, r3
 80092a2:	613b      	str	r3, [r7, #16]
  return result;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80092ae:	2320      	movs	r3, #32
 80092b0:	e003      	b.n	80092ba <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	fab3 f383 	clz	r3, r3
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	2103      	movs	r1, #3
 80092be:	fa01 f303 	lsl.w	r3, r1, r3
 80092c2:	43db      	mvns	r3, r3
 80092c4:	401a      	ands	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	fa93 f3a3 	rbit	r3, r3
 80092d0:	61fb      	str	r3, [r7, #28]
  return result;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80092dc:	2320      	movs	r3, #32
 80092de:	e003      	b.n	80092e8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	fab3 f383 	clz	r3, r3
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	fa01 f303 	lsl.w	r3, r1, r3
 80092f0:	431a      	orrs	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 80092f6:	bf00      	nop
 80092f8:	372c      	adds	r7, #44	@ 0x2c
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009302:	b480      	push	{r7}
 8009304:	b08b      	sub	sp, #44	@ 0x2c
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a1a      	ldr	r2, [r3, #32]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	fa93 f3a3 	rbit	r3, r3
 800931c:	613b      	str	r3, [r7, #16]
  return result;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009328:	2320      	movs	r3, #32
 800932a:	e003      	b.n	8009334 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	fab3 f383 	clz	r3, r3
 8009332:	b2db      	uxtb	r3, r3
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	210f      	movs	r1, #15
 8009338:	fa01 f303 	lsl.w	r3, r1, r3
 800933c:	43db      	mvns	r3, r3
 800933e:	401a      	ands	r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	fa93 f3a3 	rbit	r3, r3
 800934a:	61fb      	str	r3, [r7, #28]
  return result;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009356:	2320      	movs	r3, #32
 8009358:	e003      	b.n	8009362 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	fab3 f383 	clz	r3, r3
 8009360:	b2db      	uxtb	r3, r3
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	fa01 f303 	lsl.w	r3, r1, r3
 800936a:	431a      	orrs	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8009370:	bf00      	nop
 8009372:	372c      	adds	r7, #44	@ 0x2c
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800937c:	b480      	push	{r7}
 800937e:	b08b      	sub	sp, #44	@ 0x2c
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	fa93 f3a3 	rbit	r3, r3
 8009398:	613b      	str	r3, [r7, #16]
  return result;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80093a4:	2320      	movs	r3, #32
 80093a6:	e003      	b.n	80093b0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	fab3 f383 	clz	r3, r3
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	210f      	movs	r1, #15
 80093b4:	fa01 f303 	lsl.w	r3, r1, r3
 80093b8:	43db      	mvns	r3, r3
 80093ba:	401a      	ands	r2, r3
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	fa93 f3a3 	rbit	r3, r3
 80093c8:	61fb      	str	r3, [r7, #28]
  return result;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80093d4:	2320      	movs	r3, #32
 80093d6:	e003      	b.n	80093e0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	fab3 f383 	clz	r3, r3
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	fa01 f303 	lsl.w	r3, r1, r3
 80093e8:	431a      	orrs	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 80093ee:	bf00      	nop
 80093f0:	372c      	adds	r7, #44	@ 0x2c
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b08a      	sub	sp, #40	@ 0x28
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	fa93 f3a3 	rbit	r3, r3
 8009410:	617b      	str	r3, [r7, #20]
  return result;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <LL_GPIO_Init+0x26>
    return 32U;
 800941c:	2320      	movs	r3, #32
 800941e:	e003      	b.n	8009428 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	fab3 f383 	clz	r3, r3
 8009426:	b2db      	uxtb	r3, r3
 8009428:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800942a:	e058      	b.n	80094de <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	2101      	movs	r1, #1
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009434:	fa01 f303 	lsl.w	r3, r1, r3
 8009438:	4013      	ands	r3, r2
 800943a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d04a      	beq.n	80094d8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d003      	beq.n	8009452 <LL_GPIO_Init+0x58>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d10e      	bne.n	8009470 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	461a      	mov	r2, r3
 8009458:	6a39      	ldr	r1, [r7, #32]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff fed7 	bl	800920e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6819      	ldr	r1, [r3, #0]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	461a      	mov	r2, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff feb7 	bl	80091de <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	461a      	mov	r2, r3
 8009476:	6a39      	ldr	r1, [r7, #32]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff ff05 	bl	8009288 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2b02      	cmp	r3, #2
 8009484:	d121      	bne.n	80094ca <LL_GPIO_Init+0xd0>
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	fa93 f3a3 	rbit	r3, r3
 8009490:	60bb      	str	r3, [r7, #8]
  return result;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <LL_GPIO_Init+0xa6>
    return 32U;
 800949c:	2320      	movs	r3, #32
 800949e:	e003      	b.n	80094a8 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	fab3 f383 	clz	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80094a8:	2b07      	cmp	r3, #7
 80094aa:	d807      	bhi.n	80094bc <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	461a      	mov	r2, r3
 80094b2:	6a39      	ldr	r1, [r7, #32]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff ff24 	bl	8009302 <LL_GPIO_SetAFPin_0_7>
 80094ba:	e006      	b.n	80094ca <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	461a      	mov	r2, r3
 80094c2:	6a39      	ldr	r1, [r7, #32]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff ff59 	bl	800937c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6a39      	ldr	r1, [r7, #32]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fe46 	bl	8009164 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	3301      	adds	r3, #1
 80094dc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d19f      	bne.n	800942c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3728      	adds	r7, #40	@ 0x28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094f6:	b084      	sub	sp, #16
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	f107 001c 	add.w	r0, r7, #28
 8009504:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fd89 	bl	800a02c <USB_CoreReset>
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800951e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	639a      	str	r2, [r3, #56]	@ 0x38
 8009532:	e005      	b.n	8009540 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800954c:	b004      	add	sp, #16
 800954e:	4770      	bx	lr

08009550 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	2b02      	cmp	r3, #2
 8009562:	d165      	bne.n	8009630 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	4a41      	ldr	r2, [pc, #260]	@ (800966c <USB_SetTurnaroundTime+0x11c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d906      	bls.n	800957a <USB_SetTurnaroundTime+0x2a>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4a40      	ldr	r2, [pc, #256]	@ (8009670 <USB_SetTurnaroundTime+0x120>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d202      	bcs.n	800957a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009574:	230f      	movs	r3, #15
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	e062      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	4a3c      	ldr	r2, [pc, #240]	@ (8009670 <USB_SetTurnaroundTime+0x120>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d306      	bcc.n	8009590 <USB_SetTurnaroundTime+0x40>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	4a3b      	ldr	r2, [pc, #236]	@ (8009674 <USB_SetTurnaroundTime+0x124>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d202      	bcs.n	8009590 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800958a:	230e      	movs	r3, #14
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	e057      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4a38      	ldr	r2, [pc, #224]	@ (8009674 <USB_SetTurnaroundTime+0x124>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d306      	bcc.n	80095a6 <USB_SetTurnaroundTime+0x56>
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4a37      	ldr	r2, [pc, #220]	@ (8009678 <USB_SetTurnaroundTime+0x128>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d202      	bcs.n	80095a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095a0:	230d      	movs	r3, #13
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e04c      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4a33      	ldr	r2, [pc, #204]	@ (8009678 <USB_SetTurnaroundTime+0x128>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d306      	bcc.n	80095bc <USB_SetTurnaroundTime+0x6c>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4a32      	ldr	r2, [pc, #200]	@ (800967c <USB_SetTurnaroundTime+0x12c>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d802      	bhi.n	80095bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095b6:	230c      	movs	r3, #12
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	e041      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4a2f      	ldr	r2, [pc, #188]	@ (800967c <USB_SetTurnaroundTime+0x12c>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d906      	bls.n	80095d2 <USB_SetTurnaroundTime+0x82>
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4a2e      	ldr	r2, [pc, #184]	@ (8009680 <USB_SetTurnaroundTime+0x130>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d802      	bhi.n	80095d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095cc:	230b      	movs	r3, #11
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e036      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4a2a      	ldr	r2, [pc, #168]	@ (8009680 <USB_SetTurnaroundTime+0x130>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d906      	bls.n	80095e8 <USB_SetTurnaroundTime+0x98>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4a29      	ldr	r2, [pc, #164]	@ (8009684 <USB_SetTurnaroundTime+0x134>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d802      	bhi.n	80095e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80095e2:	230a      	movs	r3, #10
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e02b      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4a26      	ldr	r2, [pc, #152]	@ (8009684 <USB_SetTurnaroundTime+0x134>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d906      	bls.n	80095fe <USB_SetTurnaroundTime+0xae>
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4a25      	ldr	r2, [pc, #148]	@ (8009688 <USB_SetTurnaroundTime+0x138>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d202      	bcs.n	80095fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80095f8:	2309      	movs	r3, #9
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e020      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4a21      	ldr	r2, [pc, #132]	@ (8009688 <USB_SetTurnaroundTime+0x138>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d306      	bcc.n	8009614 <USB_SetTurnaroundTime+0xc4>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4a20      	ldr	r2, [pc, #128]	@ (800968c <USB_SetTurnaroundTime+0x13c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d802      	bhi.n	8009614 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800960e:	2308      	movs	r3, #8
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e015      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4a1d      	ldr	r2, [pc, #116]	@ (800968c <USB_SetTurnaroundTime+0x13c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d906      	bls.n	800962a <USB_SetTurnaroundTime+0xda>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4a1c      	ldr	r2, [pc, #112]	@ (8009690 <USB_SetTurnaroundTime+0x140>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d202      	bcs.n	800962a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009624:	2307      	movs	r3, #7
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	e00a      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800962a:	2306      	movs	r3, #6
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	e007      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009636:	2309      	movs	r3, #9
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	e001      	b.n	8009640 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800963c:	2309      	movs	r3, #9
 800963e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	029b      	lsls	r3, r3, #10
 8009654:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009658:	431a      	orrs	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	371c      	adds	r7, #28
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	00d8acbf 	.word	0x00d8acbf
 8009670:	00e4e1c0 	.word	0x00e4e1c0
 8009674:	00f42400 	.word	0x00f42400
 8009678:	01067380 	.word	0x01067380
 800967c:	011a499f 	.word	0x011a499f
 8009680:	01312cff 	.word	0x01312cff
 8009684:	014ca43f 	.word	0x014ca43f
 8009688:	016e3600 	.word	0x016e3600
 800968c:	01a6ab1f 	.word	0x01a6ab1f
 8009690:	01e84800 	.word	0x01e84800

08009694 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f023 0201 	bic.w	r2, r3, #1
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d115      	bne.n	8009704 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096e4:	200a      	movs	r0, #10
 80096e6:	f7f8 f96f 	bl	80019c8 <HAL_Delay>
      ms += 10U;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	330a      	adds	r3, #10
 80096ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fc0b 	bl	8009f0c <USB_GetMode>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d01e      	beq.n	800973a <USB_SetCurrentMode+0x84>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8009700:	d9f0      	bls.n	80096e4 <USB_SetCurrentMode+0x2e>
 8009702:	e01a      	b.n	800973a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d115      	bne.n	8009736 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009716:	200a      	movs	r0, #10
 8009718:	f7f8 f956 	bl	80019c8 <HAL_Delay>
      ms += 10U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	330a      	adds	r3, #10
 8009720:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fbf2 	bl	8009f0c <USB_GetMode>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <USB_SetCurrentMode+0x84>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2bc7      	cmp	r3, #199	@ 0xc7
 8009732:	d9f0      	bls.n	8009716 <USB_SetCurrentMode+0x60>
 8009734:	e001      	b.n	800973a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e005      	b.n	8009746 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2bc8      	cmp	r3, #200	@ 0xc8
 800973e:	d101      	bne.n	8009744 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009750:	b084      	sub	sp, #16
 8009752:	b580      	push	{r7, lr}
 8009754:	b086      	sub	sp, #24
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800975e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800976a:	2300      	movs	r3, #0
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	e009      	b.n	8009784 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	3340      	adds	r3, #64	@ 0x40
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	2200      	movs	r2, #0
 800977c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3301      	adds	r3, #1
 8009782:	613b      	str	r3, [r7, #16]
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	2b0e      	cmp	r3, #14
 8009788:	d9f2      	bls.n	8009770 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800978a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800978e:	2b00      	cmp	r3, #0
 8009790:	d11c      	bne.n	80097cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097a0:	f043 0302 	orr.w	r3, r3, #2
 80097a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e005      	b.n	80097d8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097de:	461a      	mov	r2, r3
 80097e0:	2300      	movs	r3, #0
 80097e2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097e4:	2103      	movs	r1, #3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f95e 	bl	8009aa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097ec:	2110      	movs	r1, #16
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8fa 	bl	80099e8 <USB_FlushTxFifo>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f924 	bl	8009a4c <USB_FlushRxFifo>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009814:	461a      	mov	r2, r3
 8009816:	2300      	movs	r3, #0
 8009818:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009820:	461a      	mov	r2, r3
 8009822:	2300      	movs	r3, #0
 8009824:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800982c:	461a      	mov	r2, r3
 800982e:	2300      	movs	r3, #0
 8009830:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009832:	2300      	movs	r3, #0
 8009834:	613b      	str	r3, [r7, #16]
 8009836:	e043      	b.n	80098c0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800984a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800984e:	d118      	bne.n	8009882 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009862:	461a      	mov	r2, r3
 8009864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	e013      	b.n	8009894 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009878:	461a      	mov	r2, r3
 800987a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	e008      	b.n	8009894 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988e:	461a      	mov	r2, r3
 8009890:	2300      	movs	r3, #0
 8009892:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a0:	461a      	mov	r2, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b2:	461a      	mov	r2, r3
 80098b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	3301      	adds	r3, #1
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098c4:	461a      	mov	r2, r3
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d3b5      	bcc.n	8009838 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	e043      	b.n	800995a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098e8:	d118      	bne.n	800991c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fc:	461a      	mov	r2, r3
 80098fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	e013      	b.n	800992e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009912:	461a      	mov	r2, r3
 8009914:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	e008      	b.n	800992e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009928:	461a      	mov	r2, r3
 800992a:	2300      	movs	r3, #0
 800992c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4413      	add	r3, r2
 8009936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800993a:	461a      	mov	r2, r3
 800993c:	2300      	movs	r3, #0
 800993e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994c:	461a      	mov	r2, r3
 800994e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3301      	adds	r3, #1
 8009958:	613b      	str	r3, [r7, #16]
 800995a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800995e:	461a      	mov	r2, r3
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4293      	cmp	r3, r2
 8009964:	d3b5      	bcc.n	80098d2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009978:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009986:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800998c:	2b00      	cmp	r3, #0
 800998e:	d105      	bne.n	800999c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f043 0210 	orr.w	r2, r3, #16
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	699a      	ldr	r2, [r3, #24]
 80099a0:	4b10      	ldr	r3, [pc, #64]	@ (80099e4 <USB_DevInit+0x294>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f043 0208 	orr.w	r2, r3, #8
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d107      	bne.n	80099d4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099cc:	f043 0304 	orr.w	r3, r3, #4
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099e0:	b004      	add	sp, #16
 80099e2:	4770      	bx	lr
 80099e4:	803c3800 	.word	0x803c3800

080099e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a02:	d901      	bls.n	8009a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e01b      	b.n	8009a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	daf2      	bge.n	80099f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	019b      	lsls	r3, r3, #6
 8009a18:	f043 0220 	orr.w	r2, r3, #32
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a2c:	d901      	bls.n	8009a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e006      	b.n	8009a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d0f0      	beq.n	8009a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a64:	d901      	bls.n	8009a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e018      	b.n	8009a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	daf2      	bge.n	8009a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2210      	movs	r2, #16
 8009a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a88:	d901      	bls.n	8009a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e006      	b.n	8009a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d0f0      	beq.n	8009a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	68f9      	ldr	r1, [r7, #12]
 8009ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b087      	sub	sp, #28
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 0306 	and.w	r3, r3, #6
 8009af2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]
 8009afe:	e00a      	b.n	8009b16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d002      	beq.n	8009b0c <USB_GetDevSpeed+0x32>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b06      	cmp	r3, #6
 8009b0a:	d102      	bne.n	8009b12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	75fb      	strb	r3, [r7, #23]
 8009b10:	e001      	b.n	8009b16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b12:	230f      	movs	r3, #15
 8009b14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d14a      	bne.n	8009bd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b5a:	f040 8086 	bne.w	8009c6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	7812      	ldrb	r2, [r2, #0]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	7812      	ldrb	r2, [r2, #0]
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d902      	bls.n	8009bbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bba:	e056      	b.n	8009c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bd4:	d0e7      	beq.n	8009ba6 <USB_EPStopXfer+0x82>
 8009bd6:	e048      	b.n	8009c6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bf0:	d13b      	bne.n	8009c6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	7812      	ldrb	r2, [r2, #0]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	7812      	ldrb	r2, [r2, #0]
 8009c2a:	0151      	lsls	r1, r2, #5
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	440a      	add	r2, r1
 8009c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d902      	bls.n	8009c50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c4e:	e00c      	b.n	8009c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c68:	d0e7      	beq.n	8009c3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b089      	sub	sp, #36	@ 0x24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4611      	mov	r1, r2
 8009c84:	461a      	mov	r2, r3
 8009c86:	460b      	mov	r3, r1
 8009c88:	71fb      	strb	r3, [r7, #7]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d123      	bne.n	8009ce6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c9e:	88bb      	ldrh	r3, [r7, #4]
 8009ca0:	3303      	adds	r3, #3
 8009ca2:	089b      	lsrs	r3, r3, #2
 8009ca4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	e018      	b.n	8009cde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	031a      	lsls	r2, r3, #12
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cb8:	461a      	mov	r2, r3
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	61bb      	str	r3, [r7, #24]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d3e2      	bcc.n	8009cac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3724      	adds	r7, #36	@ 0x24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b08b      	sub	sp, #44	@ 0x2c
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d0a:	88fb      	ldrh	r3, [r7, #6]
 8009d0c:	089b      	lsrs	r3, r3, #2
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d12:	88fb      	ldrh	r3, [r7, #6]
 8009d14:	f003 0303 	and.w	r3, r3, #3
 8009d18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	623b      	str	r3, [r7, #32]
 8009d1e:	e014      	b.n	8009d4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	3301      	adds	r3, #1
 8009d30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	3301      	adds	r3, #1
 8009d36:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d40:	3301      	adds	r3, #1
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	3301      	adds	r3, #1
 8009d48:	623b      	str	r3, [r7, #32]
 8009d4a:	6a3a      	ldr	r2, [r7, #32]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d3e6      	bcc.n	8009d20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d52:	8bfb      	ldrh	r3, [r7, #30]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01e      	beq.n	8009d96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d62:	461a      	mov	r2, r3
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	6812      	ldr	r2, [r2, #0]
 8009d6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	fa22 f303 	lsr.w	r3, r2, r3
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	701a      	strb	r2, [r3, #0]
      i++;
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	3301      	adds	r3, #1
 8009d82:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	3301      	adds	r3, #1
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009d8a:	8bfb      	ldrh	r3, [r7, #30]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d90:	8bfb      	ldrh	r3, [r7, #30]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1ea      	bne.n	8009d6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	372c      	adds	r7, #44	@ 0x2c
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dd2:	f043 0302 	orr.w	r3, r3, #2
 8009dd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	0c1b      	lsrs	r3, r3, #16
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4013      	ands	r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	b29b      	uxth	r3, r3
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	f003 030f 	and.w	r3, r3, #15
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ee0:	01db      	lsls	r3, r3, #7
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4013      	ands	r3, r2
 8009efc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009efe:	68bb      	ldr	r3, [r7, #8]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	371c      	adds	r7, #28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	f003 0301 	and.w	r3, r3, #1
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f42:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
	...

08009f70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	333c      	adds	r3, #60	@ 0x3c
 8009f86:	3304      	adds	r3, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	4a26      	ldr	r2, [pc, #152]	@ (800a028 <USB_EP0_OutStart+0xb8>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d90a      	bls.n	8009faa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fa4:	d101      	bne.n	8009faa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e037      	b.n	800a01a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fd8:	f043 0318 	orr.w	r3, r3, #24
 8009fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009ff0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d10f      	bne.n	800a018 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ffe:	461a      	mov	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a012:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a016:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	4f54300a 	.word	0x4f54300a

0800a02c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3301      	adds	r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a044:	d901      	bls.n	800a04a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e01b      	b.n	800a082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	daf2      	bge.n	800a038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f043 0201 	orr.w	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a06e:	d901      	bls.n	800a074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e006      	b.n	800a082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d0f0      	beq.n	800a062 <USB_CoreReset+0x36>

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
	...

0800a090 <siprintf>:
 800a090:	b40e      	push	{r1, r2, r3}
 800a092:	b500      	push	{lr}
 800a094:	b09c      	sub	sp, #112	@ 0x70
 800a096:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a09a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a09c:	9002      	str	r0, [sp, #8]
 800a09e:	9006      	str	r0, [sp, #24]
 800a0a0:	9107      	str	r1, [sp, #28]
 800a0a2:	9104      	str	r1, [sp, #16]
 800a0a4:	4808      	ldr	r0, [pc, #32]	@ (800a0c8 <siprintf+0x38>)
 800a0a6:	4909      	ldr	r1, [pc, #36]	@ (800a0cc <siprintf+0x3c>)
 800a0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ac:	9105      	str	r1, [sp, #20]
 800a0ae:	a902      	add	r1, sp, #8
 800a0b0:	6800      	ldr	r0, [r0, #0]
 800a0b2:	9301      	str	r3, [sp, #4]
 800a0b4:	f000 f994 	bl	800a3e0 <_svfiprintf_r>
 800a0b8:	9b02      	ldr	r3, [sp, #8]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	b01c      	add	sp, #112	@ 0x70
 800a0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0c4:	b003      	add	sp, #12
 800a0c6:	4770      	bx	lr
 800a0c8:	2000000c 	.word	0x2000000c
 800a0cc:	ffff0208 	.word	0xffff0208

0800a0d0 <memset>:
 800a0d0:	4402      	add	r2, r0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d100      	bne.n	800a0da <memset+0xa>
 800a0d8:	4770      	bx	lr
 800a0da:	f803 1b01 	strb.w	r1, [r3], #1
 800a0de:	e7f9      	b.n	800a0d4 <memset+0x4>

0800a0e0 <__errno>:
 800a0e0:	4b01      	ldr	r3, [pc, #4]	@ (800a0e8 <__errno+0x8>)
 800a0e2:	6818      	ldr	r0, [r3, #0]
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	2000000c 	.word	0x2000000c

0800a0ec <__libc_init_array>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a124 <__libc_init_array+0x38>)
 800a0f0:	2600      	movs	r6, #0
 800a0f2:	4c0d      	ldr	r4, [pc, #52]	@ (800a128 <__libc_init_array+0x3c>)
 800a0f4:	1b64      	subs	r4, r4, r5
 800a0f6:	10a4      	asrs	r4, r4, #2
 800a0f8:	42a6      	cmp	r6, r4
 800a0fa:	d109      	bne.n	800a110 <__libc_init_array+0x24>
 800a0fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a12c <__libc_init_array+0x40>)
 800a0fe:	2600      	movs	r6, #0
 800a100:	4c0b      	ldr	r4, [pc, #44]	@ (800a130 <__libc_init_array+0x44>)
 800a102:	f000 fc77 	bl	800a9f4 <_init>
 800a106:	1b64      	subs	r4, r4, r5
 800a108:	10a4      	asrs	r4, r4, #2
 800a10a:	42a6      	cmp	r6, r4
 800a10c:	d105      	bne.n	800a11a <__libc_init_array+0x2e>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	f855 3b04 	ldr.w	r3, [r5], #4
 800a114:	3601      	adds	r6, #1
 800a116:	4798      	blx	r3
 800a118:	e7ee      	b.n	800a0f8 <__libc_init_array+0xc>
 800a11a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a11e:	3601      	adds	r6, #1
 800a120:	4798      	blx	r3
 800a122:	e7f2      	b.n	800a10a <__libc_init_array+0x1e>
 800a124:	0800ab6c 	.word	0x0800ab6c
 800a128:	0800ab6c 	.word	0x0800ab6c
 800a12c:	0800ab6c 	.word	0x0800ab6c
 800a130:	0800ab70 	.word	0x0800ab70

0800a134 <__retarget_lock_acquire_recursive>:
 800a134:	4770      	bx	lr

0800a136 <__retarget_lock_release_recursive>:
 800a136:	4770      	bx	lr

0800a138 <_free_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4605      	mov	r5, r0
 800a13c:	2900      	cmp	r1, #0
 800a13e:	d041      	beq.n	800a1c4 <_free_r+0x8c>
 800a140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a144:	1f0c      	subs	r4, r1, #4
 800a146:	2b00      	cmp	r3, #0
 800a148:	bfb8      	it	lt
 800a14a:	18e4      	addlt	r4, r4, r3
 800a14c:	f000 f8e0 	bl	800a310 <__malloc_lock>
 800a150:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c8 <_free_r+0x90>)
 800a152:	6813      	ldr	r3, [r2, #0]
 800a154:	b933      	cbnz	r3, 800a164 <_free_r+0x2c>
 800a156:	6063      	str	r3, [r4, #4]
 800a158:	6014      	str	r4, [r2, #0]
 800a15a:	4628      	mov	r0, r5
 800a15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a160:	f000 b8dc 	b.w	800a31c <__malloc_unlock>
 800a164:	42a3      	cmp	r3, r4
 800a166:	d908      	bls.n	800a17a <_free_r+0x42>
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	1821      	adds	r1, r4, r0
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf01      	itttt	eq
 800a170:	6819      	ldreq	r1, [r3, #0]
 800a172:	685b      	ldreq	r3, [r3, #4]
 800a174:	1809      	addeq	r1, r1, r0
 800a176:	6021      	streq	r1, [r4, #0]
 800a178:	e7ed      	b.n	800a156 <_free_r+0x1e>
 800a17a:	461a      	mov	r2, r3
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	b10b      	cbz	r3, 800a184 <_free_r+0x4c>
 800a180:	42a3      	cmp	r3, r4
 800a182:	d9fa      	bls.n	800a17a <_free_r+0x42>
 800a184:	6811      	ldr	r1, [r2, #0]
 800a186:	1850      	adds	r0, r2, r1
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d10b      	bne.n	800a1a4 <_free_r+0x6c>
 800a18c:	6820      	ldr	r0, [r4, #0]
 800a18e:	4401      	add	r1, r0
 800a190:	1850      	adds	r0, r2, r1
 800a192:	6011      	str	r1, [r2, #0]
 800a194:	4283      	cmp	r3, r0
 800a196:	d1e0      	bne.n	800a15a <_free_r+0x22>
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	4408      	add	r0, r1
 800a19e:	6053      	str	r3, [r2, #4]
 800a1a0:	6010      	str	r0, [r2, #0]
 800a1a2:	e7da      	b.n	800a15a <_free_r+0x22>
 800a1a4:	d902      	bls.n	800a1ac <_free_r+0x74>
 800a1a6:	230c      	movs	r3, #12
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	e7d6      	b.n	800a15a <_free_r+0x22>
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	1821      	adds	r1, r4, r0
 800a1b0:	428b      	cmp	r3, r1
 800a1b2:	bf02      	ittt	eq
 800a1b4:	6819      	ldreq	r1, [r3, #0]
 800a1b6:	685b      	ldreq	r3, [r3, #4]
 800a1b8:	1809      	addeq	r1, r1, r0
 800a1ba:	6063      	str	r3, [r4, #4]
 800a1bc:	bf08      	it	eq
 800a1be:	6021      	streq	r1, [r4, #0]
 800a1c0:	6054      	str	r4, [r2, #4]
 800a1c2:	e7ca      	b.n	800a15a <_free_r+0x22>
 800a1c4:	bd38      	pop	{r3, r4, r5, pc}
 800a1c6:	bf00      	nop
 800a1c8:	2000081c 	.word	0x2000081c

0800a1cc <sbrk_aligned>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	4e0f      	ldr	r6, [pc, #60]	@ (800a20c <sbrk_aligned+0x40>)
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	6831      	ldr	r1, [r6, #0]
 800a1d6:	b911      	cbnz	r1, 800a1de <sbrk_aligned+0x12>
 800a1d8:	f000 fbaa 	bl	800a930 <_sbrk_r>
 800a1dc:	6030      	str	r0, [r6, #0]
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 fba5 	bl	800a930 <_sbrk_r>
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	d103      	bne.n	800a1f2 <sbrk_aligned+0x26>
 800a1ea:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	bd70      	pop	{r4, r5, r6, pc}
 800a1f2:	1cc4      	adds	r4, r0, #3
 800a1f4:	f024 0403 	bic.w	r4, r4, #3
 800a1f8:	42a0      	cmp	r0, r4
 800a1fa:	d0f8      	beq.n	800a1ee <sbrk_aligned+0x22>
 800a1fc:	1a21      	subs	r1, r4, r0
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 fb96 	bl	800a930 <_sbrk_r>
 800a204:	3001      	adds	r0, #1
 800a206:	d1f2      	bne.n	800a1ee <sbrk_aligned+0x22>
 800a208:	e7ef      	b.n	800a1ea <sbrk_aligned+0x1e>
 800a20a:	bf00      	nop
 800a20c:	20000818 	.word	0x20000818

0800a210 <_malloc_r>:
 800a210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a214:	1ccd      	adds	r5, r1, #3
 800a216:	4606      	mov	r6, r0
 800a218:	f025 0503 	bic.w	r5, r5, #3
 800a21c:	3508      	adds	r5, #8
 800a21e:	2d0c      	cmp	r5, #12
 800a220:	bf38      	it	cc
 800a222:	250c      	movcc	r5, #12
 800a224:	2d00      	cmp	r5, #0
 800a226:	db01      	blt.n	800a22c <_malloc_r+0x1c>
 800a228:	42a9      	cmp	r1, r5
 800a22a:	d904      	bls.n	800a236 <_malloc_r+0x26>
 800a22c:	230c      	movs	r3, #12
 800a22e:	6033      	str	r3, [r6, #0]
 800a230:	2000      	movs	r0, #0
 800a232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a30c <_malloc_r+0xfc>
 800a23a:	f000 f869 	bl	800a310 <__malloc_lock>
 800a23e:	f8d8 3000 	ldr.w	r3, [r8]
 800a242:	461c      	mov	r4, r3
 800a244:	bb44      	cbnz	r4, 800a298 <_malloc_r+0x88>
 800a246:	4629      	mov	r1, r5
 800a248:	4630      	mov	r0, r6
 800a24a:	f7ff ffbf 	bl	800a1cc <sbrk_aligned>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	4604      	mov	r4, r0
 800a252:	d158      	bne.n	800a306 <_malloc_r+0xf6>
 800a254:	f8d8 4000 	ldr.w	r4, [r8]
 800a258:	4627      	mov	r7, r4
 800a25a:	2f00      	cmp	r7, #0
 800a25c:	d143      	bne.n	800a2e6 <_malloc_r+0xd6>
 800a25e:	2c00      	cmp	r4, #0
 800a260:	d04b      	beq.n	800a2fa <_malloc_r+0xea>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	4639      	mov	r1, r7
 800a266:	4630      	mov	r0, r6
 800a268:	eb04 0903 	add.w	r9, r4, r3
 800a26c:	f000 fb60 	bl	800a930 <_sbrk_r>
 800a270:	4581      	cmp	r9, r0
 800a272:	d142      	bne.n	800a2fa <_malloc_r+0xea>
 800a274:	6821      	ldr	r1, [r4, #0]
 800a276:	4630      	mov	r0, r6
 800a278:	1a6d      	subs	r5, r5, r1
 800a27a:	4629      	mov	r1, r5
 800a27c:	f7ff ffa6 	bl	800a1cc <sbrk_aligned>
 800a280:	3001      	adds	r0, #1
 800a282:	d03a      	beq.n	800a2fa <_malloc_r+0xea>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	442b      	add	r3, r5
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	f8d8 3000 	ldr.w	r3, [r8]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	bb62      	cbnz	r2, 800a2ec <_malloc_r+0xdc>
 800a292:	f8c8 7000 	str.w	r7, [r8]
 800a296:	e00f      	b.n	800a2b8 <_malloc_r+0xa8>
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	1b52      	subs	r2, r2, r5
 800a29c:	d420      	bmi.n	800a2e0 <_malloc_r+0xd0>
 800a29e:	2a0b      	cmp	r2, #11
 800a2a0:	d917      	bls.n	800a2d2 <_malloc_r+0xc2>
 800a2a2:	1961      	adds	r1, r4, r5
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	bf18      	it	ne
 800a2aa:	6059      	strne	r1, [r3, #4]
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	bf08      	it	eq
 800a2b0:	f8c8 1000 	streq.w	r1, [r8]
 800a2b4:	5162      	str	r2, [r4, r5]
 800a2b6:	604b      	str	r3, [r1, #4]
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 f82f 	bl	800a31c <__malloc_unlock>
 800a2be:	f104 000b 	add.w	r0, r4, #11
 800a2c2:	1d23      	adds	r3, r4, #4
 800a2c4:	f020 0007 	bic.w	r0, r0, #7
 800a2c8:	1ac2      	subs	r2, r0, r3
 800a2ca:	bf1c      	itt	ne
 800a2cc:	1a1b      	subne	r3, r3, r0
 800a2ce:	50a3      	strne	r3, [r4, r2]
 800a2d0:	e7af      	b.n	800a232 <_malloc_r+0x22>
 800a2d2:	6862      	ldr	r2, [r4, #4]
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	bf0c      	ite	eq
 800a2d8:	f8c8 2000 	streq.w	r2, [r8]
 800a2dc:	605a      	strne	r2, [r3, #4]
 800a2de:	e7eb      	b.n	800a2b8 <_malloc_r+0xa8>
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	6864      	ldr	r4, [r4, #4]
 800a2e4:	e7ae      	b.n	800a244 <_malloc_r+0x34>
 800a2e6:	463c      	mov	r4, r7
 800a2e8:	687f      	ldr	r7, [r7, #4]
 800a2ea:	e7b6      	b.n	800a25a <_malloc_r+0x4a>
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	d1fb      	bne.n	800a2ec <_malloc_r+0xdc>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	6053      	str	r3, [r2, #4]
 800a2f8:	e7de      	b.n	800a2b8 <_malloc_r+0xa8>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	6033      	str	r3, [r6, #0]
 800a300:	f000 f80c 	bl	800a31c <__malloc_unlock>
 800a304:	e794      	b.n	800a230 <_malloc_r+0x20>
 800a306:	6005      	str	r5, [r0, #0]
 800a308:	e7d6      	b.n	800a2b8 <_malloc_r+0xa8>
 800a30a:	bf00      	nop
 800a30c:	2000081c 	.word	0x2000081c

0800a310 <__malloc_lock>:
 800a310:	4801      	ldr	r0, [pc, #4]	@ (800a318 <__malloc_lock+0x8>)
 800a312:	f7ff bf0f 	b.w	800a134 <__retarget_lock_acquire_recursive>
 800a316:	bf00      	nop
 800a318:	20000814 	.word	0x20000814

0800a31c <__malloc_unlock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	@ (800a324 <__malloc_unlock+0x8>)
 800a31e:	f7ff bf0a 	b.w	800a136 <__retarget_lock_release_recursive>
 800a322:	bf00      	nop
 800a324:	20000814 	.word	0x20000814

0800a328 <__ssputs_r>:
 800a328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a32c:	461f      	mov	r7, r3
 800a32e:	688e      	ldr	r6, [r1, #8]
 800a330:	4682      	mov	sl, r0
 800a332:	460c      	mov	r4, r1
 800a334:	42be      	cmp	r6, r7
 800a336:	4690      	mov	r8, r2
 800a338:	680b      	ldr	r3, [r1, #0]
 800a33a:	d82d      	bhi.n	800a398 <__ssputs_r+0x70>
 800a33c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a340:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a344:	d026      	beq.n	800a394 <__ssputs_r+0x6c>
 800a346:	6965      	ldr	r5, [r4, #20]
 800a348:	6909      	ldr	r1, [r1, #16]
 800a34a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a34e:	eba3 0901 	sub.w	r9, r3, r1
 800a352:	1c7b      	adds	r3, r7, #1
 800a354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a358:	444b      	add	r3, r9
 800a35a:	106d      	asrs	r5, r5, #1
 800a35c:	429d      	cmp	r5, r3
 800a35e:	bf38      	it	cc
 800a360:	461d      	movcc	r5, r3
 800a362:	0553      	lsls	r3, r2, #21
 800a364:	d527      	bpl.n	800a3b6 <__ssputs_r+0x8e>
 800a366:	4629      	mov	r1, r5
 800a368:	f7ff ff52 	bl	800a210 <_malloc_r>
 800a36c:	4606      	mov	r6, r0
 800a36e:	b360      	cbz	r0, 800a3ca <__ssputs_r+0xa2>
 800a370:	464a      	mov	r2, r9
 800a372:	6921      	ldr	r1, [r4, #16]
 800a374:	f000 fafa 	bl	800a96c <memcpy>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	6126      	str	r6, [r4, #16]
 800a386:	444e      	add	r6, r9
 800a388:	6165      	str	r5, [r4, #20]
 800a38a:	eba5 0509 	sub.w	r5, r5, r9
 800a38e:	6026      	str	r6, [r4, #0]
 800a390:	463e      	mov	r6, r7
 800a392:	60a5      	str	r5, [r4, #8]
 800a394:	42be      	cmp	r6, r7
 800a396:	d900      	bls.n	800a39a <__ssputs_r+0x72>
 800a398:	463e      	mov	r6, r7
 800a39a:	4632      	mov	r2, r6
 800a39c:	4641      	mov	r1, r8
 800a39e:	6820      	ldr	r0, [r4, #0]
 800a3a0:	f000 faac 	bl	800a8fc <memmove>
 800a3a4:	68a3      	ldr	r3, [r4, #8]
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	1b9b      	subs	r3, r3, r6
 800a3aa:	60a3      	str	r3, [r4, #8]
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	4433      	add	r3, r6
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	f000 fae5 	bl	800a986 <_realloc_r>
 800a3bc:	4606      	mov	r6, r0
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d1e0      	bne.n	800a384 <__ssputs_r+0x5c>
 800a3c2:	6921      	ldr	r1, [r4, #16]
 800a3c4:	4650      	mov	r0, sl
 800a3c6:	f7ff feb7 	bl	800a138 <_free_r>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d0:	f8ca 3000 	str.w	r3, [sl]
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	e7e9      	b.n	800a3b2 <__ssputs_r+0x8a>
	...

0800a3e0 <_svfiprintf_r>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	4698      	mov	r8, r3
 800a3e6:	898b      	ldrh	r3, [r1, #12]
 800a3e8:	b09d      	sub	sp, #116	@ 0x74
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	061b      	lsls	r3, r3, #24
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	d510      	bpl.n	800a416 <_svfiprintf_r+0x36>
 800a3f4:	690b      	ldr	r3, [r1, #16]
 800a3f6:	b973      	cbnz	r3, 800a416 <_svfiprintf_r+0x36>
 800a3f8:	2140      	movs	r1, #64	@ 0x40
 800a3fa:	f7ff ff09 	bl	800a210 <_malloc_r>
 800a3fe:	6028      	str	r0, [r5, #0]
 800a400:	6128      	str	r0, [r5, #16]
 800a402:	b930      	cbnz	r0, 800a412 <_svfiprintf_r+0x32>
 800a404:	230c      	movs	r3, #12
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	b01d      	add	sp, #116	@ 0x74
 800a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a412:	2340      	movs	r3, #64	@ 0x40
 800a414:	616b      	str	r3, [r5, #20]
 800a416:	2300      	movs	r3, #0
 800a418:	f8cd 800c 	str.w	r8, [sp, #12]
 800a41c:	f04f 0901 	mov.w	r9, #1
 800a420:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a5c4 <_svfiprintf_r+0x1e4>
 800a424:	9309      	str	r3, [sp, #36]	@ 0x24
 800a426:	2320      	movs	r3, #32
 800a428:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a42c:	2330      	movs	r3, #48	@ 0x30
 800a42e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a432:	4623      	mov	r3, r4
 800a434:	469a      	mov	sl, r3
 800a436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a43a:	b10a      	cbz	r2, 800a440 <_svfiprintf_r+0x60>
 800a43c:	2a25      	cmp	r2, #37	@ 0x25
 800a43e:	d1f9      	bne.n	800a434 <_svfiprintf_r+0x54>
 800a440:	ebba 0b04 	subs.w	fp, sl, r4
 800a444:	d00b      	beq.n	800a45e <_svfiprintf_r+0x7e>
 800a446:	465b      	mov	r3, fp
 800a448:	4622      	mov	r2, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7ff ff6b 	bl	800a328 <__ssputs_r>
 800a452:	3001      	adds	r0, #1
 800a454:	f000 80a7 	beq.w	800a5a6 <_svfiprintf_r+0x1c6>
 800a458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a45a:	445a      	add	r2, fp
 800a45c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a45e:	f89a 3000 	ldrb.w	r3, [sl]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 809f 	beq.w	800a5a6 <_svfiprintf_r+0x1c6>
 800a468:	2300      	movs	r3, #0
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295
 800a46e:	f10a 0a01 	add.w	sl, sl, #1
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	9307      	str	r3, [sp, #28]
 800a476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a47a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a480:	4654      	mov	r4, sl
 800a482:	2205      	movs	r2, #5
 800a484:	484f      	ldr	r0, [pc, #316]	@ (800a5c4 <_svfiprintf_r+0x1e4>)
 800a486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48a:	f000 fa61 	bl	800a950 <memchr>
 800a48e:	9a04      	ldr	r2, [sp, #16]
 800a490:	b9d8      	cbnz	r0, 800a4ca <_svfiprintf_r+0xea>
 800a492:	06d0      	lsls	r0, r2, #27
 800a494:	bf44      	itt	mi
 800a496:	2320      	movmi	r3, #32
 800a498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a49c:	0711      	lsls	r1, r2, #28
 800a49e:	bf44      	itt	mi
 800a4a0:	232b      	movmi	r3, #43	@ 0x2b
 800a4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ac:	d015      	beq.n	800a4da <_svfiprintf_r+0xfa>
 800a4ae:	9a07      	ldr	r2, [sp, #28]
 800a4b0:	4654      	mov	r4, sl
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f04f 0c0a 	mov.w	ip, #10
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4be:	3b30      	subs	r3, #48	@ 0x30
 800a4c0:	2b09      	cmp	r3, #9
 800a4c2:	d94b      	bls.n	800a55c <_svfiprintf_r+0x17c>
 800a4c4:	b1b0      	cbz	r0, 800a4f4 <_svfiprintf_r+0x114>
 800a4c6:	9207      	str	r2, [sp, #28]
 800a4c8:	e014      	b.n	800a4f4 <_svfiprintf_r+0x114>
 800a4ca:	eba0 0308 	sub.w	r3, r0, r8
 800a4ce:	46a2      	mov	sl, r4
 800a4d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	e7d2      	b.n	800a480 <_svfiprintf_r+0xa0>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	1d19      	adds	r1, r3, #4
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	9103      	str	r1, [sp, #12]
 800a4e4:	bfbb      	ittet	lt
 800a4e6:	425b      	neglt	r3, r3
 800a4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ec:	9307      	strge	r3, [sp, #28]
 800a4ee:	9307      	strlt	r3, [sp, #28]
 800a4f0:	bfb8      	it	lt
 800a4f2:	9204      	strlt	r2, [sp, #16]
 800a4f4:	7823      	ldrb	r3, [r4, #0]
 800a4f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4f8:	d10a      	bne.n	800a510 <_svfiprintf_r+0x130>
 800a4fa:	7863      	ldrb	r3, [r4, #1]
 800a4fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4fe:	d132      	bne.n	800a566 <_svfiprintf_r+0x186>
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	3402      	adds	r4, #2
 800a504:	1d1a      	adds	r2, r3, #4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a50c:	9203      	str	r2, [sp, #12]
 800a50e:	9305      	str	r3, [sp, #20]
 800a510:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a5d4 <_svfiprintf_r+0x1f4>
 800a514:	2203      	movs	r2, #3
 800a516:	7821      	ldrb	r1, [r4, #0]
 800a518:	4650      	mov	r0, sl
 800a51a:	f000 fa19 	bl	800a950 <memchr>
 800a51e:	b138      	cbz	r0, 800a530 <_svfiprintf_r+0x150>
 800a520:	eba0 000a 	sub.w	r0, r0, sl
 800a524:	2240      	movs	r2, #64	@ 0x40
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	3401      	adds	r4, #1
 800a52a:	4082      	lsls	r2, r0
 800a52c:	4313      	orrs	r3, r2
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a534:	2206      	movs	r2, #6
 800a536:	4824      	ldr	r0, [pc, #144]	@ (800a5c8 <_svfiprintf_r+0x1e8>)
 800a538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a53c:	f000 fa08 	bl	800a950 <memchr>
 800a540:	2800      	cmp	r0, #0
 800a542:	d036      	beq.n	800a5b2 <_svfiprintf_r+0x1d2>
 800a544:	4b21      	ldr	r3, [pc, #132]	@ (800a5cc <_svfiprintf_r+0x1ec>)
 800a546:	bb1b      	cbnz	r3, 800a590 <_svfiprintf_r+0x1b0>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	3307      	adds	r3, #7
 800a54c:	f023 0307 	bic.w	r3, r3, #7
 800a550:	3308      	adds	r3, #8
 800a552:	9303      	str	r3, [sp, #12]
 800a554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a556:	4433      	add	r3, r6
 800a558:	9309      	str	r3, [sp, #36]	@ 0x24
 800a55a:	e76a      	b.n	800a432 <_svfiprintf_r+0x52>
 800a55c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a560:	460c      	mov	r4, r1
 800a562:	2001      	movs	r0, #1
 800a564:	e7a8      	b.n	800a4b8 <_svfiprintf_r+0xd8>
 800a566:	2300      	movs	r3, #0
 800a568:	3401      	adds	r4, #1
 800a56a:	f04f 0c0a 	mov.w	ip, #10
 800a56e:	4619      	mov	r1, r3
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	4620      	mov	r0, r4
 800a574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a578:	3a30      	subs	r2, #48	@ 0x30
 800a57a:	2a09      	cmp	r2, #9
 800a57c:	d903      	bls.n	800a586 <_svfiprintf_r+0x1a6>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0c6      	beq.n	800a510 <_svfiprintf_r+0x130>
 800a582:	9105      	str	r1, [sp, #20]
 800a584:	e7c4      	b.n	800a510 <_svfiprintf_r+0x130>
 800a586:	fb0c 2101 	mla	r1, ip, r1, r2
 800a58a:	4604      	mov	r4, r0
 800a58c:	2301      	movs	r3, #1
 800a58e:	e7f0      	b.n	800a572 <_svfiprintf_r+0x192>
 800a590:	ab03      	add	r3, sp, #12
 800a592:	462a      	mov	r2, r5
 800a594:	a904      	add	r1, sp, #16
 800a596:	4638      	mov	r0, r7
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d0 <_svfiprintf_r+0x1f0>)
 800a59c:	f3af 8000 	nop.w
 800a5a0:	1c42      	adds	r2, r0, #1
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	d1d6      	bne.n	800a554 <_svfiprintf_r+0x174>
 800a5a6:	89ab      	ldrh	r3, [r5, #12]
 800a5a8:	065b      	lsls	r3, r3, #25
 800a5aa:	f53f af2d 	bmi.w	800a408 <_svfiprintf_r+0x28>
 800a5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5b0:	e72c      	b.n	800a40c <_svfiprintf_r+0x2c>
 800a5b2:	ab03      	add	r3, sp, #12
 800a5b4:	462a      	mov	r2, r5
 800a5b6:	a904      	add	r1, sp, #16
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	4b04      	ldr	r3, [pc, #16]	@ (800a5d0 <_svfiprintf_r+0x1f0>)
 800a5be:	f000 f87d 	bl	800a6bc <_printf_i>
 800a5c2:	e7ed      	b.n	800a5a0 <_svfiprintf_r+0x1c0>
 800a5c4:	0800ab30 	.word	0x0800ab30
 800a5c8:	0800ab3a 	.word	0x0800ab3a
 800a5cc:	00000000 	.word	0x00000000
 800a5d0:	0800a329 	.word	0x0800a329
 800a5d4:	0800ab36 	.word	0x0800ab36

0800a5d8 <_printf_common>:
 800a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5dc:	4616      	mov	r6, r2
 800a5de:	4698      	mov	r8, r3
 800a5e0:	688a      	ldr	r2, [r1, #8]
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	690b      	ldr	r3, [r1, #16]
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bfb8      	it	lt
 800a5f0:	4613      	movlt	r3, r2
 800a5f2:	6033      	str	r3, [r6, #0]
 800a5f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5f8:	b10a      	cbz	r2, 800a5fe <_printf_common+0x26>
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	6033      	str	r3, [r6, #0]
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	0699      	lsls	r1, r3, #26
 800a602:	bf42      	ittt	mi
 800a604:	6833      	ldrmi	r3, [r6, #0]
 800a606:	3302      	addmi	r3, #2
 800a608:	6033      	strmi	r3, [r6, #0]
 800a60a:	6825      	ldr	r5, [r4, #0]
 800a60c:	f015 0506 	ands.w	r5, r5, #6
 800a610:	d106      	bne.n	800a620 <_printf_common+0x48>
 800a612:	f104 0a19 	add.w	sl, r4, #25
 800a616:	68e3      	ldr	r3, [r4, #12]
 800a618:	6832      	ldr	r2, [r6, #0]
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	dc2b      	bgt.n	800a678 <_printf_common+0xa0>
 800a620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	3b00      	subs	r3, #0
 800a628:	bf18      	it	ne
 800a62a:	2301      	movne	r3, #1
 800a62c:	0692      	lsls	r2, r2, #26
 800a62e:	d430      	bmi.n	800a692 <_printf_common+0xba>
 800a630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a634:	4641      	mov	r1, r8
 800a636:	4638      	mov	r0, r7
 800a638:	47c8      	blx	r9
 800a63a:	3001      	adds	r0, #1
 800a63c:	d023      	beq.n	800a686 <_printf_common+0xae>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	341a      	adds	r4, #26
 800a642:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a646:	f003 0306 	and.w	r3, r3, #6
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	bf0a      	itet	eq
 800a64e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a652:	2500      	movne	r5, #0
 800a654:	6833      	ldreq	r3, [r6, #0]
 800a656:	f04f 0600 	mov.w	r6, #0
 800a65a:	bf08      	it	eq
 800a65c:	1aed      	subeq	r5, r5, r3
 800a65e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a662:	bf08      	it	eq
 800a664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a668:	4293      	cmp	r3, r2
 800a66a:	bfc4      	itt	gt
 800a66c:	1a9b      	subgt	r3, r3, r2
 800a66e:	18ed      	addgt	r5, r5, r3
 800a670:	42b5      	cmp	r5, r6
 800a672:	d11a      	bne.n	800a6aa <_printf_common+0xd2>
 800a674:	2000      	movs	r0, #0
 800a676:	e008      	b.n	800a68a <_printf_common+0xb2>
 800a678:	2301      	movs	r3, #1
 800a67a:	4652      	mov	r2, sl
 800a67c:	4641      	mov	r1, r8
 800a67e:	4638      	mov	r0, r7
 800a680:	47c8      	blx	r9
 800a682:	3001      	adds	r0, #1
 800a684:	d103      	bne.n	800a68e <_printf_common+0xb6>
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	3501      	adds	r5, #1
 800a690:	e7c1      	b.n	800a616 <_printf_common+0x3e>
 800a692:	18e1      	adds	r1, r4, r3
 800a694:	1c5a      	adds	r2, r3, #1
 800a696:	2030      	movs	r0, #48	@ 0x30
 800a698:	3302      	adds	r3, #2
 800a69a:	4422      	add	r2, r4
 800a69c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a6a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6a8:	e7c2      	b.n	800a630 <_printf_common+0x58>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	4641      	mov	r1, r8
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	47c8      	blx	r9
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d0e6      	beq.n	800a686 <_printf_common+0xae>
 800a6b8:	3601      	adds	r6, #1
 800a6ba:	e7d9      	b.n	800a670 <_printf_common+0x98>

0800a6bc <_printf_i>:
 800a6bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	7e0f      	ldrb	r7, [r1, #24]
 800a6c2:	4691      	mov	r9, r2
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	2f78      	cmp	r7, #120	@ 0x78
 800a6ca:	469a      	mov	sl, r3
 800a6cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6d2:	d807      	bhi.n	800a6e4 <_printf_i+0x28>
 800a6d4:	2f62      	cmp	r7, #98	@ 0x62
 800a6d6:	d80a      	bhi.n	800a6ee <_printf_i+0x32>
 800a6d8:	2f00      	cmp	r7, #0
 800a6da:	f000 80d2 	beq.w	800a882 <_printf_i+0x1c6>
 800a6de:	2f58      	cmp	r7, #88	@ 0x58
 800a6e0:	f000 80b9 	beq.w	800a856 <_printf_i+0x19a>
 800a6e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6ec:	e03a      	b.n	800a764 <_printf_i+0xa8>
 800a6ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6f2:	2b15      	cmp	r3, #21
 800a6f4:	d8f6      	bhi.n	800a6e4 <_printf_i+0x28>
 800a6f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a6fc <_printf_i+0x40>)
 800a6f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6fc:	0800a755 	.word	0x0800a755
 800a700:	0800a769 	.word	0x0800a769
 800a704:	0800a6e5 	.word	0x0800a6e5
 800a708:	0800a6e5 	.word	0x0800a6e5
 800a70c:	0800a6e5 	.word	0x0800a6e5
 800a710:	0800a6e5 	.word	0x0800a6e5
 800a714:	0800a769 	.word	0x0800a769
 800a718:	0800a6e5 	.word	0x0800a6e5
 800a71c:	0800a6e5 	.word	0x0800a6e5
 800a720:	0800a6e5 	.word	0x0800a6e5
 800a724:	0800a6e5 	.word	0x0800a6e5
 800a728:	0800a869 	.word	0x0800a869
 800a72c:	0800a793 	.word	0x0800a793
 800a730:	0800a823 	.word	0x0800a823
 800a734:	0800a6e5 	.word	0x0800a6e5
 800a738:	0800a6e5 	.word	0x0800a6e5
 800a73c:	0800a88b 	.word	0x0800a88b
 800a740:	0800a6e5 	.word	0x0800a6e5
 800a744:	0800a793 	.word	0x0800a793
 800a748:	0800a6e5 	.word	0x0800a6e5
 800a74c:	0800a6e5 	.word	0x0800a6e5
 800a750:	0800a82b 	.word	0x0800a82b
 800a754:	6833      	ldr	r3, [r6, #0]
 800a756:	1d1a      	adds	r2, r3, #4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6032      	str	r2, [r6, #0]
 800a75c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a764:	2301      	movs	r3, #1
 800a766:	e09d      	b.n	800a8a4 <_printf_i+0x1e8>
 800a768:	6833      	ldr	r3, [r6, #0]
 800a76a:	6820      	ldr	r0, [r4, #0]
 800a76c:	1d19      	adds	r1, r3, #4
 800a76e:	6031      	str	r1, [r6, #0]
 800a770:	0606      	lsls	r6, r0, #24
 800a772:	d501      	bpl.n	800a778 <_printf_i+0xbc>
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	e003      	b.n	800a780 <_printf_i+0xc4>
 800a778:	0645      	lsls	r5, r0, #25
 800a77a:	d5fb      	bpl.n	800a774 <_printf_i+0xb8>
 800a77c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a780:	2d00      	cmp	r5, #0
 800a782:	da03      	bge.n	800a78c <_printf_i+0xd0>
 800a784:	232d      	movs	r3, #45	@ 0x2d
 800a786:	426d      	negs	r5, r5
 800a788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a78c:	4859      	ldr	r0, [pc, #356]	@ (800a8f4 <_printf_i+0x238>)
 800a78e:	230a      	movs	r3, #10
 800a790:	e011      	b.n	800a7b6 <_printf_i+0xfa>
 800a792:	6821      	ldr	r1, [r4, #0]
 800a794:	6833      	ldr	r3, [r6, #0]
 800a796:	0608      	lsls	r0, r1, #24
 800a798:	f853 5b04 	ldr.w	r5, [r3], #4
 800a79c:	d402      	bmi.n	800a7a4 <_printf_i+0xe8>
 800a79e:	0649      	lsls	r1, r1, #25
 800a7a0:	bf48      	it	mi
 800a7a2:	b2ad      	uxthmi	r5, r5
 800a7a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7a6:	6033      	str	r3, [r6, #0]
 800a7a8:	4852      	ldr	r0, [pc, #328]	@ (800a8f4 <_printf_i+0x238>)
 800a7aa:	bf14      	ite	ne
 800a7ac:	230a      	movne	r3, #10
 800a7ae:	2308      	moveq	r3, #8
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7b6:	6866      	ldr	r6, [r4, #4]
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	60a6      	str	r6, [r4, #8]
 800a7bc:	bfa2      	ittt	ge
 800a7be:	6821      	ldrge	r1, [r4, #0]
 800a7c0:	f021 0104 	bicge.w	r1, r1, #4
 800a7c4:	6021      	strge	r1, [r4, #0]
 800a7c6:	b90d      	cbnz	r5, 800a7cc <_printf_i+0x110>
 800a7c8:	2e00      	cmp	r6, #0
 800a7ca:	d04b      	beq.n	800a864 <_printf_i+0x1a8>
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a7d6:	5dc7      	ldrb	r7, [r0, r7]
 800a7d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7dc:	462f      	mov	r7, r5
 800a7de:	460d      	mov	r5, r1
 800a7e0:	42bb      	cmp	r3, r7
 800a7e2:	d9f4      	bls.n	800a7ce <_printf_i+0x112>
 800a7e4:	2b08      	cmp	r3, #8
 800a7e6:	d10b      	bne.n	800a800 <_printf_i+0x144>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	07df      	lsls	r7, r3, #31
 800a7ec:	d508      	bpl.n	800a800 <_printf_i+0x144>
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	6861      	ldr	r1, [r4, #4]
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	bfde      	ittt	le
 800a7f6:	2330      	movle	r3, #48	@ 0x30
 800a7f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a800:	1b92      	subs	r2, r2, r6
 800a802:	6122      	str	r2, [r4, #16]
 800a804:	464b      	mov	r3, r9
 800a806:	aa03      	add	r2, sp, #12
 800a808:	4621      	mov	r1, r4
 800a80a:	4640      	mov	r0, r8
 800a80c:	f8cd a000 	str.w	sl, [sp]
 800a810:	f7ff fee2 	bl	800a5d8 <_printf_common>
 800a814:	3001      	adds	r0, #1
 800a816:	d14a      	bne.n	800a8ae <_printf_i+0x1f2>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	b004      	add	sp, #16
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	f043 0320 	orr.w	r3, r3, #32
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	2778      	movs	r7, #120	@ 0x78
 800a82c:	4832      	ldr	r0, [pc, #200]	@ (800a8f8 <_printf_i+0x23c>)
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a834:	061f      	lsls	r7, r3, #24
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	f851 5b04 	ldr.w	r5, [r1], #4
 800a83c:	d402      	bmi.n	800a844 <_printf_i+0x188>
 800a83e:	065f      	lsls	r7, r3, #25
 800a840:	bf48      	it	mi
 800a842:	b2ad      	uxthmi	r5, r5
 800a844:	6031      	str	r1, [r6, #0]
 800a846:	07d9      	lsls	r1, r3, #31
 800a848:	bf44      	itt	mi
 800a84a:	f043 0320 	orrmi.w	r3, r3, #32
 800a84e:	6023      	strmi	r3, [r4, #0]
 800a850:	b11d      	cbz	r5, 800a85a <_printf_i+0x19e>
 800a852:	2310      	movs	r3, #16
 800a854:	e7ac      	b.n	800a7b0 <_printf_i+0xf4>
 800a856:	4827      	ldr	r0, [pc, #156]	@ (800a8f4 <_printf_i+0x238>)
 800a858:	e7e9      	b.n	800a82e <_printf_i+0x172>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	f023 0320 	bic.w	r3, r3, #32
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	e7f6      	b.n	800a852 <_printf_i+0x196>
 800a864:	4616      	mov	r6, r2
 800a866:	e7bd      	b.n	800a7e4 <_printf_i+0x128>
 800a868:	6833      	ldr	r3, [r6, #0]
 800a86a:	6825      	ldr	r5, [r4, #0]
 800a86c:	1d18      	adds	r0, r3, #4
 800a86e:	6961      	ldr	r1, [r4, #20]
 800a870:	6030      	str	r0, [r6, #0]
 800a872:	062e      	lsls	r6, r5, #24
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	d501      	bpl.n	800a87c <_printf_i+0x1c0>
 800a878:	6019      	str	r1, [r3, #0]
 800a87a:	e002      	b.n	800a882 <_printf_i+0x1c6>
 800a87c:	0668      	lsls	r0, r5, #25
 800a87e:	d5fb      	bpl.n	800a878 <_printf_i+0x1bc>
 800a880:	8019      	strh	r1, [r3, #0]
 800a882:	2300      	movs	r3, #0
 800a884:	4616      	mov	r6, r2
 800a886:	6123      	str	r3, [r4, #16]
 800a888:	e7bc      	b.n	800a804 <_printf_i+0x148>
 800a88a:	6833      	ldr	r3, [r6, #0]
 800a88c:	2100      	movs	r1, #0
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	6032      	str	r2, [r6, #0]
 800a892:	681e      	ldr	r6, [r3, #0]
 800a894:	6862      	ldr	r2, [r4, #4]
 800a896:	4630      	mov	r0, r6
 800a898:	f000 f85a 	bl	800a950 <memchr>
 800a89c:	b108      	cbz	r0, 800a8a2 <_printf_i+0x1e6>
 800a89e:	1b80      	subs	r0, r0, r6
 800a8a0:	6060      	str	r0, [r4, #4]
 800a8a2:	6863      	ldr	r3, [r4, #4]
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ac:	e7aa      	b.n	800a804 <_printf_i+0x148>
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	4632      	mov	r2, r6
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	47d0      	blx	sl
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d0ad      	beq.n	800a818 <_printf_i+0x15c>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	079b      	lsls	r3, r3, #30
 800a8c0:	d413      	bmi.n	800a8ea <_printf_i+0x22e>
 800a8c2:	68e0      	ldr	r0, [r4, #12]
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	4298      	cmp	r0, r3
 800a8c8:	bfb8      	it	lt
 800a8ca:	4618      	movlt	r0, r3
 800a8cc:	e7a6      	b.n	800a81c <_printf_i+0x160>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4632      	mov	r2, r6
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	47d0      	blx	sl
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d09d      	beq.n	800a818 <_printf_i+0x15c>
 800a8dc:	3501      	adds	r5, #1
 800a8de:	68e3      	ldr	r3, [r4, #12]
 800a8e0:	9903      	ldr	r1, [sp, #12]
 800a8e2:	1a5b      	subs	r3, r3, r1
 800a8e4:	42ab      	cmp	r3, r5
 800a8e6:	dcf2      	bgt.n	800a8ce <_printf_i+0x212>
 800a8e8:	e7eb      	b.n	800a8c2 <_printf_i+0x206>
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	f104 0619 	add.w	r6, r4, #25
 800a8f0:	e7f5      	b.n	800a8de <_printf_i+0x222>
 800a8f2:	bf00      	nop
 800a8f4:	0800ab41 	.word	0x0800ab41
 800a8f8:	0800ab52 	.word	0x0800ab52

0800a8fc <memmove>:
 800a8fc:	4288      	cmp	r0, r1
 800a8fe:	b510      	push	{r4, lr}
 800a900:	eb01 0402 	add.w	r4, r1, r2
 800a904:	d902      	bls.n	800a90c <memmove+0x10>
 800a906:	4284      	cmp	r4, r0
 800a908:	4623      	mov	r3, r4
 800a90a:	d807      	bhi.n	800a91c <memmove+0x20>
 800a90c:	1e43      	subs	r3, r0, #1
 800a90e:	42a1      	cmp	r1, r4
 800a910:	d008      	beq.n	800a924 <memmove+0x28>
 800a912:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a91a:	e7f8      	b.n	800a90e <memmove+0x12>
 800a91c:	4402      	add	r2, r0
 800a91e:	4601      	mov	r1, r0
 800a920:	428a      	cmp	r2, r1
 800a922:	d100      	bne.n	800a926 <memmove+0x2a>
 800a924:	bd10      	pop	{r4, pc}
 800a926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a92a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a92e:	e7f7      	b.n	800a920 <memmove+0x24>

0800a930 <_sbrk_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	2300      	movs	r3, #0
 800a934:	4d05      	ldr	r5, [pc, #20]	@ (800a94c <_sbrk_r+0x1c>)
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	f7f6 fcfe 	bl	800133c <_sbrk>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_sbrk_r+0x1a>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_sbrk_r+0x1a>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20000810 	.word	0x20000810

0800a950 <memchr>:
 800a950:	b2c9      	uxtb	r1, r1
 800a952:	4603      	mov	r3, r0
 800a954:	4402      	add	r2, r0
 800a956:	b510      	push	{r4, lr}
 800a958:	4293      	cmp	r3, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	d101      	bne.n	800a962 <memchr+0x12>
 800a95e:	2000      	movs	r0, #0
 800a960:	e003      	b.n	800a96a <memchr+0x1a>
 800a962:	7804      	ldrb	r4, [r0, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	428c      	cmp	r4, r1
 800a968:	d1f6      	bne.n	800a958 <memchr+0x8>
 800a96a:	bd10      	pop	{r4, pc}

0800a96c <memcpy>:
 800a96c:	440a      	add	r2, r1
 800a96e:	1e43      	subs	r3, r0, #1
 800a970:	4291      	cmp	r1, r2
 800a972:	d100      	bne.n	800a976 <memcpy+0xa>
 800a974:	4770      	bx	lr
 800a976:	b510      	push	{r4, lr}
 800a978:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a97c:	4291      	cmp	r1, r2
 800a97e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a982:	d1f9      	bne.n	800a978 <memcpy+0xc>
 800a984:	bd10      	pop	{r4, pc}

0800a986 <_realloc_r>:
 800a986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98a:	4680      	mov	r8, r0
 800a98c:	4615      	mov	r5, r2
 800a98e:	460c      	mov	r4, r1
 800a990:	b921      	cbnz	r1, 800a99c <_realloc_r+0x16>
 800a992:	4611      	mov	r1, r2
 800a994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	f7ff bc3a 	b.w	800a210 <_malloc_r>
 800a99c:	b92a      	cbnz	r2, 800a9aa <_realloc_r+0x24>
 800a99e:	f7ff fbcb 	bl	800a138 <_free_r>
 800a9a2:	2400      	movs	r4, #0
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9aa:	f000 f81a 	bl	800a9e2 <_malloc_usable_size_r>
 800a9ae:	4285      	cmp	r5, r0
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	d802      	bhi.n	800a9ba <_realloc_r+0x34>
 800a9b4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9b8:	d8f4      	bhi.n	800a9a4 <_realloc_r+0x1e>
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4640      	mov	r0, r8
 800a9be:	f7ff fc27 	bl	800a210 <_malloc_r>
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d0ec      	beq.n	800a9a2 <_realloc_r+0x1c>
 800a9c8:	42b5      	cmp	r5, r6
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	bf28      	it	cs
 800a9d0:	4632      	movcs	r2, r6
 800a9d2:	f7ff ffcb 	bl	800a96c <memcpy>
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4640      	mov	r0, r8
 800a9da:	463c      	mov	r4, r7
 800a9dc:	f7ff fbac 	bl	800a138 <_free_r>
 800a9e0:	e7e0      	b.n	800a9a4 <_realloc_r+0x1e>

0800a9e2 <_malloc_usable_size_r>:
 800a9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e6:	1f18      	subs	r0, r3, #4
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfbc      	itt	lt
 800a9ec:	580b      	ldrlt	r3, [r1, r0]
 800a9ee:	18c0      	addlt	r0, r0, r3
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <_init>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	bf00      	nop
 800a9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fa:	bc08      	pop	{r3}
 800a9fc:	469e      	mov	lr, r3
 800a9fe:	4770      	bx	lr

0800aa00 <_fini>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr
