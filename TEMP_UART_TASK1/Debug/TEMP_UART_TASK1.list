
TEMP_UART_TASK1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc94  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800dee8  0800dee8  0000eee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e378  0800e378  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e378  0800e378  0000f378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e380  0800e380  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e380  0800e380  0000f380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e384  0800e384  0000f384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e388  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d4  0800e55c  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800e55c  0001042c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001276f  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fa  00000000  00000000  00022979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00024c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a66  00000000  00000000  000259f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031e75  00000000  00000000  00026456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014db3  00000000  00000000  000582cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00134bee  00000000  00000000  0006d07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a1c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  001a1cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001a6964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001d4 	.word	0x200001d4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800decc 	.word	0x0800decc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001d8 	.word	0x200001d8
 800028c:	0800decc 	.word	0x0800decc

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9b4 	b.w	8001028 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14d      	bne.n	8000dec <__udivmoddi4+0xa8>
 8000d50:	428a      	cmp	r2, r1
 8000d52:	460f      	mov	r7, r1
 8000d54:	4684      	mov	ip, r0
 8000d56:	4696      	mov	lr, r2
 8000d58:	fab2 f382 	clz	r3, r2
 8000d5c:	d960      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5e:	b14b      	cbz	r3, 8000d74 <__udivmoddi4+0x30>
 8000d60:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d72:	4317      	orrs	r7, r2
 8000d74:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d78:	fa1f f48e 	uxth.w	r4, lr
 8000d7c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d80:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d84:	fb06 7711 	mls	r7, r6, r1, r7
 8000d88:	fb01 f004 	mul.w	r0, r1, r4
 8000d8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d90:	4290      	cmp	r0, r2
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d94:	eb1e 0202 	adds.w	r2, lr, r2
 8000d98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x60>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f200 812d 	bhi.w	8000ffe <__udivmoddi4+0x2ba>
 8000da4:	4639      	mov	r1, r7
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	fa1f fc8c 	uxth.w	ip, ip
 8000dac:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db0:	fb06 2210 	mls	r2, r6, r0, r2
 8000db4:	fb00 f404 	mul.w	r4, r0, r4
 8000db8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dbc:	4564      	cmp	r4, ip
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dc0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	4564      	cmp	r4, ip
 8000dcc:	f200 811a 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	ebac 0c04 	sub.w	ip, ip, r4
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b125      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000dde:	fa2c f303 	lsr.w	r3, ip, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	e9c5 3200 	strd	r3, r2, [r5]
 8000de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d905      	bls.n	8000dfc <__udivmoddi4+0xb8>
 8000df0:	b10d      	cbz	r5, 8000df6 <__udivmoddi4+0xb2>
 8000df2:	e9c5 0100 	strd	r0, r1, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e7f5      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000dfc:	fab3 f183 	clz	r1, r3
 8000e00:	2900      	cmp	r1, #0
 8000e02:	d14d      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	f0c0 80f2 	bcc.w	8000fee <__udivmoddi4+0x2aa>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f080 80ef 	bcs.w	8000fee <__udivmoddi4+0x2aa>
 8000e10:	4606      	mov	r6, r0
 8000e12:	4623      	mov	r3, r4
 8000e14:	4608      	mov	r0, r1
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e6      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000e1e:	e7e3      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 80a2 	bne.w	8000f6a <__udivmoddi4+0x226>
 8000e26:	1a8a      	subs	r2, r1, r2
 8000e28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e2c:	fa1f f68e 	uxth.w	r6, lr
 8000e30:	2101      	movs	r1, #1
 8000e32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e36:	fb07 2014 	mls	r0, r7, r4, r2
 8000e3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb06 f004 	mul.w	r0, r6, r4
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d90f      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80c8 	beq.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e68:	4644      	mov	r4, r8
 8000e6a:	1a12      	subs	r2, r2, r0
 8000e6c:	fa1f fc8c 	uxth.w	ip, ip
 8000e70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e74:	fb07 2210 	mls	r2, r7, r0, r2
 8000e78:	fb00 f606 	mul.w	r6, r0, r6
 8000e7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e80:	4566      	cmp	r6, ip
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x150>
 8000e8e:	4566      	cmp	r6, ip
 8000e90:	f200 80bb 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e94:	4610      	mov	r0, r2
 8000e96:	ebac 0c06 	sub.w	ip, ip, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb2:	40f4      	lsrs	r4, r6
 8000eb4:	408a      	lsls	r2, r1
 8000eb6:	431f      	orrs	r7, r3
 8000eb8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ebc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fa1f fc87 	uxth.w	ip, r7
 8000ecc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb00 f90c 	mul.w	r9, r0, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	d90e      	bls.n	8000efe <__udivmoddi4+0x1ba>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	bf2c      	ite	cs
 8000ee8:	f04f 0b01 	movcs.w	fp, #1
 8000eec:	f04f 0b00 	movcc.w	fp, #0
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	d903      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ef4:	f1bb 0f00 	cmp.w	fp, #0
 8000ef8:	f000 8093 	beq.w	8001022 <__udivmoddi4+0x2de>
 8000efc:	4650      	mov	r0, sl
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d906      	bls.n	8000f28 <__udivmoddi4+0x1e4>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f20:	d201      	bcs.n	8000f26 <__udivmoddi4+0x1e2>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d87a      	bhi.n	800101c <__udivmoddi4+0x2d8>
 8000f26:	4643      	mov	r3, r8
 8000f28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2c:	eba4 040c 	sub.w	r4, r4, ip
 8000f30:	fba0 9802 	umull	r9, r8, r0, r2
 8000f34:	4544      	cmp	r4, r8
 8000f36:	46cc      	mov	ip, r9
 8000f38:	4643      	mov	r3, r8
 8000f3a:	d302      	bcc.n	8000f42 <__udivmoddi4+0x1fe>
 8000f3c:	d106      	bne.n	8000f4c <__udivmoddi4+0x208>
 8000f3e:	45ce      	cmp	lr, r9
 8000f40:	d204      	bcs.n	8000f4c <__udivmoddi4+0x208>
 8000f42:	3801      	subs	r0, #1
 8000f44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f48:	eb68 0307 	sbc.w	r3, r8, r7
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x222>
 8000f4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000f52:	eb64 0403 	sbc.w	r4, r4, r3
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	e9c5 6400 	strd	r6, r4, [r5]
 8000f66:	2100      	movs	r1, #0
 8000f68:	e73e      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000f6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f6e:	f1c3 0120 	rsb	r1, r3, #32
 8000f72:	fa04 f203 	lsl.w	r2, r4, r3
 8000f76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	fa1f f68e 	uxth.w	r6, lr
 8000f88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000f92:	0c11      	lsrs	r1, r2, #16
 8000f94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f98:	fb00 f406 	mul.w	r4, r0, r6
 8000f9c:	428c      	cmp	r4, r1
 8000f9e:	d90e      	bls.n	8000fbe <__udivmoddi4+0x27a>
 8000fa0:	eb1e 0101 	adds.w	r1, lr, r1
 8000fa4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa8:	bf2c      	ite	cs
 8000faa:	f04f 0901 	movcs.w	r9, #1
 8000fae:	f04f 0900 	movcc.w	r9, #0
 8000fb2:	428c      	cmp	r4, r1
 8000fb4:	d902      	bls.n	8000fbc <__udivmoddi4+0x278>
 8000fb6:	f1b9 0f00 	cmp.w	r9, #0
 8000fba:	d02c      	beq.n	8001016 <__udivmoddi4+0x2d2>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	1b09      	subs	r1, r1, r4
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fce:	fb04 f106 	mul.w	r1, r4, r6
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x2a2>
 8000fd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000fda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fde:	d201      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d815      	bhi.n	8001010 <__udivmoddi4+0x2cc>
 8000fe4:	4644      	mov	r4, r8
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fec:	e721      	b.n	8000e32 <__udivmoddi4+0xee>
 8000fee:	1a86      	subs	r6, r0, r2
 8000ff0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	e70e      	b.n	8000e16 <__udivmoddi4+0xd2>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e735      	b.n	8000e6a <__udivmoddi4+0x126>
 8000ffe:	3902      	subs	r1, #2
 8001000:	4472      	add	r2, lr
 8001002:	e6d0      	b.n	8000da6 <__udivmoddi4+0x62>
 8001004:	44f4      	add	ip, lr
 8001006:	3802      	subs	r0, #2
 8001008:	e6e3      	b.n	8000dd2 <__udivmoddi4+0x8e>
 800100a:	44f4      	add	ip, lr
 800100c:	3802      	subs	r0, #2
 800100e:	e742      	b.n	8000e96 <__udivmoddi4+0x152>
 8001010:	3c02      	subs	r4, #2
 8001012:	4472      	add	r2, lr
 8001014:	e7e7      	b.n	8000fe6 <__udivmoddi4+0x2a2>
 8001016:	3802      	subs	r0, #2
 8001018:	4471      	add	r1, lr
 800101a:	e7d0      	b.n	8000fbe <__udivmoddi4+0x27a>
 800101c:	3b02      	subs	r3, #2
 800101e:	443c      	add	r4, r7
 8001020:	e782      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8001022:	3802      	subs	r0, #2
 8001024:	443c      	add	r4, r7
 8001026:	e76a      	b.n	8000efe <__udivmoddi4+0x1ba>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_GPIO_Init+0x50>)
 8001034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <MX_GPIO_Init+0x50>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_GPIO_Init+0x50>)
 8001044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <MX_GPIO_Init+0x50>)
 8001052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001056:	4a09      	ldr	r2, [pc, #36]	@ (800107c <MX_GPIO_Init+0x50>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_GPIO_Init+0x50>)
 8001062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	44020c00 	.word	0x44020c00

08001080 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_I2C1_Init+0x74>)
 8001086:	4a1c      	ldr	r2, [pc, #112]	@ (80010f8 <MX_I2C1_Init+0x78>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_I2C1_Init+0x74>)
 800108c:	4a1b      	ldr	r2, [pc, #108]	@ (80010fc <MX_I2C1_Init+0x7c>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_I2C1_Init+0x74>)
 8001098:	2201      	movs	r2, #1
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_I2C1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ba:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <MX_I2C1_Init+0x74>)
 80010bc:	f000 fff4 	bl	80020a8 <HAL_I2C_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010c6:	f000 f9a7 	bl	8001418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ca:	2100      	movs	r1, #0
 80010cc:	4809      	ldr	r0, [pc, #36]	@ (80010f4 <MX_I2C1_Init+0x74>)
 80010ce:	f001 fd17 	bl	8002b00 <HAL_I2CEx_ConfigAnalogFilter>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d8:	f000 f99e 	bl	8001418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_I2C1_Init+0x74>)
 80010e0:	f001 fd59 	bl	8002b96 <HAL_I2CEx_ConfigDigitalFilter>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f000 f995 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001f0 	.word	0x200001f0
 80010f8:	40005400 	.word	0x40005400
 80010fc:	00707cbb 	.word	0x00707cbb

08001100 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0cc      	sub	sp, #304	@ 0x130
 8001104:	af00      	add	r7, sp, #0
 8001106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800110a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800110e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001124:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001128:	4618      	mov	r0, r3
 800112a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	f009 fad8 	bl	800a6e6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001136:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800113a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a33      	ldr	r2, [pc, #204]	@ (8001210 <HAL_I2C_MspInit+0x110>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d15d      	bne.n	8001204 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800114c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800115c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001160:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001164:	2200      	movs	r2, #0
 8001166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fcd8 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800117a:	f000 f94d 	bl	8001418 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_I2C_MspInit+0x114>)
 8001180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001184:	4a23      	ldr	r2, [pc, #140]	@ (8001214 <HAL_I2C_MspInit+0x114>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <HAL_I2C_MspInit+0x114>)
 8001190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001194:	f003 0202 	and.w	r2, r3, #2
 8001198:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800119c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011aa:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ac:	23c0      	movs	r3, #192	@ 0xc0
 80011ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b2:	2312      	movs	r3, #18
 80011b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c4:	2304      	movs	r3, #4
 80011c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80011ce:	4619      	mov	r1, r3
 80011d0:	4811      	ldr	r0, [pc, #68]	@ (8001218 <HAL_I2C_MspInit+0x118>)
 80011d2:	f000 fe17 	bl	8001e04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_I2C_MspInit+0x114>)
 80011d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <HAL_I2C_MspInit+0x114>)
 80011de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_I2C_MspInit+0x114>)
 80011e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011ec:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80011f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001202:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40005400 	.word	0x40005400
 8001214:	44020c00 	.word	0x44020c00
 8001218:	42020400 	.word	0x42020400

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001222:	f000 fba9 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f897 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f7ff feff 	bl	800102c <MX_GPIO_Init>
  MX_I2C1_Init();
 800122e:	f7ff ff27 	bl	8001080 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001232:	f000 fa6f 	bl	8001714 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //step1 - i2C sending 0x00
	  buf[0]= REG_temp;//read instruction
 8001236:	2300      	movs	r3, #0
 8001238:	703b      	strb	r3, [r7, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1,TEMPI2C_add,buf,1,HAL_MAX_DELAY); //I2C init for transmitting data;
 800123a:	2390      	movs	r3, #144	@ 0x90
 800123c:	4619      	mov	r1, r3
 800123e:	463a      	mov	r2, r7
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	483b      	ldr	r0, [pc, #236]	@ (8001338 <main+0x11c>)
 800124a:	f000 ffc9 	bl	80021e0 <HAL_I2C_Master_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	75fb      	strb	r3, [r7, #23]
	  if(ret != HAL_OK)//checking if I2C transmit is done without error
 8001252:	7dfb      	ldrb	r3, [r7, #23]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <main+0x4e>
	  {
		  strcpy((char*)buf,"ERROR_TX\r\n");//filling buf with error message
 8001258:	463b      	mov	r3, r7
 800125a:	4a38      	ldr	r2, [pc, #224]	@ (800133c <main+0x120>)
 800125c:	ca07      	ldmia	r2, {r0, r1, r2}
 800125e:	c303      	stmia	r3!, {r0, r1}
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	3302      	adds	r3, #2
 8001264:	0c12      	lsrs	r2, r2, #16
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e054      	b.n	8001314 <main+0xf8>
	  }
	  else{
	  ret = HAL_I2C_Master_Receive(&hi2c1,TEMPI2C_add,buf,2,HAL_MAX_DELAY); //I2C init for receiving data//2 byte of expected as per datasheet
 800126a:	2390      	movs	r3, #144	@ 0x90
 800126c:	4619      	mov	r1, r3
 800126e:	463a      	mov	r2, r7
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	482f      	ldr	r0, [pc, #188]	@ (8001338 <main+0x11c>)
 800127a:	f001 f8a5 	bl	80023c8 <HAL_I2C_Master_Receive>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]
	  if(ret != HAL_OK)//checking if I2C transmit is done without error
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <main+0x7e>
	 	  {
	 		  strcpy((char*)buf,"ERROR_RX\r\n");//filling buf with error message
 8001288:	463b      	mov	r3, r7
 800128a:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <main+0x124>)
 800128c:	ca07      	ldmia	r2, {r0, r1, r2}
 800128e:	c303      	stmia	r3!, {r0, r1}
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	3302      	adds	r3, #2
 8001294:	0c12      	lsrs	r2, r2, #16
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e03c      	b.n	8001314 <main+0xf8>
	 	  }
	  else{
		  //processing received data into a single readable value
		  //typecasting to 16 bit int data
		 val = (uint16_t)(buf[0] << 8 | buf[1]);//val is a 16 bit data //thus shifting the buf value into val by shift opertion
 800129a:	783b      	ldrb	r3, [r7, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	82bb      	strh	r3, [r7, #20]
		  //convertinf 2'complement value ,is temperature data is negative
//		  if(val > 0x7FFF){
//			  val |= 0xF000;
//		  }
		  	//converting to float celcius value
		  	 temp_c = val * 0.0625;//as mentioned in datasheet for convertion
 80012aa:	8abb      	ldrh	r3, [r7, #20]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f949 	bl	8000544 <__aeabi_i2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <main+0x128>)
 80012b8:	f7ff f9ae 	bl	8000618 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fca0 	bl	8000c08 <__aeabi_d2f>
 80012c8:	4603      	mov	r3, r0
 80012ca:	613b      	str	r3, [r7, #16]

		  	 //converting temp into decimal format
		  	 temp_c =temp_c*100;//removing float point space
 80012cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001348 <main+0x12c>
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	edc7 7a04 	vstr	s15, [r7, #16]
		  	 sprintf((char*)buf,"%u%02u C\r\n",((unsigned int)temp_c / 100),((unsigned int)temp_c % 100));//copying the values of temp in buf to print in UART
 80012dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e4:	ee17 2a90 	vmov	r2, s15
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <main+0x130>)
 80012ea:	fba3 2302 	umull	r2, r3, r3, r2
 80012ee:	095a      	lsrs	r2, r3, #5
 80012f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f8:	ee17 1a90 	vmov	r1, s15
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <main+0x130>)
 80012fe:	fba3 0301 	umull	r0, r3, r3, r1
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2064      	movs	r0, #100	@ 0x64
 8001306:	fb00 f303 	mul.w	r3, r0, r3
 800130a:	1acb      	subs	r3, r1, r3
 800130c:	4638      	mov	r0, r7
 800130e:	4910      	ldr	r1, [pc, #64]	@ (8001350 <main+0x134>)
 8001310:	f009 f986 	bl	800a620 <siprintf>
		  	 //temp_c/100 gives quoficient of temp anad modulo gives the remainder ex. 22.34 C as output print
	  }

	  }
	  HAL_UART_Transmit(&huart3,buf,strlen((char*)buf),HAL_MAX_DELAY);//sending data through usart3 connected to serial in nucleo board
 8001314:	463b      	mov	r3, r7
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ffba 	bl	8000290 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	4639      	mov	r1, r7
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	480b      	ldr	r0, [pc, #44]	@ (8001354 <main+0x138>)
 8001328:	f007 fc9e 	bl	8008c68 <HAL_UART_Transmit>
	  //delay before proceeding to next operation
	  HAL_Delay(500);
 800132c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001330:	f000 fbe0 	bl	8001af4 <HAL_Delay>
	  buf[0]= REG_temp;//read instruction
 8001334:	e77f      	b.n	8001236 <main+0x1a>
 8001336:	bf00      	nop
 8001338:	200001f0 	.word	0x200001f0
 800133c:	0800dee8 	.word	0x0800dee8
 8001340:	0800def4 	.word	0x0800def4
 8001344:	3fb00000 	.word	0x3fb00000
 8001348:	42c80000 	.word	0x42c80000
 800134c:	51eb851f 	.word	0x51eb851f
 8001350:	0800df00 	.word	0x0800df00
 8001354:	20000248 	.word	0x20000248

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b09c      	sub	sp, #112	@ 0x70
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2250      	movs	r2, #80	@ 0x50
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f009 f9bd 	bl	800a6e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <SystemClock_Config+0xb8>)
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <SystemClock_Config+0xb8>)
 8001384:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001388:	6113      	str	r3, [r2, #16]
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <SystemClock_Config+0xb8>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001396:	bf00      	nop
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <SystemClock_Config+0xb8>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d1f9      	bne.n	8001398 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80013ac:	2308      	movs	r3, #8
 80013ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b0:	2340      	movs	r3, #64	@ 0x40
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 fc37 	bl	8002c30 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013c8:	f000 f826 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	231f      	movs	r3, #31
 80013ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 f858 	bl	80034a0 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80013f6:	f000 f80f 	bl	8001418 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <SystemClock_Config+0xbc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <SystemClock_Config+0xbc>)
 8001400:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001404:	6013      	str	r3, [r2, #0]
}
 8001406:	bf00      	nop
 8001408:	3770      	adds	r7, #112	@ 0x70
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	44020800 	.word	0x44020800
 8001414:	40022000 	.word	0x40022000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <Error_Handler+0x8>

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001436:	bf00      	nop
 8001438:	e7fd      	b.n	8001436 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	bf00      	nop
 8001440:	e7fd      	b.n	800143e <HardFault_Handler+0x4>

08001442 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001446:	bf00      	nop
 8001448:	e7fd      	b.n	8001446 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	bf00      	nop
 8001450:	e7fd      	b.n	800144e <BusFault_Handler+0x4>

08001452 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001456:	bf00      	nop
 8001458:	e7fd      	b.n	8001456 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 fb14 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014aa:	f009 f96f 	bl	800a78c <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
  return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d2:	bf00      	nop
 80014d4:	e7fd      	b.n	80014d2 <_exit+0x12>

080014d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e8:	f3af 8000 	nop.w
 80014ec:	4601      	mov	r1, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf0      	blt.n	80014e8 <_read+0x12>
  }

  return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e009      	b.n	8001536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbf1      	blt.n	8001522 <_write+0x12>
  }
  return len;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_close>:

int _close(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	605a      	str	r2, [r3, #4]
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_isatty>:

int _isatty(int file)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f009 f8d4 	bl	800a78c <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200a0000 	.word	0x200a0000
 8001610:	00000400 	.word	0x00000400
 8001614:	20000244 	.word	0x20000244
 8001618:	20000430 	.word	0x20000430

0800161c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <SystemInit+0xdc>)
 8001624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001628:	4a33      	ldr	r2, [pc, #204]	@ (80016f8 <SystemInit+0xdc>)
 800162a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001632:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <SystemInit+0xe0>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001638:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <SystemInit+0xe0>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800163e:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <SystemInit+0xe0>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001644:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <SystemInit+0xe0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	492c      	ldr	r1, [pc, #176]	@ (80016fc <SystemInit+0xe0>)
 800164a:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <SystemInit+0xe4>)
 800164c:	4013      	ands	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <SystemInit+0xe0>)
 8001652:	2200      	movs	r2, #0
 8001654:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001656:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <SystemInit+0xe0>)
 8001658:	2200      	movs	r2, #0
 800165a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800165c:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <SystemInit+0xe0>)
 800165e:	2200      	movs	r2, #0
 8001660:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <SystemInit+0xe0>)
 8001664:	4a27      	ldr	r2, [pc, #156]	@ (8001704 <SystemInit+0xe8>)
 8001666:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001668:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <SystemInit+0xe0>)
 800166a:	2200      	movs	r2, #0
 800166c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <SystemInit+0xe0>)
 8001670:	4a24      	ldr	r2, [pc, #144]	@ (8001704 <SystemInit+0xe8>)
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001674:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <SystemInit+0xe0>)
 8001676:	2200      	movs	r2, #0
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <SystemInit+0xe0>)
 800167c:	4a21      	ldr	r2, [pc, #132]	@ (8001704 <SystemInit+0xe8>)
 800167e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <SystemInit+0xe0>)
 8001682:	2200      	movs	r2, #0
 8001684:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <SystemInit+0xe0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <SystemInit+0xe0>)
 800168c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001690:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <SystemInit+0xe0>)
 8001694:	2200      	movs	r2, #0
 8001696:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <SystemInit+0xdc>)
 800169a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800169e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <SystemInit+0xec>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80016a8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80016b0:	d003      	beq.n	80016ba <SystemInit+0x9e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80016b8:	d117      	bne.n	80016ea <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <SystemInit+0xec>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <SystemInit+0xec>)
 80016c8:	4a10      	ldr	r2, [pc, #64]	@ (800170c <SystemInit+0xf0>)
 80016ca:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <SystemInit+0xec>)
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <SystemInit+0xf4>)
 80016d0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <SystemInit+0xec>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <SystemInit+0xec>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <SystemInit+0xec>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <SystemInit+0xec>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	61d3      	str	r3, [r2, #28]
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	44020c00 	.word	0x44020c00
 8001700:	eae2eae3 	.word	0xeae2eae3
 8001704:	01010280 	.word	0x01010280
 8001708:	40022000 	.word	0x40022000
 800170c:	08192a3b 	.word	0x08192a3b
 8001710:	4c5d6e7f 	.word	0x4c5d6e7f

08001714 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 800171a:	4a23      	ldr	r2, [pc, #140]	@ (80017a8 <MX_USART3_UART_Init+0x94>)
 800171c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175c:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 800175e:	f007 fa33 	bl	8008bc8 <HAL_UART_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001768:	f7ff fe56 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176c:	2100      	movs	r1, #0
 800176e:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001770:	f007 ff5e 	bl	8009630 <HAL_UARTEx_SetTxFifoThreshold>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800177a:	f7ff fe4d 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177e:	2100      	movs	r1, #0
 8001780:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001782:	f007 ff93 	bl	80096ac <HAL_UARTEx_SetRxFifoThreshold>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800178c:	f7ff fe44 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <MX_USART3_UART_Init+0x90>)
 8001792:	f007 ff14 	bl	80095be <HAL_UARTEx_DisableFifoMode>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800179c:	f7ff fe3c 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000248 	.word	0x20000248
 80017a8:	40004800 	.word	0x40004800

080017ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0ce      	sub	sp, #312	@ 0x138
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017ba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017d4:	4618      	mov	r0, r3
 80017d6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80017da:	461a      	mov	r2, r3
 80017dc:	2100      	movs	r1, #0
 80017de:	f008 ff82 	bl	800a6e6 <memset>
  if(uartHandle->Instance==USART3)
 80017e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a49      	ldr	r2, [pc, #292]	@ (8001914 <HAL_UART_MspInit+0x168>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	f040 808a 	bne.w	800190a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017fa:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80017fe:	f04f 0204 	mov.w	r2, #4
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800180a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800180e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001812:	2200      	movs	r2, #0
 8001814:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001816:	f107 0318 	add.w	r3, r7, #24
 800181a:	4618      	mov	r0, r3
 800181c:	f002 f982 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001826:	f7ff fdf7 	bl	8001418 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800182a:	4b3b      	ldr	r3, [pc, #236]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 800182c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001830:	4a39      	ldr	r2, [pc, #228]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 8001832:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001836:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800183a:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 800183c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001840:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001844:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001848:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001852:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001856:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001858:	4b2f      	ldr	r3, [pc, #188]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 800185a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185e:	4a2e      	ldr	r2, [pc, #184]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 800186a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186e:	f003 0204 	and.w	r2, r3, #4
 8001872:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001876:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001880:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001884:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 8001888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188c:	4a22      	ldr	r2, [pc, #136]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_UART_MspInit+0x16c>)
 8001898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189c:	f003 0202 	and.w	r2, r3, #2
 80018a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018b2:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 80018b4:	2310      	movs	r3, #16
 80018b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018cc:	2307      	movs	r3, #7
 80018ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80018d6:	4619      	mov	r1, r3
 80018d8:	4810      	ldr	r0, [pc, #64]	@ (800191c <HAL_UART_MspInit+0x170>)
 80018da:	f000 fa93 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 80018de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f8:	2307      	movs	r3, #7
 80018fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001902:	4619      	mov	r1, r3
 8001904:	4806      	ldr	r0, [pc, #24]	@ (8001920 <HAL_UART_MspInit+0x174>)
 8001906:	f000 fa7d 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40004800 	.word	0x40004800
 8001918:	44020c00 	.word	0x44020c00
 800191c:	42020800 	.word	0x42020800
 8001920:	42020400 	.word	0x42020400

08001924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001924:	480d      	ldr	r0, [pc, #52]	@ (800195c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001928:	f7ff fe78 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <LoopForever+0x6>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	@ (8001964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <LoopForever+0xe>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	@ (8001970 <LoopForever+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001952:	f008 ff21 	bl	800a798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001956:	f7ff fc61 	bl	800121c <main>

0800195a <LoopForever>:

LoopForever:
    b LoopForever
 800195a:	e7fe      	b.n	800195a <LoopForever>
  ldr   r0, =_estack
 800195c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001968:	0800e388 	.word	0x0800e388
  ldr r2, =_sbss
 800196c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001970:	2000042c 	.word	0x2000042c

08001974 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC1_IRQHandler>
	...

08001978 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f96c 	bl	8001c5a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001982:	f001 ff45 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8001986:	4602      	mov	r2, r0
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_Init+0x44>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	490b      	ldr	r1, [pc, #44]	@ (80019c0 <HAL_Init+0x48>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_Init+0x4c>)
 800199a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800199c:	2004      	movs	r0, #4
 800199e:	f000 f9a3 	bl	8001ce8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f810 	bl	80019c8 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e002      	b.n	80019b8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019b2:	f7ff fd37 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	44020c00 	.word	0x44020c00
 80019c0:	0800df0c 	.word	0x0800df0c
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019d4:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <HAL_InitTick+0xdc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e05c      	b.n	8001a9a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019e0:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_InitTick+0xe0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d10c      	bne.n	8001a06 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80019ec:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <HAL_InitTick+0xe4>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <HAL_InitTick+0xdc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e037      	b.n	8001a76 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001a06:	f000 f9c7 	bl	8001d98 <HAL_SYSTICK_GetCLKSourceConfig>
 8001a0a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d023      	beq.n	8001a5a <HAL_InitTick+0x92>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d82d      	bhi.n	8001a74 <HAL_InitTick+0xac>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_InitTick+0x5e>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d00d      	beq.n	8001a40 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001a24:	e026      	b.n	8001a74 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <HAL_InitTick+0xe4>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_InitTick+0xdc>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a34:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	60fb      	str	r3, [r7, #12]
        break;
 8001a3e:	e01a      	b.n	8001a76 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <HAL_InitTick+0xdc>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a4e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	60fb      	str	r3, [r7, #12]
        break;
 8001a58:	e00d      	b.n	8001a76 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_InitTick+0xdc>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	60fb      	str	r3, [r7, #12]
        break;
 8001a72:	e000      	b.n	8001a76 <HAL_InitTick+0xae>
        break;
 8001a74:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f914 	bl	8001ca4 <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e009      	b.n	8001a9a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a86:	2200      	movs	r2, #0
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8e:	f000 f8ef 	bl	8001c70 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a92:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_InitTick+0xe8>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	e000e010 	.word	0xe000e010
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	200002dc 	.word	0x200002dc

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200002dc 	.word	0x200002dc

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	@ (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	@ (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff6a 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7e:	f7ff ff81 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001c82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f7ff ffb3 	bl	8001bf4 <NVIC_EncodePriority>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff82 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00d      	b.n	8001cd6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <HAL_SYSTICK_Config+0x40>)
 8001cce:	f043 0303 	orr.w	r3, r3, #3
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d844      	bhi.n	8001d80 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d1f 	.word	0x08001d1f
 8001d00:	08001d3d 	.word	0x08001d3d
 8001d04:	08001d5f 	.word	0x08001d5f
 8001d08:	08001d81 	.word	0x08001d81
 8001d0c:	08001d11 	.word	0x08001d11
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6013      	str	r3, [r2, #0]
      break;
 8001d1c:	e031      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d30:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d32:	f023 030c 	bic.w	r3, r3, #12
 8001d36:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001d3a:	e022      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d42:	f023 0304 	bic.w	r3, r3, #4
 8001d46:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d4e:	f023 030c 	bic.w	r3, r3, #12
 8001d52:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001d5c:	e011      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0b      	ldr	r2, [pc, #44]	@ (8001d90 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d70:	f023 030c 	bic.w	r3, r3, #12
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001d7e:	e000      	b.n	8001d82 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001d80:	bf00      	nop
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010
 8001d94:	44020c00 	.word	0x44020c00

08001d98 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001daa:	2304      	movs	r3, #4
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	e01e      	b.n	8001dee <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001db0:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001db2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d00f      	beq.n	8001de2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d80f      	bhi.n	8001de8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d003      	beq.n	8001ddc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001dd4:	e008      	b.n	8001de8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
        break;
 8001dda:	e008      	b.n	8001dee <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
        break;
 8001de0:	e005      	b.n	8001dee <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001de2:	2302      	movs	r3, #2
 8001de4:	607b      	str	r3, [r7, #4]
        break;
 8001de6:	e002      	b.n	8001dee <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
        break;
 8001dec:	bf00      	nop
    }
  }
  return systick_source;
 8001dee:	687b      	ldr	r3, [r7, #4]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e010 	.word	0xe000e010
 8001e00:	44020c00 	.word	0x44020c00

08001e04 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e12:	e136      	b.n	8002082 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8128 	beq.w	800207c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x38>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b12      	cmp	r3, #18
 8001e3a:	d125      	bne.n	8001e88 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	6979      	ldr	r1, [r7, #20]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00b      	beq.n	8001edc <HAL_GPIO_Init+0xd8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d130      	bne.n	8001f3e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f12:	2201      	movs	r2, #1
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 0201 	and.w	r2, r3, #1
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d017      	beq.n	8001f76 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d07c      	beq.n	800207c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f82:	4a47      	ldr	r2, [pc, #284]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3318      	adds	r3, #24
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0a9a      	lsrs	r2, r3, #10
 8001faa:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <HAL_GPIO_Init+0x2a0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	f002 0203 	and.w	r2, r2, #3
 8001fb4:	00d2      	lsls	r2, r2, #3
 8001fb6:	4093      	lsls	r3, r2
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001fbe:	4938      	ldr	r1, [pc, #224]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001fcc:	4b34      	ldr	r3, [pc, #208]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4013      	ands	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800201a:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002020:	4b1f      	ldr	r3, [pc, #124]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8002022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002026:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4013      	ands	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002046:	4a16      	ldr	r2, [pc, #88]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800204e:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8002050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002054:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_GPIO_Init+0x29c>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	3301      	adds	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f aec1 	bne.w	8001e14 <HAL_GPIO_Init+0x10>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	44022000 	.word	0x44022000
 80020a4:	002f7f7f 	.word	0x002f7f7f

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e08d      	b.n	80021d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff f816 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	@ 0x24
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002108:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e006      	b.n	8002130 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800212e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d108      	bne.n	800214a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	e007      	b.n	800215a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800216c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800217c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69d9      	ldr	r1, [r3, #28]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	f040 80da 	bne.w	80023b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x30>
 800220c:	2302      	movs	r3, #2
 800220e:	e0d3      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1d8>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002218:	f7ff fc60 	bl	8001adc <HAL_GetTick>
 800221c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2319      	movs	r3, #25
 8002224:	2201      	movs	r2, #1
 8002226:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f9e6 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0be      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2221      	movs	r2, #33	@ 0x21
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2210      	movs	r2, #16
 8002246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	893a      	ldrh	r2, [r7, #8]
 800225a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	2bff      	cmp	r3, #255	@ 0xff
 800226a:	d90e      	bls.n	800228a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	22ff      	movs	r2, #255	@ 0xff
 8002270:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002276:	b2da      	uxtb	r2, r3
 8002278:	8979      	ldrh	r1, [r7, #10]
 800227a:	4b51      	ldr	r3, [pc, #324]	@ (80023c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fc0a 	bl	8002a9c <I2C_TransferConfig>
 8002288:	e06c      	b.n	8002364 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	b2da      	uxtb	r2, r3
 800229a:	8979      	ldrh	r1, [r7, #10]
 800229c:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fbf9 	bl	8002a9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022aa:	e05b      	b.n	8002364 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	6a39      	ldr	r1, [r7, #32]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f9fc 	bl	80026ae <I2C_WaitOnTXISFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e07b      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d034      	beq.n	8002364 <HAL_I2C_Master_Transmit+0x184>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d130      	bne.n	8002364 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	2200      	movs	r2, #0
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f975 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e04d      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2bff      	cmp	r3, #255	@ 0xff
 8002324:	d90e      	bls.n	8002344 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	22ff      	movs	r2, #255	@ 0xff
 800232a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002330:	b2da      	uxtb	r2, r3
 8002332:	8979      	ldrh	r1, [r7, #10]
 8002334:	2300      	movs	r3, #0
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fbad 	bl	8002a9c <I2C_TransferConfig>
 8002342:	e00f      	b.n	8002364 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002352:	b2da      	uxtb	r2, r3
 8002354:	8979      	ldrh	r1, [r7, #10]
 8002356:	2300      	movs	r3, #0
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fb9c 	bl	8002a9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d19e      	bne.n	80022ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	6a39      	ldr	r1, [r7, #32]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f9e2 	bl	800273c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e01a      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2220      	movs	r2, #32
 8002388:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002396:	400b      	ands	r3, r1
 8002398:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	80002000 	.word	0x80002000
 80023c4:	fe00e800 	.word	0xfe00e800

080023c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	461a      	mov	r2, r3
 80023d4:	460b      	mov	r3, r1
 80023d6:	817b      	strh	r3, [r7, #10]
 80023d8:	4613      	mov	r3, r2
 80023da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	f040 80db 	bne.w	80025a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_I2C_Master_Receive+0x30>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0d4      	b.n	80025a2 <HAL_I2C_Master_Receive+0x1da>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002400:	f7ff fb6c 	bl	8001adc <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2319      	movs	r3, #25
 800240c:	2201      	movs	r2, #1
 800240e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8f2 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0bf      	b.n	80025a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2222      	movs	r2, #34	@ 0x22
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2210      	movs	r2, #16
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	893a      	ldrh	r2, [r7, #8]
 8002442:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2bff      	cmp	r3, #255	@ 0xff
 8002452:	d90e      	bls.n	8002472 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	22ff      	movs	r2, #255	@ 0xff
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	b2da      	uxtb	r2, r3
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	4b52      	ldr	r3, [pc, #328]	@ (80025ac <HAL_I2C_Master_Receive+0x1e4>)
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fb16 	bl	8002a9c <I2C_TransferConfig>
 8002470:	e06d      	b.n	800254e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	b2da      	uxtb	r2, r3
 8002482:	8979      	ldrh	r1, [r7, #10]
 8002484:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <HAL_I2C_Master_Receive+0x1e4>)
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fb05 	bl	8002a9c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002492:	e05c      	b.n	800254e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	6a39      	ldr	r1, [r7, #32]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f993 	bl	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e07c      	b.n	80025a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d034      	beq.n	800254e <HAL_I2C_Master_Receive+0x186>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d130      	bne.n	800254e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2180      	movs	r1, #128	@ 0x80
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f880 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e04d      	b.n	80025a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2bff      	cmp	r3, #255	@ 0xff
 800250e:	d90e      	bls.n	800252e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	22ff      	movs	r2, #255	@ 0xff
 8002514:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	b2da      	uxtb	r2, r3
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fab8 	bl	8002a9c <I2C_TransferConfig>
 800252c:	e00f      	b.n	800254e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	b2da      	uxtb	r2, r3
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 faa7 	bl	8002a9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d19d      	bne.n	8002494 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6a39      	ldr	r1, [r7, #32]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f8ed 	bl	800273c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e01a      	b.n	80025a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2220      	movs	r2, #32
 8002572:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <HAL_I2C_Master_Receive+0x1e8>)
 8002580:	400b      	ands	r3, r1
 8002582:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	80002400 	.word	0x80002400
 80025b0:	fe00e800 	.word	0xfe00e800

080025b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d103      	bne.n	80025d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d007      	beq.n	80025f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	619a      	str	r2, [r3, #24]
  }
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260c:	e03b      	b.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f962 	bl	80028dc <I2C_IsErrorOccurred>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d02d      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff fa57 	bl	8001adc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x44>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d122      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4013      	ands	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	429a      	cmp	r2, r3
 800265c:	d113      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d0b4      	beq.n	800260e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ba:	e033      	b.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f90b 	bl	80028dc <I2C_IsErrorOccurred>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e031      	b.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d025      	beq.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7ff fa00 	bl	8001adc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11a      	bne.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d013      	beq.n	8002724 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e007      	b.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d1c4      	bne.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002748:	e02f      	b.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8c4 	bl	80028dc <I2C_IsErrorOccurred>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e02d      	b.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7ff f9bd 	bl	8001adc <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11a      	bne.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b20      	cmp	r3, #32
 8002780:	d013      	beq.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e007      	b.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d1c8      	bne.n	800274a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027d4:	e071      	b.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f87e 	bl	80028dc <I2C_IsErrorOccurred>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d13b      	bne.n	8002870 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d138      	bne.n	8002870 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d105      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b10      	cmp	r3, #16
 8002824:	d121      	bne.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2210      	movs	r2, #16
 800282c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2204      	movs	r2, #4
 8002832:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2220      	movs	r2, #32
 800283a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002848:	400b      	ands	r3, r1
 800284a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
 8002868:	e002      	b.n	8002870 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002870:	f7ff f934 	bl	8001adc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	429a      	cmp	r2, r3
 800287e:	d302      	bcc.n	8002886 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d00f      	beq.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d002      	beq.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d083      	beq.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	fe00e800 	.word	0xfe00e800

080028dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	@ 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d068      	beq.n	80029da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2210      	movs	r2, #16
 800290e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002910:	e049      	b.n	80029a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d045      	beq.n	80029a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7ff f8df 	bl	8001adc <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_IsErrorOccurred+0x54>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d13a      	bne.n	80029a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002942:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800294e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002952:	d121      	bne.n	8002998 <I2C_IsErrorOccurred+0xbc>
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800295a:	d01d      	beq.n	8002998 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b20      	cmp	r3, #32
 8002960:	d01a      	beq.n	8002998 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002970:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002972:	f7ff f8b3 	bl	8001adc <HAL_GetTick>
 8002976:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002978:	e00e      	b.n	8002998 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800297a:	f7ff f8af 	bl	8001adc <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b19      	cmp	r3, #25
 8002986:	d907      	bls.n	8002998 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002996:	e006      	b.n	80029a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d1e9      	bne.n	800297a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d003      	beq.n	80029bc <I2C_IsErrorOccurred+0xe0>
 80029b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0aa      	beq.n	8002912 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2220      	movs	r2, #32
 80029ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01c      	beq.n	8002a8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff fdaf 	bl	80025b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <I2C_IsErrorOccurred+0x1bc>)
 8002a62:	400b      	ands	r3, r1
 8002a64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3728      	adds	r7, #40	@ 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	fe00e800 	.word	0xfe00e800

08002a9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ab4:	7a7b      	ldrb	r3, [r7, #9]
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002abc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002aca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	0d5b      	lsrs	r3, r3, #21
 8002ad6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ada:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <I2C_TransferConfig+0x60>)
 8002adc:	430b      	orrs	r3, r1
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	ea02 0103 	and.w	r1, r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	03ff63ff 	.word	0x03ff63ff

08002b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d138      	bne.n	8002b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e032      	b.n	8002b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	@ 0x24
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d139      	bne.n	8002c20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e033      	b.n	8002c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2224      	movs	r2, #36	@ 0x24
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002be8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f000 bc28 	b.w	8003494 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c44:	4b94      	ldr	r3, [pc, #592]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 0318 	and.w	r3, r3, #24
 8002c4c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002c4e:	4b92      	ldr	r3, [pc, #584]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05b      	beq.n	8002d1c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x46>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b18      	cmp	r3, #24
 8002c6e:	d114      	bne.n	8002c9a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d111      	bne.n	8002c9a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f000 bc08 	b.w	8003494 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002c84:	4b84      	ldr	r3, [pc, #528]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	4981      	ldr	r1, [pc, #516]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002c98:	e040      	b.n	8002d1c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d023      	beq.n	8002cea <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe ff15 	bl	8001adc <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002cb6:	f7fe ff11 	bl	8001adc <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e3e5      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002cc8:	4b73      	ldr	r3, [pc, #460]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002cd4:	4b70      	ldr	r3, [pc, #448]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	496d      	ldr	r1, [pc, #436]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	618b      	str	r3, [r1, #24]
 8002ce8:	e018      	b.n	8002d1c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cea:	4b6b      	ldr	r3, [pc, #428]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6a      	ldr	r2, [pc, #424]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fef1 	bl	8001adc <HAL_GetTick>
 8002cfa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002cfe:	f7fe feed 	bl	8001adc <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e3c1      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002d10:	4b61      	ldr	r3, [pc, #388]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f0      	bne.n	8002cfe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80a0 	beq.w	8002e6a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_OscConfig+0x10c>
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f040 8092 	bne.w	8002e6a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e3a4      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x132>
 8002d54:	4b50      	ldr	r3, [pc, #320]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4f      	ldr	r2, [pc, #316]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e058      	b.n	8002e14 <HAL_RCC_OscConfig+0x1e4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d112      	bne.n	8002d90 <HAL_RCC_OscConfig+0x160>
 8002d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a47      	ldr	r2, [pc, #284]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b45      	ldr	r3, [pc, #276]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a44      	ldr	r2, [pc, #272]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e041      	b.n	8002e14 <HAL_RCC_OscConfig+0x1e4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d98:	d112      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x190>
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b3c      	ldr	r3, [pc, #240]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002dac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b39      	ldr	r3, [pc, #228]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a38      	ldr	r2, [pc, #224]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e029      	b.n	8002e14 <HAL_RCC_OscConfig+0x1e4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002dc8:	d112      	bne.n	8002df0 <HAL_RCC_OscConfig+0x1c0>
 8002dca:	4b33      	ldr	r3, [pc, #204]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a32      	ldr	r2, [pc, #200]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b30      	ldr	r3, [pc, #192]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2f      	ldr	r2, [pc, #188]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002ddc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e011      	b.n	8002e14 <HAL_RCC_OscConfig+0x1e4>
 8002df0:	4b29      	ldr	r3, [pc, #164]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a28      	ldr	r2, [pc, #160]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a25      	ldr	r2, [pc, #148]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b23      	ldr	r3, [pc, #140]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a22      	ldr	r2, [pc, #136]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002e0e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fe5e 	bl	8001adc <HAL_GetTick>
 8002e20:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fe5a 	bl	8001adc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	@ 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e32e      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1f4>
 8002e42:	e012      	b.n	8002e6a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fe4a 	bl	8001adc <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fe46 	bl	8001adc <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	@ 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e31a      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e98 <HAL_RCC_OscConfig+0x268>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 809a 	beq.w	8002fac <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x25a>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b18      	cmp	r3, #24
 8002e82:	d149      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d146      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e2fe      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
 8002e96:	bf00      	nop
 8002e98:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002ea2:	4b9a      	ldr	r3, [pc, #616]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0218 	and.w	r2, r3, #24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d014      	beq.n	8002edc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002eb2:	4b96      	ldr	r3, [pc, #600]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0218 	bic.w	r2, r3, #24
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	4993      	ldr	r1, [pc, #588]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002ec4:	f000 fdd0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ec8:	4b91      	ldr	r3, [pc, #580]	@ (8003110 <HAL_RCC_OscConfig+0x4e0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fd7b 	bl	80019c8 <HAL_InitTick>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e2db      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fdfe 	bl	8001adc <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fdfa 	bl	8001adc <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e2ce      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef6:	4b85      	ldr	r3, [pc, #532]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002f02:	4b82      	ldr	r3, [pc, #520]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	497e      	ldr	r1, [pc, #504]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002f16:	e049      	b.n	8002fac <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02c      	beq.n	8002f7a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002f20:	4b7a      	ldr	r3, [pc, #488]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 0218 	bic.w	r2, r3, #24
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	4977      	ldr	r1, [pc, #476]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002f32:	4b76      	ldr	r3, [pc, #472]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a75      	ldr	r2, [pc, #468]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fdcd 	bl	8001adc <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f46:	f7fe fdc9 	bl	8001adc <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e29d      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f58:	4b6c      	ldr	r3, [pc, #432]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002f64:	4b69      	ldr	r3, [pc, #420]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	4966      	ldr	r1, [pc, #408]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]
 8002f78:	e018      	b.n	8002fac <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b64      	ldr	r3, [pc, #400]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a63      	ldr	r2, [pc, #396]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fda9 	bl	8001adc <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fda5 	bl	8001adc <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e279      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d03c      	beq.n	8003032 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc0:	4b52      	ldr	r3, [pc, #328]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fc6:	4a51      	ldr	r2, [pc, #324]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002fc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fd84 	bl	8001adc <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe fd80 	bl	8001adc <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e254      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002fea:	4b48      	ldr	r3, [pc, #288]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x3a8>
 8002ff8:	e01b      	b.n	8003032 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffa:	4b44      	ldr	r3, [pc, #272]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8002ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003000:	4a42      	ldr	r2, [pc, #264]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8003002:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003006:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fe fd67 	bl	8001adc <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003012:	f7fe fd63 	bl	8001adc <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e237      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003024:	4b39      	ldr	r3, [pc, #228]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8003026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800302a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ef      	bne.n	8003012 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80d2 	beq.w	80031e4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003040:	4b34      	ldr	r3, [pc, #208]	@ (8003114 <HAL_RCC_OscConfig+0x4e4>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d118      	bne.n	800307e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_OscConfig+0x4e4>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	4a30      	ldr	r2, [pc, #192]	@ (8003114 <HAL_RCC_OscConfig+0x4e4>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003058:	f7fe fd40 	bl	8001adc <HAL_GetTick>
 800305c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003060:	f7fe fd3c 	bl	8001adc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e210      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003072:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <HAL_RCC_OscConfig+0x4e4>)
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x468>
 8003086:	4b21      	ldr	r3, [pc, #132]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8003088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800308c:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003096:	e074      	b.n	8003182 <HAL_RCC_OscConfig+0x552>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d118      	bne.n	80030d2 <HAL_RCC_OscConfig+0x4a2>
 80030a0:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030a6:	4a19      	ldr	r2, [pc, #100]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030b0:	4b16      	ldr	r3, [pc, #88]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030b6:	4a15      	ldr	r2, [pc, #84]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030c0:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030c6:	4a11      	ldr	r2, [pc, #68]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030c8:	f023 0304 	bic.w	r3, r3, #4
 80030cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030d0:	e057      	b.n	8003182 <HAL_RCC_OscConfig+0x552>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d11e      	bne.n	8003118 <HAL_RCC_OscConfig+0x4e8>
 80030da:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030e0:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030ea:	4b08      	ldr	r3, [pc, #32]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030f0:	4a06      	ldr	r2, [pc, #24]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030fa:	4b04      	ldr	r3, [pc, #16]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 80030fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003100:	4a02      	ldr	r2, [pc, #8]	@ (800310c <HAL_RCC_OscConfig+0x4dc>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x552>
 800310c:	44020c00 	.word	0x44020c00
 8003110:	20000004 	.word	0x20000004
 8003114:	44020800 	.word	0x44020800
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b85      	cmp	r3, #133	@ 0x85
 800311e:	d118      	bne.n	8003152 <HAL_RCC_OscConfig+0x522>
 8003120:	4ba2      	ldr	r3, [pc, #648]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003126:	4aa1      	ldr	r2, [pc, #644]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003130:	4b9e      	ldr	r3, [pc, #632]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003136:	4a9d      	ldr	r2, [pc, #628]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800313c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003140:	4b9a      	ldr	r3, [pc, #616]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003146:	4a99      	ldr	r2, [pc, #612]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003150:	e017      	b.n	8003182 <HAL_RCC_OscConfig+0x552>
 8003152:	4b96      	ldr	r3, [pc, #600]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003158:	4a94      	ldr	r2, [pc, #592]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003162:	4b92      	ldr	r3, [pc, #584]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003168:	4a90      	ldr	r2, [pc, #576]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003172:	4b8e      	ldr	r3, [pc, #568]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003178:	4a8c      	ldr	r2, [pc, #560]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800317a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800317e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fe fca7 	bl	8001adc <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fca3 	bl	8001adc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e175      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a8:	4b80      	ldr	r3, [pc, #512]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80031aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ed      	beq.n	8003192 <HAL_RCC_OscConfig+0x562>
 80031b6:	e015      	b.n	80031e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe fc90 	bl	8001adc <HAL_GetTick>
 80031bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe fc8c 	bl	8001adc <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e15e      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d6:	4b75      	ldr	r3, [pc, #468]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80031d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ed      	bne.n	80031c0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d036      	beq.n	800325e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d019      	beq.n	800322c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031f8:	4b6c      	ldr	r3, [pc, #432]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6b      	ldr	r2, [pc, #428]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80031fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003202:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe fc6a 	bl	8001adc <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800320c:	f7fe fc66 	bl	8001adc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e13a      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800321e:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x5dc>
 800322a:	e018      	b.n	800325e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800322c:	4b5f      	ldr	r3, [pc, #380]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5e      	ldr	r2, [pc, #376]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe fc50 	bl	8001adc <HAL_GetTick>
 800323c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003240:	f7fe fc4c 	bl	8001adc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e120      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003252:	4b56      	ldr	r3, [pc, #344]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8115 	beq.w	8003492 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b18      	cmp	r3, #24
 800326c:	f000 80af 	beq.w	80033ce <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	2b02      	cmp	r3, #2
 8003276:	f040 8086 	bne.w	8003386 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800327a:	4b4c      	ldr	r3, [pc, #304]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4b      	ldr	r2, [pc, #300]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003280:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe fc29 	bl	8001adc <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800328e:	f7fe fc25 	bl	8001adc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0f9      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032a0:	4b42      	ldr	r3, [pc, #264]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80032ac:	4b3f      	ldr	r3, [pc, #252]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032b4:	f023 0303 	bic.w	r3, r3, #3
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032c0:	0212      	lsls	r2, r2, #8
 80032c2:	430a      	orrs	r2, r1
 80032c4:	4939      	ldr	r1, [pc, #228]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	3b01      	subs	r3, #1
 80032da:	025b      	lsls	r3, r3, #9
 80032dc:	b29b      	uxth	r3, r3
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	3b01      	subs	r3, #1
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80032fa:	492c      	ldr	r1, [pc, #176]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003300:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003306:	f023 0310 	bic.w	r3, r3, #16
 800330a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003310:	4a26      	ldr	r2, [pc, #152]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003316:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	4a24      	ldr	r2, [pc, #144]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800331c:	f043 0310 	orr.w	r3, r3, #16
 8003320:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003322:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	f023 020c 	bic.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	491f      	ldr	r1, [pc, #124]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003334:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	f023 0220 	bic.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	491a      	ldr	r1, [pc, #104]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003346:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334a:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003352:	4b16      	ldr	r3, [pc, #88]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800335c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fbbd 	bl	8001adc <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003366:	f7fe fbb9 	bl	8001adc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e08d      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003378:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x736>
 8003384:	e085      	b.n	8003492 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003386:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a08      	ldr	r2, [pc, #32]	@ (80033ac <HAL_RCC_OscConfig+0x77c>)
 800338c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe fba3 	bl	8001adc <HAL_GetTick>
 8003396:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800339a:	f7fe fb9f 	bl	8001adc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d903      	bls.n	80033b0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e073      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
 80033ac:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033b0:	4b3a      	ldr	r3, [pc, #232]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ee      	bne.n	800339a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80033bc:	4b37      	ldr	r3, [pc, #220]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	4a36      	ldr	r2, [pc, #216]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 80033c2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	6293      	str	r3, [r2, #40]	@ 0x28
 80033cc:	e061      	b.n	8003492 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80033ce:	4b33      	ldr	r3, [pc, #204]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033d4:	4b31      	ldr	r3, [pc, #196]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 80033d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d031      	beq.n	8003446 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f003 0203 	and.w	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d12a      	bne.n	8003446 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d122      	bne.n	8003446 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d11a      	bne.n	8003446 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	0a5b      	lsrs	r3, r3, #9
 8003414:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d111      	bne.n	8003446 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d108      	bne.n	8003446 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	0e1b      	lsrs	r3, r3, #24
 8003438:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e024      	b.n	8003494 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800344a:	4b14      	ldr	r3, [pc, #80]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003458:	429a      	cmp	r2, r3
 800345a:	d01a      	beq.n	8003492 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800345c:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	4a0e      	ldr	r2, [pc, #56]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 8003462:	f023 0310 	bic.w	r3, r3, #16
 8003466:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fb38 	bl	8001adc <HAL_GetTick>
 800346c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800346e:	bf00      	nop
 8003470:	f7fe fb34 	bl	8001adc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4293      	cmp	r3, r2
 800347a:	d0f9      	beq.n	8003470 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003480:	4a06      	ldr	r2, [pc, #24]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003486:	4b05      	ldr	r3, [pc, #20]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	4a04      	ldr	r2, [pc, #16]	@ (800349c <HAL_RCC_OscConfig+0x86c>)
 800348c:	f043 0310 	orr.w	r3, r3, #16
 8003490:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	44020c00 	.word	0x44020c00

080034a0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e19e      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b83      	ldr	r3, [pc, #524]	@ (80036c4 <HAL_RCC_ClockConfig+0x224>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b80      	ldr	r3, [pc, #512]	@ (80036c4 <HAL_RCC_ClockConfig+0x224>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 020f 	bic.w	r2, r3, #15
 80034ca:	497e      	ldr	r1, [pc, #504]	@ (80036c4 <HAL_RCC_ClockConfig+0x224>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b7c      	ldr	r3, [pc, #496]	@ (80036c4 <HAL_RCC_ClockConfig+0x224>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e186      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d012      	beq.n	8003516 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	4b74      	ldr	r3, [pc, #464]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034fe:	429a      	cmp	r2, r3
 8003500:	d909      	bls.n	8003516 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003502:	4b71      	ldr	r3, [pc, #452]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	496d      	ldr	r1, [pc, #436]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003512:	4313      	orrs	r3, r2
 8003514:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	4b68      	ldr	r3, [pc, #416]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003530:	429a      	cmp	r2, r3
 8003532:	d909      	bls.n	8003548 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003534:	4b64      	ldr	r3, [pc, #400]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4961      	ldr	r1, [pc, #388]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003544:	4313      	orrs	r3, r2
 8003546:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003560:	429a      	cmp	r2, r3
 8003562:	d908      	bls.n	8003576 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003564:	4b58      	ldr	r3, [pc, #352]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4955      	ldr	r1, [pc, #340]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003572:	4313      	orrs	r3, r2
 8003574:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d010      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	4b50      	ldr	r3, [pc, #320]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	429a      	cmp	r2, r3
 8003590:	d908      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003592:	4b4d      	ldr	r3, [pc, #308]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	494a      	ldr	r1, [pc, #296]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8093 	beq.w	80036d8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80035ba:	4b43      	ldr	r3, [pc, #268]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d121      	bne.n	800360a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e113      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d2:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d115      	bne.n	800360a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e107      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80035ea:	4b37      	ldr	r3, [pc, #220]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0fb      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fa:	4b33      	ldr	r3, [pc, #204]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0f3      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800360a:	4b2f      	ldr	r3, [pc, #188]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	492c      	ldr	r1, [pc, #176]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003618:	4313      	orrs	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fe fa5e 	bl	8001adc <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d112      	bne.n	8003650 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fa56 	bl	8001adc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0d7      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003642:	4b21      	ldr	r3, [pc, #132]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0318 	and.w	r3, r3, #24
 800364a:	2b18      	cmp	r3, #24
 800364c:	d1ee      	bne.n	800362c <HAL_RCC_ClockConfig+0x18c>
 800364e:	e043      	b.n	80036d8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d112      	bne.n	800367e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800365a:	f7fe fa3f 	bl	8001adc <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0c0      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003670:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f003 0318 	and.w	r3, r3, #24
 8003678:	2b10      	cmp	r3, #16
 800367a:	d1ee      	bne.n	800365a <HAL_RCC_ClockConfig+0x1ba>
 800367c:	e02c      	b.n	80036d8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d122      	bne.n	80036cc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fe fa28 	bl	8001adc <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0a9      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800369e:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <HAL_RCC_ClockConfig+0x228>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 0318 	and.w	r3, r3, #24
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d1ee      	bne.n	8003688 <HAL_RCC_ClockConfig+0x1e8>
 80036aa:	e015      	b.n	80036d8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe fa16 	bl	8001adc <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d906      	bls.n	80036cc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e097      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
 80036c2:	bf00      	nop
 80036c4:	40022000 	.word	0x40022000
 80036c8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036cc:	4b4b      	ldr	r3, [pc, #300]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 0318 	and.w	r3, r3, #24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e9      	bne.n	80036ac <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	4b44      	ldr	r3, [pc, #272]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d208      	bcs.n	8003706 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80036f4:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f023 020f 	bic.w	r2, r3, #15
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	493e      	ldr	r1, [pc, #248]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003706:	4b3e      	ldr	r3, [pc, #248]	@ (8003800 <HAL_RCC_ClockConfig+0x360>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d210      	bcs.n	8003736 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003714:	4b3a      	ldr	r3, [pc, #232]	@ (8003800 <HAL_RCC_ClockConfig+0x360>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 020f 	bic.w	r2, r3, #15
 800371c:	4938      	ldr	r1, [pc, #224]	@ (8003800 <HAL_RCC_ClockConfig+0x360>)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003724:	4b36      	ldr	r3, [pc, #216]	@ (8003800 <HAL_RCC_ClockConfig+0x360>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e05d      	b.n	80037f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800374e:	429a      	cmp	r2, r3
 8003750:	d208      	bcs.n	8003764 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003752:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4927      	ldr	r1, [pc, #156]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 8003760:	4313      	orrs	r3, r2
 8003762:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d012      	beq.n	8003796 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800377e:	429a      	cmp	r2, r3
 8003780:	d209      	bcs.n	8003796 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003782:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	491a      	ldr	r1, [pc, #104]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d209      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	490e      	ldr	r1, [pc, #56]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80037c8:	f000 f822 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_ClockConfig+0x35c>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	490b      	ldr	r1, [pc, #44]	@ (8003804 <HAL_RCC_ClockConfig+0x364>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x368>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037e2:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <HAL_RCC_ClockConfig+0x36c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe f8ee 	bl	80019c8 <HAL_InitTick>
 80037ec:	4603      	mov	r3, r0
 80037ee:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80037f0:	7afb      	ldrb	r3, [r7, #11]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	44020c00 	.word	0x44020c00
 8003800:	40022000 	.word	0x40022000
 8003804:	0800df0c 	.word	0x0800df0c
 8003808:	20000000 	.word	0x20000000
 800380c:	20000004 	.word	0x20000004

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	@ 0x24
 8003814:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003816:	4b8c      	ldr	r3, [pc, #560]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0318 	and.w	r3, r3, #24
 800381e:	2b08      	cmp	r3, #8
 8003820:	d102      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003822:	4b8a      	ldr	r3, [pc, #552]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x23c>)
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e107      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003828:	4b87      	ldr	r3, [pc, #540]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 0318 	and.w	r3, r3, #24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d112      	bne.n	800385a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003834:	4b84      	ldr	r3, [pc, #528]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003840:	4b81      	ldr	r3, [pc, #516]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	08db      	lsrs	r3, r3, #3
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	4a81      	ldr	r2, [pc, #516]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x240>)
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e0f1      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003854:	4b7e      	ldr	r3, [pc, #504]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x240>)
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e0ee      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800385a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0318 	and.w	r3, r3, #24
 8003862:	2b10      	cmp	r3, #16
 8003864:	d102      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003866:	4b7b      	ldr	r3, [pc, #492]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x244>)
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e0e5      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386c:	4b76      	ldr	r3, [pc, #472]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f003 0318 	and.w	r3, r3, #24
 8003874:	2b18      	cmp	r3, #24
 8003876:	f040 80dd 	bne.w	8003a34 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800387a:	4b73      	ldr	r3, [pc, #460]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003884:	4b70      	ldr	r3, [pc, #448]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800388e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003890:	4b6d      	ldr	r3, [pc, #436]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800389c:	4b6a      	ldr	r3, [pc, #424]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 800389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80b7 	beq.w	8003a2e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0xbe>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d056      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x16a>
 80038cc:	e077      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80038ce:	4b5e      	ldr	r3, [pc, #376]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02d      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038da:	4b5b      	ldr	r3, [pc, #364]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	08db      	lsrs	r3, r3, #3
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x240>)
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003904:	4b50      	ldr	r3, [pc, #320]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003914:	ed97 6a02 	vldr	s12, [r7, #8]
 8003918:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x248>
 800391c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003920:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003928:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800392c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003930:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003934:	e065      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003940:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003a5c <HAL_RCC_GetSysClockFreq+0x24c>
 8003944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003948:	4b3f      	ldr	r3, [pc, #252]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 800394a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003958:	ed97 6a02 	vldr	s12, [r7, #8]
 800395c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x248>
 8003960:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003964:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003968:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800396c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003974:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003978:	e043      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003984:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003a60 <HAL_RCC_GetSysClockFreq+0x250>
 8003988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 800398e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800399c:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x248>
 80039a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80039bc:	e021      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a64 <HAL_RCC_GetSysClockFreq+0x254>
 80039cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 80039d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x248>
 80039e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003a00:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003a02:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a06:	0a5b      	lsrs	r3, r3, #9
 8003a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a1a:	edd7 6a06 	vldr	s13, [r7, #24]
 8003a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a26:	ee17 3a90 	vmov	r3, s15
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e004      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e001      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003a34:	4b06      	ldr	r3, [pc, #24]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x240>)
 8003a36:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003a38:	69fb      	ldr	r3, [r7, #28]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	@ 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	44020c00 	.word	0x44020c00
 8003a4c:	003d0900 	.word	0x003d0900
 8003a50:	03d09000 	.word	0x03d09000
 8003a54:	017d7840 	.word	0x017d7840
 8003a58:	46000000 	.word	0x46000000
 8003a5c:	4c742400 	.word	0x4c742400
 8003a60:	4bbebc20 	.word	0x4bbebc20
 8003a64:	4a742400 	.word	0x4a742400

08003a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a6c:	f7ff fed0 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003a76:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a7a:	4907      	ldr	r1, [pc, #28]	@ (8003a98 <HAL_RCC_GetHCLKFreq+0x30>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003a7e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a05      	ldr	r2, [pc, #20]	@ (8003a9c <HAL_RCC_GetHCLKFreq+0x34>)
 8003a88:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003a8a:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <HAL_RCC_GetHCLKFreq+0x34>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	44020c00 	.word	0x44020c00
 8003a98:	0800df0c 	.word	0x0800df0c
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003aa4:	f7ff ffe0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4904      	ldr	r1, [pc, #16]	@ (8003ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	44020c00 	.word	0x44020c00
 8003ac8:	0800df1c 	.word	0x0800df1c

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003ad0:	f7ff ffca 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4904      	ldr	r1, [pc, #16]	@ (8003af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	44020c00 	.word	0x44020c00
 8003af4:	0800df1c 	.word	0x0800df1c

08003af8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003afc:	f7ff ffb4 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	0b1b      	lsrs	r3, r3, #12
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4904      	ldr	r1, [pc, #16]	@ (8003b20 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	44020c00 	.word	0x44020c00
 8003b20:	0800df1c 	.word	0x0800df1c

08003b24 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b0d8      	sub	sp, #352	@ 0x160
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003b48:	2500      	movs	r5, #0
 8003b4a:	ea54 0305 	orrs.w	r3, r4, r5
 8003b4e:	d00b      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003b50:	4bcd      	ldr	r3, [pc, #820]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b56:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	4ac9      	ldr	r2, [pc, #804]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b62:	430b      	orrs	r3, r1
 8003b64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f002 0801 	and.w	r8, r2, #1
 8003b74:	f04f 0900 	mov.w	r9, #0
 8003b78:	ea58 0309 	orrs.w	r3, r8, r9
 8003b7c:	d042      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d823      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003b88:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bd9 	.word	0x08003bd9
 8003b94:	08003ba9 	.word	0x08003ba9
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bd9 	.word	0x08003bd9
 8003ba0:	08003bd9 	.word	0x08003bd9
 8003ba4:	08003bd9 	.word	0x08003bd9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bac:	3308      	adds	r3, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 feda 	bl	8008968 <RCCEx_PLL2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003bba:	e00e      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bc0:	3330      	adds	r3, #48	@ 0x30
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f004 ff68 	bl	8008a98 <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003bce:	e004      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003be2:	4ba9      	ldr	r3, [pc, #676]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003be8:	f023 0107 	bic.w	r1, r3, #7
 8003bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf2:	4aa5      	ldr	r2, [pc, #660]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003bfa:	e003      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c00:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f002 0a02 	and.w	sl, r2, #2
 8003c10:	f04f 0b00 	mov.w	fp, #0
 8003c14:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c18:	f000 8088 	beq.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c22:	2b28      	cmp	r3, #40	@ 0x28
 8003c24:	d868      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003c26:	a201      	add	r2, pc, #4	@ (adr r2, 8003c2c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003d01 	.word	0x08003d01
 8003c30:	08003cf9 	.word	0x08003cf9
 8003c34:	08003cf9 	.word	0x08003cf9
 8003c38:	08003cf9 	.word	0x08003cf9
 8003c3c:	08003cf9 	.word	0x08003cf9
 8003c40:	08003cf9 	.word	0x08003cf9
 8003c44:	08003cf9 	.word	0x08003cf9
 8003c48:	08003cf9 	.word	0x08003cf9
 8003c4c:	08003cd1 	.word	0x08003cd1
 8003c50:	08003cf9 	.word	0x08003cf9
 8003c54:	08003cf9 	.word	0x08003cf9
 8003c58:	08003cf9 	.word	0x08003cf9
 8003c5c:	08003cf9 	.word	0x08003cf9
 8003c60:	08003cf9 	.word	0x08003cf9
 8003c64:	08003cf9 	.word	0x08003cf9
 8003c68:	08003cf9 	.word	0x08003cf9
 8003c6c:	08003ce5 	.word	0x08003ce5
 8003c70:	08003cf9 	.word	0x08003cf9
 8003c74:	08003cf9 	.word	0x08003cf9
 8003c78:	08003cf9 	.word	0x08003cf9
 8003c7c:	08003cf9 	.word	0x08003cf9
 8003c80:	08003cf9 	.word	0x08003cf9
 8003c84:	08003cf9 	.word	0x08003cf9
 8003c88:	08003cf9 	.word	0x08003cf9
 8003c8c:	08003d01 	.word	0x08003d01
 8003c90:	08003cf9 	.word	0x08003cf9
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003cf9 	.word	0x08003cf9
 8003c9c:	08003cf9 	.word	0x08003cf9
 8003ca0:	08003cf9 	.word	0x08003cf9
 8003ca4:	08003cf9 	.word	0x08003cf9
 8003ca8:	08003cf9 	.word	0x08003cf9
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003cf9 	.word	0x08003cf9
 8003cb4:	08003cf9 	.word	0x08003cf9
 8003cb8:	08003cf9 	.word	0x08003cf9
 8003cbc:	08003cf9 	.word	0x08003cf9
 8003cc0:	08003cf9 	.word	0x08003cf9
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003d01 	.word	0x08003d01
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 fe46 	bl	8008968 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003ce2:	e00e      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce8:	3330      	adds	r3, #48	@ 0x30
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 fed4 	bl	8008a98 <RCCEx_PLL3_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003cf6:	e004      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d10:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 0304 	and.w	r3, r2, #4
 8003d38:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003d42:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8003d46:	460b      	mov	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	d04e      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d52:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d56:	d02c      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003d58:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d5c:	d825      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d62:	d028      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d68:	d81f      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d6c:	d025      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003d6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d70:	d81b      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d72:	2b80      	cmp	r3, #128	@ 0x80
 8003d74:	d00f      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003d76:	2b80      	cmp	r3, #128	@ 0x80
 8003d78:	d817      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01f      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d113      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d86:	3308      	adds	r3, #8
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 fded 	bl	8008968 <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003d94:	e014      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d9a:	3330      	adds	r3, #48	@ 0x30
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f004 fe7b 	bl	8008a98 <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003db2:	bf00      	nop
 8003db4:	e004      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10c      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dce:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003de6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f002 0308 	and.w	r3, r2, #8
 8003df6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003e00:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003e04:	460b      	mov	r3, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	d056      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e10:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003e14:	d031      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003e16:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003e1a:	d82a      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003e1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e20:	d02d      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003e22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e26:	d824      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003e28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e2c:	d029      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003e2e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e32:	d81e      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e38:	d011      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3e:	d818      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d023      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e48:	d113      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e4e:	3308      	adds	r3, #8
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fd89 	bl	8008968 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003e5c:	e017      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e62:	3330      	adds	r3, #48	@ 0x30
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 fe17 	bl	8008a98 <RCCEx_PLL3_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003e70:	e00d      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e78:	e009      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003e7a:	bf00      	nop
 8003e7c:	e007      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003e7e:	bf00      	nop
 8003e80:	e005      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003e82:	bf00      	nop
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003e86:	bf00      	nop
 8003e88:	44020c00 	.word	0x44020c00
        break;
 8003e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003e96:	4bbb      	ldr	r3, [pc, #748]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e9c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ea6:	4ab7      	ldr	r2, [pc, #732]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003eb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f002 0310 	and.w	r3, r2, #16
 8003ec4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003ece:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	d053      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ede:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ee2:	d031      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003ee4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ee8:	d82a      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003eea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eee:	d02d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ef4:	d824      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ef6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003efa:	d029      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003efc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f00:	d81e      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f06:	d011      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0c:	d818      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f16:	d113      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fd22 	bl	8008968 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003f2a:	e014      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f30:	3330      	adds	r3, #48	@ 0x30
 8003f32:	4618      	mov	r0, r3
 8003f34:	f004 fdb0 	bl	8008a98 <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f46:	e006      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003f5e:	4b89      	ldr	r3, [pc, #548]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6e:	4a85      	ldr	r2, [pc, #532]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f76:	e003      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f002 0320 	and.w	r3, r2, #32
 8003f8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003f96:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d053      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003faa:	d031      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003fac:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003fb0:	d82a      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fb6:	d02d      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fbc:	d824      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003fbe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003fc2:	d029      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003fc4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003fc8:	d81e      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fce:	d011      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd4:	d818      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d020      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fde:	d113      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f004 fcbe 	bl	8008968 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003ff2:	e014      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ff8:	3330      	adds	r3, #48	@ 0x30
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fd4c 	bl	8008a98 <RCCEx_PLL3_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004006:	e00a      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800400e:	e006      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004010:	bf00      	nop
 8004012:	e004      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800401c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10c      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004026:	4b57      	ldr	r3, [pc, #348]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800402c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004030:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	4a53      	ldr	r2, [pc, #332]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004038:	430b      	orrs	r3, r1
 800403a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800403e:	e003      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004044:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004054:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800405e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d053      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800406c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004072:	d031      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004074:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004078:	d82a      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800407a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407e:	d02d      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004084:	d824      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004086:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800408a:	d029      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800408c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004090:	d81e      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004092:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004096:	d011      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004098:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800409c:	d818      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d020      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040a6:	d113      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ac:	3308      	adds	r3, #8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 fc5a 	bl	8008968 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80040ba:	e014      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040c0:	3330      	adds	r3, #48	@ 0x30
 80040c2:	4618      	mov	r0, r3
 80040c4:	f004 fce8 	bl	8008a98 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80040ce:	e00a      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80040d6:	e006      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80040d8:	bf00      	nop
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10c      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80040ee:	4b25      	ldr	r3, [pc, #148]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80040f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040f4:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80040f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fe:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004100:	430b      	orrs	r3, r1
 8004102:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800410c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800411c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004126:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	d055      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004136:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800413a:	d033      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800413c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004140:	d82c      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004146:	d02f      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004148:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800414c:	d826      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800414e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004152:	d02b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004154:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004158:	d820      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800415a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800415e:	d013      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004164:	d81a      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d022      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800416a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800416e:	d115      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004174:	3308      	adds	r3, #8
 8004176:	4618      	mov	r0, r3
 8004178:	f004 fbf6 	bl	8008968 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004182:	e016      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004184:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800418c:	3330      	adds	r3, #48	@ 0x30
 800418e:	4618      	mov	r0, r3
 8004190:	f004 fc82 	bl	8008a98 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800419a:	e00a      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041a2:	e006      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80041a4:	bf00      	nop
 80041a6:	e004      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80041b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80041ba:	4bbb      	ldr	r3, [pc, #748]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80041bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041c0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80041c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ca:	4ab7      	ldr	r2, [pc, #732]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80041dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80041e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80041f2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d053      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80041fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004202:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004206:	d031      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004208:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800420c:	d82a      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800420e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004212:	d02d      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004218:	d824      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800421a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800421e:	d029      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004220:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004224:	d81e      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800422a:	d011      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800422c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004230:	d818      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d020      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800423a:	d113      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800423c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004240:	3308      	adds	r3, #8
 8004242:	4618      	mov	r0, r3
 8004244:	f004 fb90 	bl	8008968 <RCCEx_PLL2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800424e:	e014      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004250:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004254:	3330      	adds	r3, #48	@ 0x30
 8004256:	4618      	mov	r0, r3
 8004258:	f004 fc1e 	bl	8008a98 <RCCEx_PLL3_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004262:	e00a      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800426a:	e006      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800426c:	bf00      	nop
 800426e:	e004      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004270:	bf00      	nop
 8004272:	e002      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004282:	4b89      	ldr	r3, [pc, #548]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004288:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800428c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004292:	4a85      	ldr	r2, [pc, #532]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004294:	430b      	orrs	r3, r1
 8004296:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80042a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80042b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80042ba:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80042be:	460b      	mov	r3, r1
 80042c0:	4313      	orrs	r3, r2
 80042c2:	d055      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80042c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042cc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80042d0:	d031      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80042d2:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80042d6:	d82a      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80042d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042dc:	d02d      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x816>
 80042de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042e2:	d824      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80042e4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80042e8:	d029      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80042ea:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80042ee:	d81e      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80042f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042f4:	d011      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042fa:	d818      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004304:	d113      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004306:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800430a:	3308      	adds	r3, #8
 800430c:	4618      	mov	r0, r3
 800430e:	f004 fb2b 	bl	8008968 <RCCEx_PLL2_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004318:	e014      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800431a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800431e:	3330      	adds	r3, #48	@ 0x30
 8004320:	4618      	mov	r0, r3
 8004322:	f004 fbb9 	bl	8008a98 <RCCEx_PLL3_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800432c:	e00a      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004334:	e006      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004336:	bf00      	nop
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800433a:	bf00      	nop
 800433c:	e002      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004344:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800434c:	4b56      	ldr	r3, [pc, #344]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800434e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004352:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8004356:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800435a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800435e:	4a52      	ldr	r2, [pc, #328]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004360:	430b      	orrs	r3, r1
 8004362:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004366:	e003      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800436c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004370:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800437c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004386:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800438a:	460b      	mov	r3, r1
 800438c:	4313      	orrs	r3, r2
 800438e:	d044      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004398:	2b05      	cmp	r3, #5
 800439a:	d823      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800439c:	a201      	add	r2, pc, #4	@ (adr r2, 80043a4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043ed 	.word	0x080043ed
 80043a8:	080043bd 	.word	0x080043bd
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043ed 	.word	0x080043ed
 80043b4:	080043ed 	.word	0x080043ed
 80043b8:	080043ed 	.word	0x080043ed
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043c0:	3308      	adds	r3, #8
 80043c2:	4618      	mov	r0, r3
 80043c4:	f004 fad0 	bl	8008968 <RCCEx_PLL2_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80043ce:	e00e      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043d4:	3330      	adds	r3, #48	@ 0x30
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 fb5e 	bl	8008a98 <RCCEx_PLL3_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80043e2:	e004      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80043ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80043f6:	4b2c      	ldr	r3, [pc, #176]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80043f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80043fc:	f023 0107 	bic.w	r1, r3, #7
 8004400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004408:	4a27      	ldr	r2, [pc, #156]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800440a:	430b      	orrs	r3, r1
 800440c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004412:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004416:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800441a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004426:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004430:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004434:	460b      	mov	r3, r1
 8004436:	4313      	orrs	r3, r2
 8004438:	d04f      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800443a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	2b50      	cmp	r3, #80	@ 0x50
 8004444:	d029      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004446:	2b50      	cmp	r3, #80	@ 0x50
 8004448:	d823      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	d027      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	d81f      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004452:	2b30      	cmp	r3, #48	@ 0x30
 8004454:	d025      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004456:	2b30      	cmp	r3, #48	@ 0x30
 8004458:	d81b      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800445a:	2b20      	cmp	r3, #32
 800445c:	d00f      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800445e:	2b20      	cmp	r3, #32
 8004460:	d817      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d022      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004466:	2b10      	cmp	r3, #16
 8004468:	d113      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800446a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800446e:	3308      	adds	r3, #8
 8004470:	4618      	mov	r0, r3
 8004472:	f004 fa79 	bl	8008968 <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800447c:	e017      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800447e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004482:	3330      	adds	r3, #48	@ 0x30
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fb07 	bl	8008a98 <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004490:	e00d      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004498:	e009      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800449a:	bf00      	nop
 800449c:	e007      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800449e:	bf00      	nop
 80044a0:	e005      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80044a2:	bf00      	nop
 80044a4:	e003      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80044a6:	bf00      	nop
 80044a8:	44020c00 	.word	0x44020c00
        break;
 80044ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80044b6:	4baf      	ldr	r3, [pc, #700]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80044b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044bc:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80044c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	4aaa      	ldr	r2, [pc, #680]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80044ca:	430b      	orrs	r3, r1
 80044cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80044d0:	e003      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80044e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d055      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80044fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004502:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004506:	d031      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004508:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800450c:	d82a      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800450e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004512:	d02d      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004518:	d824      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800451a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800451e:	d029      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004520:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004524:	d81e      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800452a:	d011      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800452c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004530:	d818      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800453a:	d113      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800453c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004540:	3308      	adds	r3, #8
 8004542:	4618      	mov	r0, r3
 8004544:	f004 fa10 	bl	8008968 <RCCEx_PLL2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800454e:	e014      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004554:	3330      	adds	r3, #48	@ 0x30
 8004556:	4618      	mov	r0, r3
 8004558:	f004 fa9e 	bl	8008a98 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004562:	e00a      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800456a:	e006      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800456c:	bf00      	nop
 800456e:	e004      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004570:	bf00      	nop
 8004572:	e002      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004582:	4b7c      	ldr	r3, [pc, #496]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004588:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800458c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004594:	4a77      	ldr	r2, [pc, #476]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004596:	430b      	orrs	r3, r1
 8004598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80045b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80045bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d03d      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80045c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045d2:	d01b      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80045d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045d8:	d814      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80045da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045de:	d017      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80045e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045e4:	d80e      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80045ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ee:	d109      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045f4:	3330      	adds	r3, #48	@ 0x30
 80045f6:	4618      	mov	r0, r3
 80045f8:	f004 fa4e 	bl	8008a98 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004602:	e008      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800460a:	e004      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800461e:	4b55      	ldr	r3, [pc, #340]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004624:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004630:	4a50      	ldr	r2, [pc, #320]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004632:	430b      	orrs	r3, r1
 8004634:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004638:	e003      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800463e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004642:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800464e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004658:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800465c:	460b      	mov	r3, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	d03d      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004662:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800466e:	d01b      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004670:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004674:	d814      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004676:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800467a:	d017      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800467c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004680:	d80e      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d014      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004686:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800468a:	d109      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800468c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004690:	3330      	adds	r3, #48	@ 0x30
 8004692:	4618      	mov	r0, r3
 8004694:	f004 fa00 	bl	8008a98 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046a6:	e004      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80046a8:	bf00      	nop
 80046aa:	e002      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80046ac:	bf00      	nop
 80046ae:	e000      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80046b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80046ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80046bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046c0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80046c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046cc:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80046ce:	430b      	orrs	r3, r1
 80046d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80046ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80046f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d040      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80046fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004706:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800470a:	d01b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800470c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004710:	d814      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004716:	d017      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800471c:	d80e      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d014      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004726:	d109      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004728:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800472c:	3330      	adds	r3, #48	@ 0x30
 800472e:	4618      	mov	r0, r3
 8004730:	f004 f9b2 	bl	8008a98 <RCCEx_PLL3_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800473a:	e008      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800474c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004752:	2b00      	cmp	r3, #0
 8004754:	d110      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800475c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004768:	4a02      	ldr	r2, [pc, #8]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800476a:	430b      	orrs	r3, r1
 800476c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004772:	bf00      	nop
 8004774:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800477c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	2100      	movs	r1, #0
 800478a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800478e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004796:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800479a:	460b      	mov	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	d03d      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80047a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047ac:	d01b      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80047ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047b2:	d814      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80047b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047b8:	d017      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80047ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047be:	d80e      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d014      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80047c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047c8:	d109      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ce:	3330      	adds	r3, #48	@ 0x30
 80047d0:	4618      	mov	r0, r3
 80047d2:	f004 f961 	bl	8008a98 <RCCEx_PLL3_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80047dc:	e008      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047e4:	e004      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80047f8:	4bbe      	ldr	r3, [pc, #760]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80047fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047fe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800480a:	4aba      	ldr	r2, [pc, #744]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800480c:	430b      	orrs	r3, r1
 800480e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004818:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800481c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004828:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004832:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004836:	460b      	mov	r3, r1
 8004838:	4313      	orrs	r3, r2
 800483a:	d035      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800483c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004844:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004848:	d015      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800484a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800484e:	d80e      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d012      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004858:	d109      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800485a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800485e:	3330      	adds	r3, #48	@ 0x30
 8004860:	4618      	mov	r0, r3
 8004862:	f004 f919 	bl	8008a98 <RCCEx_PLL3_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800486c:	e006      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004874:	e002      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004876:	bf00      	nop
 8004878:	e000      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800487a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10d      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004884:	4b9b      	ldr	r3, [pc, #620]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004886:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800488a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800488e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004896:	4a97      	ldr	r2, [pc, #604]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004898:	430b      	orrs	r3, r1
 800489a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800489e:	e003      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	2100      	movs	r1, #0
 80048b2:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80048b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80048c8:	4b8a      	ldr	r3, [pc, #552]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4a89      	ldr	r2, [pc, #548]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80048ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048d2:	61d3      	str	r3, [r2, #28]
 80048d4:	4b87      	ldr	r3, [pc, #540]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80048d6:	69d9      	ldr	r1, [r3, #28]
 80048d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80048e0:	4a84      	ldr	r2, [pc, #528]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80048e2:	430b      	orrs	r3, r1
 80048e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80048f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80048fc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d055      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004906:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800490a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800490e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004912:	d031      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004914:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004918:	d82a      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491e:	d02d      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004924:	d824      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800492a:	d029      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800492c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004930:	d81e      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004936:	d011      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800493c:	d818      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d020      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004946:	d113      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800494c:	3308      	adds	r3, #8
 800494e:	4618      	mov	r0, r3
 8004950:	f004 f80a 	bl	8008968 <RCCEx_PLL2_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800495a:	e014      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800495c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004960:	3330      	adds	r3, #48	@ 0x30
 8004962:	4618      	mov	r0, r3
 8004964:	f004 f898 	bl	8008a98 <RCCEx_PLL3_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800496e:	e00a      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004976:	e006      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004978:	bf00      	nop
 800497a:	e004      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800497c:	bf00      	nop
 800497e:	e002      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004986:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10d      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800498e:	4b59      	ldr	r3, [pc, #356]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004990:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004994:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800499c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049a0:	4a54      	ldr	r2, [pc, #336]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049a2:	430b      	orrs	r3, r1
 80049a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80049a8:	e003      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80049be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4313      	orrs	r3, r2
 80049d0:	d055      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80049d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049de:	d031      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80049e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049e4:	d82a      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80049e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049ea:	d02d      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80049ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049f0:	d824      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80049f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049f6:	d029      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80049f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049fc:	d81e      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a02:	d011      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a08:	d818      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d020      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d113      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a18:	3308      	adds	r3, #8
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f003 ffa4 	bl	8008968 <RCCEx_PLL2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004a26:	e014      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a2c:	3330      	adds	r3, #48	@ 0x30
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f004 f832 	bl	8008a98 <RCCEx_PLL3_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a42:	e006      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004a44:	bf00      	nop
 8004a46:	e004      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004a48:	bf00      	nop
 8004a4a:	e002      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004a4c:	bf00      	nop
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004a5a:	4b26      	ldr	r3, [pc, #152]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a6c:	4a21      	ldr	r2, [pc, #132]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	2100      	movs	r1, #0
 8004a88:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	d057      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aaa:	d033      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab0:	d82c      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ab6:	d02f      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004ab8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004abc:	d826      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004abe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ac2:	d02b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004ac4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ac8:	d820      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ace:	d013      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ad4:	d81a      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d022      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ade:	d115      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f003 ff3e 	bl	8008968 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004af2:	e016      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004af4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004afc:	3330      	adds	r3, #48	@ 0x30
 8004afe:	4618      	mov	r0, r3
 8004b00:	f003 ffca 	bl	8008a98 <RCCEx_PLL3_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b12:	e006      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004b14:	bf00      	nop
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004b18:	bf00      	nop
 8004b1a:	e002      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10d      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004b2a:	4bbb      	ldr	r3, [pc, #748]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004b2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b3c:	4ab6      	ldr	r2, [pc, #728]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004b44:	e003      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	2100      	movs	r1, #0
 8004b58:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d055      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b76:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004b7a:	d031      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004b7c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004b80:	d82a      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b86:	d02d      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b8c:	d824      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004b8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b92:	d029      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004b94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b98:	d81e      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004b9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004ba0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ba4:	d818      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d020      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bae:	d113      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f003 fed6 	bl	8008968 <RCCEx_PLL2_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004bc2:	e014      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc8:	3330      	adds	r3, #48	@ 0x30
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 ff64 	bl	8008a98 <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004bd6:	e00a      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bde:	e006      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004be0:	bf00      	nop
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10d      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004bf6:	4b88      	ldr	r3, [pc, #544]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004bf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004bfc:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c08:	4a83      	ldr	r2, [pc, #524]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004c10:	e003      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c16:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	2100      	movs	r1, #0
 8004c24:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c30:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c34:	460b      	mov	r3, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	d055      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c42:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c46:	d031      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004c48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c4c:	d82a      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004c4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c52:	d02d      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c58:	d824      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004c5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c5e:	d029      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004c60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c64:	d81e      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c6a:	d011      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c70:	d818      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d020      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c7a:	d113      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c80:	3308      	adds	r3, #8
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 fe70 	bl	8008968 <RCCEx_PLL2_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004c8e:	e014      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c94:	3330      	adds	r3, #48	@ 0x30
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 fefe 	bl	8008a98 <RCCEx_PLL3_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004ca2:	e00a      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004caa:	e006      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004cac:	bf00      	nop
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004cc2:	4b55      	ldr	r3, [pc, #340]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004cc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004cd4:	4a50      	ldr	r2, [pc, #320]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ce2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	2100      	movs	r1, #0
 8004cf0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cfc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004d00:	460b      	mov	r3, r1
 8004d02:	4313      	orrs	r3, r2
 8004d04:	d055      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d12:	d031      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d18:	d82a      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1e:	d02d      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d24:	d824      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d2a:	d029      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004d2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d30:	d81e      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d36:	d011      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d3c:	d818      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d020      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d46:	d113      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f003 fe0a 	bl	8008968 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004d5a:	e014      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d60:	3330      	adds	r3, #48	@ 0x30
 8004d62:	4618      	mov	r0, r3
 8004d64:	f003 fe98 	bl	8008a98 <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d76:	e006      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e004      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e002      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004d8e:	4b22      	ldr	r3, [pc, #136]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004da0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004daa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004dbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004dc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d055      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dd6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004dda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dde:	d035      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004de0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004de4:	d82e      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004de6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dea:	d031      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004dec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004df0:	d828      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004df6:	d01b      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dfc:	d822      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e06:	d009      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004e08:	e01c      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0a:	4b03      	ldr	r3, [pc, #12]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	4a02      	ldr	r2, [pc, #8]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e14:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e16:	e01c      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004e18:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e20:	3308      	adds	r3, #8
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fda0 	bl	8008968 <RCCEx_PLL2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e2e:	e010      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e34:	3330      	adds	r3, #48	@ 0x30
 8004e36:	4618      	mov	r0, r3
 8004e38:	f003 fe2e 	bl	8008a98 <RCCEx_PLL3_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e42:	e006      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e4a:	e002      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10d      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004e5a:	4bc3      	ldr	r3, [pc, #780]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e6c:	4abe      	ldr	r2, [pc, #760]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e74:	e003      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d051      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ea2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004ea6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004eaa:	d033      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004eac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004eb0:	d82c      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004eb2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004eb6:	d02d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004eb8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004ebc:	d826      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec2:	d019      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec8:	d820      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004ece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ed2:	d007      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004ed4:	e01a      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed6:	4ba4      	ldr	r3, [pc, #656]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	4aa3      	ldr	r2, [pc, #652]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ee2:	e018      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ee8:	3308      	adds	r3, #8
 8004eea:	4618      	mov	r0, r3
 8004eec:	f003 fd3c 	bl	8008968 <RCCEx_PLL2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ef6:	e00e      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004efc:	3330      	adds	r3, #48	@ 0x30
 8004efe:	4618      	mov	r0, r3
 8004f00:	f003 fdca 	bl	8008a98 <RCCEx_PLL3_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f0a:	e004      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f12:	e000      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004f1e:	4b92      	ldr	r3, [pc, #584]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f24:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f2c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004f30:	4a8d      	ldr	r2, [pc, #564]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004f32:	430b      	orrs	r3, r1
 8004f34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f50:	2300      	movs	r3, #0
 8004f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	d032      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004f5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d80f      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d211      	bcs.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d911      	bls.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d109      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f003 fcf3 	bl	8008968 <RCCEx_PLL2_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f90:	e002      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004fa0:	4b71      	ldr	r3, [pc, #452]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fa6:	f023 0107 	bic.w	r1, r3, #7
 8004faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004fb2:	4a6d      	ldr	r2, [pc, #436]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004fba:	e003      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fc0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	6739      	str	r1, [r7, #112]	@ 0x70
 8004fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fd6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	d024      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d005      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ff6:	e002      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10d      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005006:	4b58      	ldr	r3, [pc, #352]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800500c:	f023 0108 	bic.w	r1, r3, #8
 8005010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005018:	4a53      	ldr	r2, [pc, #332]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800501a:	430b      	orrs	r3, r1
 800501c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005020:	e003      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005026:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800502a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005036:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005038:	2300      	movs	r3, #0
 800503a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800503c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005040:	460b      	mov	r3, r1
 8005042:	4313      	orrs	r3, r2
 8005044:	f000 80b9 	beq.w	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005048:	4b48      	ldr	r3, [pc, #288]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	4a47      	ldr	r2, [pc, #284]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005054:	f7fc fd42 	bl	8001adc <HAL_GetTick>
 8005058:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800505c:	e00b      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7fc fd3d 	bl	8001adc <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d903      	bls.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005074:	e005      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005076:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0ed      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 8093 	bne.w	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800508c:	4b36      	ldr	r3, [pc, #216]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800508e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005096:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800509a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d023      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80050a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80050aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01b      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c0:	4b29      	ldr	r3, [pc, #164]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050c6:	4a28      	ldr	r2, [pc, #160]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d0:	4b25      	ldr	r3, [pc, #148]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050d6:	4a24      	ldr	r2, [pc, #144]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e0:	4a21      	ldr	r2, [pc, #132]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80050e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d019      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fc fcf1 	bl	8001adc <HAL_GetTick>
 80050fa:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050fe:	e00d      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fc fcec 	bl	8001adc <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005110:	429a      	cmp	r2, r3
 8005112:	d903      	bls.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800511a:	e006      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511c:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800511e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ea      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800512a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800512e:	2b00      	cmp	r3, #0
 8005130:	d13a      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005132:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005136:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800513a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800513e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005142:	d115      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005144:	4b08      	ldr	r3, [pc, #32]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800514c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005150:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800515a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800515e:	4a02      	ldr	r2, [pc, #8]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005160:	430b      	orrs	r3, r1
 8005162:	61d3      	str	r3, [r2, #28]
 8005164:	e00a      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005166:	bf00      	nop
 8005168:	44020c00 	.word	0x44020c00
 800516c:	44020800 	.word	0x44020800
 8005170:	4b9f      	ldr	r3, [pc, #636]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	4a9e      	ldr	r2, [pc, #632]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005176:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800517a:	61d3      	str	r3, [r2, #28]
 800517c:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800517e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005182:	4a9b      	ldr	r2, [pc, #620]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005188:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800518c:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800518e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005192:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005196:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800519a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519e:	4a94      	ldr	r2, [pc, #592]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80051a0:	430b      	orrs	r3, r1
 80051a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051a6:	e008      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80051c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80051c8:	2300      	movs	r3, #0
 80051ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80051cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80051d0:	460b      	mov	r3, r1
 80051d2:	4313      	orrs	r3, r2
 80051d4:	d035      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80051d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80051de:	2b30      	cmp	r3, #48	@ 0x30
 80051e0:	d014      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80051e2:	2b30      	cmp	r3, #48	@ 0x30
 80051e4:	d80e      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d012      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d80a      	bhi.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d010      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d106      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f6:	4b7e      	ldr	r3, [pc, #504]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	4a7d      	ldr	r2, [pc, #500]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80051fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005200:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005202:	e008      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800520a:	e004      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800520c:	bf00      	nop
 800520e:	e002      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005216:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10d      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800521e:	4b74      	ldr	r3, [pc, #464]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005224:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005230:	4a6f      	ldr	r2, [pc, #444]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005232:	430b      	orrs	r3, r1
 8005234:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005238:	e003      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800523e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800524e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005250:	2300      	movs	r3, #0
 8005252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005254:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005258:	460b      	mov	r3, r1
 800525a:	4313      	orrs	r3, r2
 800525c:	d033      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800525e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005262:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d007      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800526e:	e010      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005270:	4b5f      	ldr	r3, [pc, #380]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	4a5e      	ldr	r2, [pc, #376]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800527c:	e00d      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800527e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005282:	3308      	adds	r3, #8
 8005284:	4618      	mov	r0, r3
 8005286:	f003 fb6f 	bl	8008968 <RCCEx_PLL2_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10d      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80052a2:	4b53      	ldr	r3, [pc, #332]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052a8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80052ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052b0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80052b4:	4a4e      	ldr	r2, [pc, #312]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80052bc:	e003      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80052c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80052d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80052d4:	2300      	movs	r3, #0
 80052d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80052dc:	460b      	mov	r3, r1
 80052de:	4313      	orrs	r3, r2
 80052e0:	d033      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80052e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80052ee:	2b80      	cmp	r3, #128	@ 0x80
 80052f0:	d007      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80052f2:	e010      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f4:	4b3e      	ldr	r3, [pc, #248]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	4a3d      	ldr	r2, [pc, #244]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005300:	e00d      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005302:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005306:	3308      	adds	r3, #8
 8005308:	4618      	mov	r0, r3
 800530a:	f003 fb2d 	bl	8008968 <RCCEx_PLL2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005314:	e003      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800531c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005326:	4b32      	ldr	r3, [pc, #200]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005328:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800532c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005334:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005338:	4a2d      	ldr	r2, [pc, #180]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800533a:	430b      	orrs	r3, r1
 800533c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005340:	e003      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005346:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800534a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005358:	2300      	movs	r3, #0
 800535a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800535c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005360:	460b      	mov	r3, r1
 8005362:	4313      	orrs	r3, r2
 8005364:	d04a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005366:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800536a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800536e:	2b04      	cmp	r3, #4
 8005370:	d827      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800538d 	.word	0x0800538d
 800537c:	0800539b 	.word	0x0800539b
 8005380:	080053af 	.word	0x080053af
 8005384:	080053cb 	.word	0x080053cb
 8005388:	080053cb 	.word	0x080053cb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538c:	4b18      	ldr	r3, [pc, #96]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005396:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005398:	e018      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800539a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800539e:	3308      	adds	r3, #8
 80053a0:	4618      	mov	r0, r3
 80053a2:	f003 fae1 	bl	8008968 <RCCEx_PLL2_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80053ac:	e00e      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b2:	3330      	adds	r3, #48	@ 0x30
 80053b4:	4618      	mov	r0, r3
 80053b6:	f003 fb6f 	bl	8008a98 <RCCEx_PLL3_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80053c0:	e004      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053c8:	e000      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80053ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10f      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80053d4:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053da:	f023 0107 	bic.w	r1, r3, #7
 80053de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053e6:	4a02      	ldr	r2, [pc, #8]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053ee:	e005      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80053f0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80053fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005408:	643b      	str	r3, [r7, #64]	@ 0x40
 800540a:	2300      	movs	r3, #0
 800540c:	647b      	str	r3, [r7, #68]	@ 0x44
 800540e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	f000 8081 	beq.w	800551c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800541a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800541e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005422:	2b20      	cmp	r3, #32
 8005424:	d85f      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	080054b1 	.word	0x080054b1
 8005430:	080054e7 	.word	0x080054e7
 8005434:	080054e7 	.word	0x080054e7
 8005438:	080054e7 	.word	0x080054e7
 800543c:	080054e7 	.word	0x080054e7
 8005440:	080054e7 	.word	0x080054e7
 8005444:	080054e7 	.word	0x080054e7
 8005448:	080054e7 	.word	0x080054e7
 800544c:	080054bf 	.word	0x080054bf
 8005450:	080054e7 	.word	0x080054e7
 8005454:	080054e7 	.word	0x080054e7
 8005458:	080054e7 	.word	0x080054e7
 800545c:	080054e7 	.word	0x080054e7
 8005460:	080054e7 	.word	0x080054e7
 8005464:	080054e7 	.word	0x080054e7
 8005468:	080054e7 	.word	0x080054e7
 800546c:	080054d3 	.word	0x080054d3
 8005470:	080054e7 	.word	0x080054e7
 8005474:	080054e7 	.word	0x080054e7
 8005478:	080054e7 	.word	0x080054e7
 800547c:	080054e7 	.word	0x080054e7
 8005480:	080054e7 	.word	0x080054e7
 8005484:	080054e7 	.word	0x080054e7
 8005488:	080054e7 	.word	0x080054e7
 800548c:	080054ef 	.word	0x080054ef
 8005490:	080054e7 	.word	0x080054e7
 8005494:	080054e7 	.word	0x080054e7
 8005498:	080054e7 	.word	0x080054e7
 800549c:	080054e7 	.word	0x080054e7
 80054a0:	080054e7 	.word	0x080054e7
 80054a4:	080054e7 	.word	0x080054e7
 80054a8:	080054e7 	.word	0x080054e7
 80054ac:	080054ef 	.word	0x080054ef
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b0:	4bab      	ldr	r3, [pc, #684]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	4aaa      	ldr	r2, [pc, #680]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80054b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80054bc:	e018      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054c2:	3308      	adds	r3, #8
 80054c4:	4618      	mov	r0, r3
 80054c6:	f003 fa4f 	bl	8008968 <RCCEx_PLL2_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80054d0:	e00e      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d6:	3330      	adds	r3, #48	@ 0x30
 80054d8:	4618      	mov	r0, r3
 80054da:	f003 fadd 	bl	8008a98 <RCCEx_PLL3_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80054e4:	e004      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80054ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80054f8:	4b99      	ldr	r3, [pc, #612]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80054fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005502:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005506:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800550a:	4a95      	ldr	r2, [pc, #596]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800550c:	430b      	orrs	r3, r1
 800550e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005512:	e003      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005518:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800551c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
 800552a:	2300      	movs	r3, #0
 800552c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800552e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005532:	460b      	mov	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	d04e      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800553c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005544:	d02e      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554a:	d827      	bhi.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800554c:	2bc0      	cmp	r3, #192	@ 0xc0
 800554e:	d02b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005550:	2bc0      	cmp	r3, #192	@ 0xc0
 8005552:	d823      	bhi.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005554:	2b80      	cmp	r3, #128	@ 0x80
 8005556:	d017      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005558:	2b80      	cmp	r3, #128	@ 0x80
 800555a:	d81f      	bhi.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005560:	2b40      	cmp	r3, #64	@ 0x40
 8005562:	d007      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005564:	e01a      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005566:	4b7e      	ldr	r3, [pc, #504]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	4a7d      	ldr	r2, [pc, #500]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800556c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005570:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005572:	e01a      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005574:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005578:	3308      	adds	r3, #8
 800557a:	4618      	mov	r0, r3
 800557c:	f003 f9f4 	bl	8008968 <RCCEx_PLL2_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005586:	e010      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005588:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800558c:	3330      	adds	r3, #48	@ 0x30
 800558e:	4618      	mov	r0, r3
 8005590:	f003 fa82 	bl	8008a98 <RCCEx_PLL3_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800559a:	e006      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055a2:	e002      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80055a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10d      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80055b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80055b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80055bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055c4:	4a66      	ldr	r2, [pc, #408]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055cc:	e003      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80055d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80055e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055e4:	2300      	movs	r3, #0
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055ec:	460b      	mov	r3, r1
 80055ee:	4313      	orrs	r3, r2
 80055f0:	d055      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80055f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80055fa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80055fe:	d031      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005600:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005604:	d82a      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800560a:	d02d      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800560c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005610:	d824      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005612:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005616:	d029      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005618:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800561c:	d81e      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005622:	d011      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005628:	d818      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800562e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005632:	d113      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005638:	3308      	adds	r3, #8
 800563a:	4618      	mov	r0, r3
 800563c:	f003 f994 	bl	8008968 <RCCEx_PLL2_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005646:	e014      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800564c:	3330      	adds	r3, #48	@ 0x30
 800564e:	4618      	mov	r0, r3
 8005650:	f003 fa22 	bl	8008a98 <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800565a:	e00a      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005662:	e006      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005664:	bf00      	nop
 8005666:	e004      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005668:	bf00      	nop
 800566a:	e002      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005672:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10d      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800567a:	4b39      	ldr	r3, [pc, #228]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800567c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005680:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005688:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800568c:	4a34      	ldr	r2, [pc, #208]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800568e:	430b      	orrs	r3, r1
 8005690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005694:	e003      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005696:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800569a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800569e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80056aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ac:	2300      	movs	r3, #0
 80056ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80056b4:	460b      	mov	r3, r1
 80056b6:	4313      	orrs	r3, r2
 80056b8:	d058      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80056ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056c6:	d031      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80056c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056cc:	d82a      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80056ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d2:	d02d      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80056d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d8:	d824      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80056da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056de:	d029      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80056e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056e4:	d81e      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ea:	d011      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80056ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f0:	d818      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fa:	d113      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005700:	3308      	adds	r3, #8
 8005702:	4618      	mov	r0, r3
 8005704:	f003 f930 	bl	8008968 <RCCEx_PLL2_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800570e:	e014      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005710:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005714:	3330      	adds	r3, #48	@ 0x30
 8005716:	4618      	mov	r0, r3
 8005718:	f003 f9be 	bl	8008a98 <RCCEx_PLL3_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005722:	e00a      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800572a:	e006      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800572c:	bf00      	nop
 800572e:	e004      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005730:	bf00      	nop
 8005732:	e002      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005734:	bf00      	nop
 8005736:	e000      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800573e:	2b00      	cmp	r3, #0
 8005740:	d110      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005742:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005748:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800574c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005754:	4902      	ldr	r1, [pc, #8]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800575c:	e006      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800575e:	bf00      	nop
 8005760:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005768:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800576c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	2100      	movs	r1, #0
 8005776:	6239      	str	r1, [r7, #32]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
 800577e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005782:	460b      	mov	r3, r1
 8005784:	4313      	orrs	r3, r2
 8005786:	d055      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800578c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005790:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005794:	d031      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005796:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800579a:	d82a      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800579c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a0:	d02d      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80057a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a6:	d824      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80057a8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80057ac:	d029      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80057ae:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80057b2:	d81e      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b8:	d011      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057be:	d818      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d020      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80057c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c8:	d113      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057ce:	3308      	adds	r3, #8
 80057d0:	4618      	mov	r0, r3
 80057d2:	f003 f8c9 	bl	8008968 <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057dc:	e014      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057e2:	3330      	adds	r3, #48	@ 0x30
 80057e4:	4618      	mov	r0, r3
 80057e6:	f003 f957 	bl	8008a98 <RCCEx_PLL3_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057f0:	e00a      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057f8:	e006      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80057fa:	bf00      	nop
 80057fc:	e004      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005808:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10d      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005810:	4b88      	ldr	r3, [pc, #544]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005816:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800581a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800581e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005822:	4984      	ldr	r1, [pc, #528]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800582a:	e003      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005830:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	2100      	movs	r1, #0
 800583e:	61b9      	str	r1, [r7, #24]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800584a:	460b      	mov	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	d03d      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005854:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005858:	2b03      	cmp	r3, #3
 800585a:	d81c      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800585c:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	0800589f 	.word	0x0800589f
 8005868:	08005875 	.word	0x08005875
 800586c:	08005883 	.word	0x08005883
 8005870:	0800589f 	.word	0x0800589f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005874:	4b6f      	ldr	r3, [pc, #444]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	4a6e      	ldr	r2, [pc, #440]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800587a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800587e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005880:	e00e      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005886:	3308      	adds	r3, #8
 8005888:	4618      	mov	r0, r3
 800588a:	f003 f86d 	bl	8008968 <RCCEx_PLL2_Config>
 800588e:	4603      	mov	r3, r0
 8005890:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005894:	e004      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800589c:	e000      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800589e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10d      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80058a8:	4b62      	ldr	r3, [pc, #392]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80058aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ae:	f023 0203 	bic.w	r2, r3, #3
 80058b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80058ba:	495e      	ldr	r1, [pc, #376]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80058c2:	e003      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	2100      	movs	r1, #0
 80058d6:	6139      	str	r1, [r7, #16]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d03a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80058e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f4:	d00e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80058f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058fa:	d815      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d017      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005904:	d110      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005906:	4b4b      	ldr	r3, [pc, #300]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590a:	4a4a      	ldr	r2, [pc, #296]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800590c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005910:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005912:	e00e      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005918:	3308      	adds	r3, #8
 800591a:	4618      	mov	r0, r3
 800591c:	f003 f824 	bl	8008968 <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005926:	e004      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800592e:	e000      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005932:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800593a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800593c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005948:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800594c:	4939      	ldr	r1, [pc, #228]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005954:	e003      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005956:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800595a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800595e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	2100      	movs	r1, #0
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005974:	460b      	mov	r3, r1
 8005976:	4313      	orrs	r3, r2
 8005978:	d038      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800597a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800597e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005982:	2b30      	cmp	r3, #48	@ 0x30
 8005984:	d01b      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005986:	2b30      	cmp	r3, #48	@ 0x30
 8005988:	d815      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800598a:	2b10      	cmp	r3, #16
 800598c:	d002      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800598e:	2b20      	cmp	r3, #32
 8005990:	d007      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005992:	e010      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005994:	4b27      	ldr	r3, [pc, #156]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	4a26      	ldr	r2, [pc, #152]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800599a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80059a0:	e00e      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a6:	3330      	adds	r3, #48	@ 0x30
 80059a8:	4618      	mov	r0, r3
 80059aa:	f003 f875 	bl	8008a98 <RCCEx_PLL3_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80059b4:	e004      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059bc:	e000      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80059be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10d      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80059c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059ce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80059da:	4916      	ldr	r1, [pc, #88]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80059e2:	e003      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	2100      	movs	r1, #0
 80059f6:	6039      	str	r1, [r7, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d00c      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005a08:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a16:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005a1a:	4906      	ldr	r1, [pc, #24]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005a22:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a32:	bf00      	nop
 8005a34:	44020c00 	.word	0x44020c00

08005a38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b08b      	sub	sp, #44	@ 0x2c
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005a40:	4bad      	ldr	r3, [pc, #692]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a48:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005a4a:	4bab      	ldr	r3, [pc, #684]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005a54:	4ba8      	ldr	r3, [pc, #672]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a5e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005a60:	4ba5      	ldr	r3, [pc, #660]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a6a:	4ba3      	ldr	r3, [pc, #652]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6e:	08db      	lsrs	r3, r3, #3
 8005a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8126 	beq.w	8005cda <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d053      	beq.n	8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d86f      	bhi.n	8005b7a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d003      	beq.n	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d02b      	beq.n	8005afe <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005aa6:	e068      	b.n	8005b7a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005aa8:	4b93      	ldr	r3, [pc, #588]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	08db      	lsrs	r3, r3, #3
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	4a92      	ldr	r2, [pc, #584]	@ (8005cfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	ee07 3a90 	vmov	s15, r3
 8005ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005adc:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ae0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005d00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005afc:	e068      	b.n	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b08:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005d04 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005b3a:	e049      	b.n	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005d08 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b58:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b5c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005d00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005b78:	e02a      	b.n	8005bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	08db      	lsrs	r3, r3, #3
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	4a5d      	ldr	r2, [pc, #372]	@ (8005cfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bae:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bb2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005d00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005bce:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bd0:	4b49      	ldr	r3, [pc, #292]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bdc:	d121      	bne.n	8005c22 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005bde:	4b46      	ldr	r3, [pc, #280]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005bea:	4b43      	ldr	r3, [pc, #268]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bee:	0a5b      	lsrs	r3, r3, #9
 8005bf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005bfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c00:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005c04:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c10:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e006      	b.n	8005c28 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e002      	b.n	8005c28 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c28:	4b33      	ldr	r3, [pc, #204]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c34:	d121      	bne.n	8005c7a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005c36:	4b30      	ldr	r3, [pc, #192]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d017      	beq.n	8005c72 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c42:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	0c1b      	lsrs	r3, r3, #16
 8005c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c58:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005c5c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c68:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	e006      	b.n	8005c80 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c80:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c8c:	d121      	bne.n	8005cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d017      	beq.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c9a:	4b17      	ldr	r3, [pc, #92]	@ (8005cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	0e1b      	lsrs	r3, r3, #24
 8005ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005cb4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005cc8:	e010      	b.n	8005cec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	609a      	str	r2, [r3, #8]
}
 8005cd0:	e00c      	b.n	8005cec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	609a      	str	r2, [r3, #8]
}
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	609a      	str	r2, [r3, #8]
}
 8005cec:	bf00      	nop
 8005cee:	372c      	adds	r7, #44	@ 0x2c
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	44020c00 	.word	0x44020c00
 8005cfc:	03d09000 	.word	0x03d09000
 8005d00:	46000000 	.word	0x46000000
 8005d04:	4a742400 	.word	0x4a742400
 8005d08:	4bbebc20 	.word	0x4bbebc20

08005d0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b08b      	sub	sp, #44	@ 0x2c
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005d14:	4bad      	ldr	r3, [pc, #692]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005d1e:	4bab      	ldr	r3, [pc, #684]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005d28:	4ba8      	ldr	r3, [pc, #672]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	0a1b      	lsrs	r3, r3, #8
 8005d2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d32:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005d34:	4ba5      	ldr	r3, [pc, #660]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005d3e:	4ba3      	ldr	r3, [pc, #652]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	08db      	lsrs	r3, r3, #3
 8005d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 8126 	beq.w	8005fae <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d053      	beq.n	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d86f      	bhi.n	8005e4e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d003      	beq.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d02b      	beq.n	8005dd2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005d7a:	e068      	b.n	8005e4e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d7c:	4b93      	ldr	r3, [pc, #588]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	4a92      	ldr	r2, [pc, #584]	@ (8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005db4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dcc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005dd0:	e068      	b.n	8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ddc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a04 	vldr	s12, [r7, #16]
 8005df2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005e0e:	e049      	b.n	8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e30:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005e4c:	e02a      	b.n	8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	08db      	lsrs	r3, r3, #3
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	4a5d      	ldr	r2, [pc, #372]	@ (8005fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e82:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e86:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005ea2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ea4:	4b49      	ldr	r3, [pc, #292]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eb0:	d121      	bne.n	8005ef6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005eb2:	4b46      	ldr	r3, [pc, #280]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d017      	beq.n	8005eee <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ebe:	4b43      	ldr	r3, [pc, #268]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec2:	0a5b      	lsrs	r3, r3, #9
 8005ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005ed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005ed8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e006      	b.n	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e002      	b.n	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005efc:	4b33      	ldr	r3, [pc, #204]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f08:	d121      	bne.n	8005f4e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005f0a:	4b30      	ldr	r3, [pc, #192]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d017      	beq.n	8005f46 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f16:	4b2d      	ldr	r3, [pc, #180]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	0c1b      	lsrs	r3, r3, #16
 8005f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005f30:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	e006      	b.n	8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	e002      	b.n	8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f54:	4b1d      	ldr	r3, [pc, #116]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f60:	d121      	bne.n	8005fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005f62:	4b1a      	ldr	r3, [pc, #104]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d017      	beq.n	8005f9e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f6e:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f72:	0e1b      	lsrs	r3, r3, #24
 8005f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005f80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f84:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005f88:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f94:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f9c:	e010      	b.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	e00c      	b.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	609a      	str	r2, [r3, #8]
}
 8005fac:	e008      	b.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	609a      	str	r2, [r3, #8]
}
 8005fc0:	bf00      	nop
 8005fc2:	372c      	adds	r7, #44	@ 0x2c
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	44020c00 	.word	0x44020c00
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	46000000 	.word	0x46000000
 8005fd8:	4a742400 	.word	0x4a742400
 8005fdc:	4bbebc20 	.word	0x4bbebc20

08005fe0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b08b      	sub	sp, #44	@ 0x2c
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005fe8:	4bad      	ldr	r3, [pc, #692]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005ff2:	4bab      	ldr	r3, [pc, #684]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005ffc:	4ba8      	ldr	r3, [pc, #672]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006006:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006008:	4ba5      	ldr	r3, [pc, #660]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800600a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006012:	4ba3      	ldr	r3, [pc, #652]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006016:	08db      	lsrs	r3, r3, #3
 8006018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8126 	beq.w	8006282 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d053      	beq.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b03      	cmp	r3, #3
 8006040:	d86f      	bhi.n	8006122 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d003      	beq.n	8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d02b      	beq.n	80060a6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800604e:	e068      	b.n	8006122 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006050:	4b93      	ldr	r3, [pc, #588]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	08db      	lsrs	r3, r3, #3
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	4a92      	ldr	r2, [pc, #584]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006084:	ed97 6a04 	vldr	s12, [r7, #16]
 8006088:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800608c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80060a4:	e068      	b.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80060b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80060c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80060ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80060e2:	e049      	b.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ee:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80062b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80060f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006100:	ed97 6a04 	vldr	s12, [r7, #16]
 8006104:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006120:	e02a      	b.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006122:	4b5f      	ldr	r3, [pc, #380]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	08db      	lsrs	r3, r3, #3
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	4a5d      	ldr	r2, [pc, #372]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	ed97 6a04 	vldr	s12, [r7, #16]
 800615a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800615e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006176:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006178:	4b49      	ldr	r3, [pc, #292]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006184:	d121      	bne.n	80061ca <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006186:	4b46      	ldr	r3, [pc, #280]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d017      	beq.n	80061c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006192:	4b43      	ldr	r3, [pc, #268]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	0a5b      	lsrs	r3, r3, #9
 8006198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80061a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80061ac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80061b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e006      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e002      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061d0:	4b33      	ldr	r3, [pc, #204]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061dc:	d121      	bne.n	8006222 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80061de:	4b30      	ldr	r3, [pc, #192]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d017      	beq.n	800621a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80061ea:	4b2d      	ldr	r3, [pc, #180]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80061fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006200:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006204:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006210:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	605a      	str	r2, [r3, #4]
 8006218:	e006      	b.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	e002      	b.n	8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006228:	4b1d      	ldr	r3, [pc, #116]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006234:	d121      	bne.n	800627a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006236:	4b1a      	ldr	r3, [pc, #104]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d017      	beq.n	8006272 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006242:	4b17      	ldr	r3, [pc, #92]	@ (80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	0e1b      	lsrs	r3, r3, #24
 8006248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006254:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006258:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800625c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006268:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006270:	e010      	b.n	8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
}
 8006278:	e00c      	b.n	8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	e008      	b.n	8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	609a      	str	r2, [r3, #8]
}
 8006294:	bf00      	nop
 8006296:	372c      	adds	r7, #44	@ 0x2c
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	44020c00 	.word	0x44020c00
 80062a4:	03d09000 	.word	0x03d09000
 80062a8:	46000000 	.word	0x46000000
 80062ac:	4a742400 	.word	0x4a742400
 80062b0:	4bbebc20 	.word	0x4bbebc20

080062b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b08f      	sub	sp, #60	@ 0x3c
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80062be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062c2:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80062c6:	4321      	orrs	r1, r4
 80062c8:	d150      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80062ca:	4b26      	ldr	r3, [pc, #152]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80062d6:	4b23      	ldr	r3, [pc, #140]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d108      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ea:	d104      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80062ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f2:	f002 bb2a 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80062f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006304:	d108      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800630c:	d104      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800630e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
 8006314:	f002 bb19 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006318:	4b12      	ldr	r3, [pc, #72]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006324:	d119      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800632c:	d115      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800632e:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800633a:	d30a      	bcc.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800633c:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	0a1b      	lsrs	r3, r3, #8
 8006342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006346:	4a08      	ldr	r2, [pc, #32]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800634e:	f002 bafc 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006356:	f002 baf8 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	637b      	str	r3, [r7, #52]	@ 0x34
 800635e:	f002 baf4 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006362:	bf00      	nop
 8006364:	44020c00 	.word	0x44020c00
 8006368:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800636c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006370:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8006374:	ea50 0104 	orrs.w	r1, r0, r4
 8006378:	f001 8275 	beq.w	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800637c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006380:	2801      	cmp	r0, #1
 8006382:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8006386:	f082 82dd 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800638a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800638e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006392:	ea50 0104 	orrs.w	r1, r0, r4
 8006396:	f001 816c 	beq.w	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800639a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800639e:	2801      	cmp	r0, #1
 80063a0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80063a4:	f082 82ce 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80063a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ac:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80063b0:	ea50 0104 	orrs.w	r1, r0, r4
 80063b4:	f001 8602 	beq.w	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80063b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063bc:	2801      	cmp	r0, #1
 80063be:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80063c2:	f082 82bf 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80063c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ca:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80063ce:	ea50 0104 	orrs.w	r1, r0, r4
 80063d2:	f001 854c 	beq.w	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80063d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063da:	2801      	cmp	r0, #1
 80063dc:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80063e0:	f082 82b0 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80063e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063e8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80063ec:	ea50 0104 	orrs.w	r1, r0, r4
 80063f0:	f001 849e 	beq.w	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80063f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063f8:	2801      	cmp	r0, #1
 80063fa:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80063fe:	f082 82a1 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006406:	f1a1 0420 	sub.w	r4, r1, #32
 800640a:	ea50 0104 	orrs.w	r1, r0, r4
 800640e:	f001 83e8 	beq.w	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006416:	2801      	cmp	r0, #1
 8006418:	f171 0120 	sbcs.w	r1, r1, #32
 800641c:	f082 8292 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006424:	f1a1 0410 	sub.w	r4, r1, #16
 8006428:	ea50 0104 	orrs.w	r1, r0, r4
 800642c:	f002 8256 	beq.w	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006434:	2801      	cmp	r0, #1
 8006436:	f171 0110 	sbcs.w	r1, r1, #16
 800643a:	f082 8283 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800643e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006442:	f1a1 0408 	sub.w	r4, r1, #8
 8006446:	ea50 0104 	orrs.w	r1, r0, r4
 800644a:	f002 81cc 	beq.w	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800644e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006452:	2801      	cmp	r0, #1
 8006454:	f171 0108 	sbcs.w	r1, r1, #8
 8006458:	f082 8274 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800645c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006460:	1f0c      	subs	r4, r1, #4
 8006462:	ea50 0104 	orrs.w	r1, r0, r4
 8006466:	f001 8648 	beq.w	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800646a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800646e:	2801      	cmp	r0, #1
 8006470:	f171 0104 	sbcs.w	r1, r1, #4
 8006474:	f082 8266 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800647c:	1e8c      	subs	r4, r1, #2
 800647e:	ea50 0104 	orrs.w	r1, r0, r4
 8006482:	f002 8143 	beq.w	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800648a:	2801      	cmp	r0, #1
 800648c:	f171 0102 	sbcs.w	r1, r1, #2
 8006490:	f082 8258 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006498:	1e4c      	subs	r4, r1, #1
 800649a:	ea50 0104 	orrs.w	r1, r0, r4
 800649e:	f002 80ce 	beq.w	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80064a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064a6:	2801      	cmp	r0, #1
 80064a8:	f171 0101 	sbcs.w	r1, r1, #1
 80064ac:	f082 824a 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064b4:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80064b8:	4321      	orrs	r1, r4
 80064ba:	f002 8059 	beq.w	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80064be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064c2:	4cd9      	ldr	r4, [pc, #868]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80064c4:	42a0      	cmp	r0, r4
 80064c6:	f171 0100 	sbcs.w	r1, r1, #0
 80064ca:	f082 823b 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064d2:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80064d6:	4321      	orrs	r1, r4
 80064d8:	f001 87d9 	beq.w	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80064dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064e0:	4cd2      	ldr	r4, [pc, #840]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80064e2:	42a0      	cmp	r0, r4
 80064e4:	f171 0100 	sbcs.w	r1, r1, #0
 80064e8:	f082 822c 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064f0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80064f4:	4321      	orrs	r1, r4
 80064f6:	f001 8751 	beq.w	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80064fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064fe:	4ccc      	ldr	r4, [pc, #816]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006500:	42a0      	cmp	r0, r4
 8006502:	f171 0100 	sbcs.w	r1, r1, #0
 8006506:	f082 821d 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800650a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800650e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8006512:	4321      	orrs	r1, r4
 8006514:	f001 869a 	beq.w	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800651c:	4cc5      	ldr	r4, [pc, #788]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800651e:	42a0      	cmp	r0, r4
 8006520:	f171 0100 	sbcs.w	r1, r1, #0
 8006524:	f082 820e 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800652c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006530:	4321      	orrs	r1, r4
 8006532:	f001 8612 	beq.w	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800653a:	4cbf      	ldr	r4, [pc, #764]	@ (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800653c:	42a0      	cmp	r0, r4
 800653e:	f171 0100 	sbcs.w	r1, r1, #0
 8006542:	f082 81ff 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006546:	e9d7 0100 	ldrd	r0, r1, [r7]
 800654a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800654e:	4321      	orrs	r1, r4
 8006550:	f002 817e 	beq.w	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006558:	4cb8      	ldr	r4, [pc, #736]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800655a:	42a0      	cmp	r0, r4
 800655c:	f171 0100 	sbcs.w	r1, r1, #0
 8006560:	f082 81f0 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006568:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800656c:	4321      	orrs	r1, r4
 800656e:	f000 829e 	beq.w	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006576:	4cb2      	ldr	r4, [pc, #712]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006578:	42a0      	cmp	r0, r4
 800657a:	f171 0100 	sbcs.w	r1, r1, #0
 800657e:	f082 81e1 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006586:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800658a:	4321      	orrs	r1, r4
 800658c:	f000 826d 	beq.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006594:	4cab      	ldr	r4, [pc, #684]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006596:	42a0      	cmp	r0, r4
 8006598:	f171 0100 	sbcs.w	r1, r1, #0
 800659c:	f082 81d2 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065a4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80065a8:	4321      	orrs	r1, r4
 80065aa:	f001 800d 	beq.w	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80065ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065b2:	4ca5      	ldr	r4, [pc, #660]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	f171 0100 	sbcs.w	r1, r1, #0
 80065ba:	f082 81c3 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065c2:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80065c6:	4321      	orrs	r1, r4
 80065c8:	f000 81d0 	beq.w	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80065cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065d0:	4c9e      	ldr	r4, [pc, #632]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80065d2:	42a0      	cmp	r0, r4
 80065d4:	f171 0100 	sbcs.w	r1, r1, #0
 80065d8:	f082 81b4 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065e0:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80065e4:	4321      	orrs	r1, r4
 80065e6:	f000 8142 	beq.w	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80065ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ee:	4c98      	ldr	r4, [pc, #608]	@ (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	f171 0100 	sbcs.w	r1, r1, #0
 80065f6:	f082 81a5 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065fe:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006602:	4321      	orrs	r1, r4
 8006604:	f001 824e 	beq.w	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800660c:	4c91      	ldr	r4, [pc, #580]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800660e:	42a0      	cmp	r0, r4
 8006610:	f171 0100 	sbcs.w	r1, r1, #0
 8006614:	f082 8196 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800661c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006620:	4321      	orrs	r1, r4
 8006622:	f001 8197 	beq.w	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006626:	e9d7 0100 	ldrd	r0, r1, [r7]
 800662a:	4c8b      	ldr	r4, [pc, #556]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800662c:	42a0      	cmp	r0, r4
 800662e:	f171 0100 	sbcs.w	r1, r1, #0
 8006632:	f082 8187 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800663a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800663e:	4321      	orrs	r1, r4
 8006640:	f001 8154 	beq.w	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006644:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006648:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800664c:	f171 0100 	sbcs.w	r1, r1, #0
 8006650:	f082 8178 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006658:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800665c:	4321      	orrs	r1, r4
 800665e:	f001 80b7 	beq.w	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006666:	f248 0401 	movw	r4, #32769	@ 0x8001
 800666a:	42a0      	cmp	r0, r4
 800666c:	f171 0100 	sbcs.w	r1, r1, #0
 8006670:	f082 8168 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006678:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800667c:	4321      	orrs	r1, r4
 800667e:	f001 8064 	beq.w	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006686:	f244 0401 	movw	r4, #16385	@ 0x4001
 800668a:	42a0      	cmp	r0, r4
 800668c:	f171 0100 	sbcs.w	r1, r1, #0
 8006690:	f082 8158 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006698:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800669c:	4321      	orrs	r1, r4
 800669e:	f001 8011 	beq.w	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80066a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066a6:	f242 0401 	movw	r4, #8193	@ 0x2001
 80066aa:	42a0      	cmp	r0, r4
 80066ac:	f171 0100 	sbcs.w	r1, r1, #0
 80066b0:	f082 8148 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066b8:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80066bc:	4321      	orrs	r1, r4
 80066be:	f000 871e 	beq.w	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80066c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066c6:	f241 0401 	movw	r4, #4097	@ 0x1001
 80066ca:	42a0      	cmp	r0, r4
 80066cc:	f171 0100 	sbcs.w	r1, r1, #0
 80066d0:	f082 8138 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066d8:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80066dc:	4321      	orrs	r1, r4
 80066de:	f000 86a8 	beq.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80066e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066e6:	f640 0401 	movw	r4, #2049	@ 0x801
 80066ea:	42a0      	cmp	r0, r4
 80066ec:	f171 0100 	sbcs.w	r1, r1, #0
 80066f0:	f082 8128 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066f8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80066fc:	4321      	orrs	r1, r4
 80066fe:	f000 8632 	beq.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006706:	f240 4401 	movw	r4, #1025	@ 0x401
 800670a:	42a0      	cmp	r0, r4
 800670c:	f171 0100 	sbcs.w	r1, r1, #0
 8006710:	f082 8118 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006718:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800671c:	4321      	orrs	r1, r4
 800671e:	f000 85b0 	beq.w	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006726:	f240 2401 	movw	r4, #513	@ 0x201
 800672a:	42a0      	cmp	r0, r4
 800672c:	f171 0100 	sbcs.w	r1, r1, #0
 8006730:	f082 8108 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006734:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006738:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800673c:	4321      	orrs	r1, r4
 800673e:	f000 8535 	beq.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006742:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006746:	f240 1401 	movw	r4, #257	@ 0x101
 800674a:	42a0      	cmp	r0, r4
 800674c:	f171 0100 	sbcs.w	r1, r1, #0
 8006750:	f082 80f8 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006758:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800675c:	4321      	orrs	r1, r4
 800675e:	f000 84ba 	beq.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006766:	2881      	cmp	r0, #129	@ 0x81
 8006768:	f171 0100 	sbcs.w	r1, r1, #0
 800676c:	f082 80ea 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006774:	2821      	cmp	r0, #33	@ 0x21
 8006776:	f171 0100 	sbcs.w	r1, r1, #0
 800677a:	d26f      	bcs.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800677c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006780:	4301      	orrs	r1, r0
 8006782:	f002 80df 	beq.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800678a:	1e42      	subs	r2, r0, #1
 800678c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006790:	2a20      	cmp	r2, #32
 8006792:	f173 0100 	sbcs.w	r1, r3, #0
 8006796:	f082 80d5 	bcs.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800679a:	2a1f      	cmp	r2, #31
 800679c:	f202 80d2 	bhi.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067a0:	a101      	add	r1, pc, #4	@ (adr r1, 80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80067a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	08006b09 	.word	0x08006b09
 80067ac:	08006bd5 	.word	0x08006bd5
 80067b0:	08008945 	.word	0x08008945
 80067b4:	08006c95 	.word	0x08006c95
 80067b8:	08008945 	.word	0x08008945
 80067bc:	08008945 	.word	0x08008945
 80067c0:	08008945 	.word	0x08008945
 80067c4:	08006d65 	.word	0x08006d65
 80067c8:	08008945 	.word	0x08008945
 80067cc:	08008945 	.word	0x08008945
 80067d0:	08008945 	.word	0x08008945
 80067d4:	08008945 	.word	0x08008945
 80067d8:	08008945 	.word	0x08008945
 80067dc:	08008945 	.word	0x08008945
 80067e0:	08008945 	.word	0x08008945
 80067e4:	08006e47 	.word	0x08006e47
 80067e8:	08008945 	.word	0x08008945
 80067ec:	08008945 	.word	0x08008945
 80067f0:	08008945 	.word	0x08008945
 80067f4:	08008945 	.word	0x08008945
 80067f8:	08008945 	.word	0x08008945
 80067fc:	08008945 	.word	0x08008945
 8006800:	08008945 	.word	0x08008945
 8006804:	08008945 	.word	0x08008945
 8006808:	08008945 	.word	0x08008945
 800680c:	08008945 	.word	0x08008945
 8006810:	08008945 	.word	0x08008945
 8006814:	08008945 	.word	0x08008945
 8006818:	08008945 	.word	0x08008945
 800681c:	08008945 	.word	0x08008945
 8006820:	08008945 	.word	0x08008945
 8006824:	08006f1d 	.word	0x08006f1d
 8006828:	80000001 	.word	0x80000001
 800682c:	40000001 	.word	0x40000001
 8006830:	20000001 	.word	0x20000001
 8006834:	10000001 	.word	0x10000001
 8006838:	08000001 	.word	0x08000001
 800683c:	04000001 	.word	0x04000001
 8006840:	00800001 	.word	0x00800001
 8006844:	00400001 	.word	0x00400001
 8006848:	00200001 	.word	0x00200001
 800684c:	00100001 	.word	0x00100001
 8006850:	00080001 	.word	0x00080001
 8006854:	00040001 	.word	0x00040001
 8006858:	00020001 	.word	0x00020001
 800685c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006860:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006864:	430b      	orrs	r3, r1
 8006866:	f000 83c4 	beq.w	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800686a:	f002 b86b 	b.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800686e:	4ba1      	ldr	r3, [pc, #644]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006874:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006880:	d036      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006888:	d86b      	bhi.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006890:	d02b      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006898:	d863      	bhi.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a0:	d01b      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a8:	d85b      	bhi.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b6:	d008      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80068b8:	e053      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068ba:	f107 0320 	add.w	r3, r7, #32
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff f8ba 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068c8:	e04e      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ca:	f107 0314 	add.w	r3, r7, #20
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff fa1c 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068d8:	e046      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fb7e 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068e8:	e03e      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80068ea:	4b83      	ldr	r3, [pc, #524]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068ee:	e03b      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068f0:	4b80      	ldr	r3, [pc, #512]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80068fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068fc:	4b7d      	ldr	r3, [pc, #500]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d10c      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800690e:	4b79      	ldr	r3, [pc, #484]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	4a78      	ldr	r2, [pc, #480]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006920:	e01e      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006922:	4b74      	ldr	r3, [pc, #464]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800692a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800692e:	d106      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006936:	d102      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006938:	4b71      	ldr	r3, [pc, #452]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800693a:	637b      	str	r3, [r7, #52]	@ 0x34
 800693c:	e010      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800693e:	4b6d      	ldr	r3, [pc, #436]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006946:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800694a:	d106      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006952:	d102      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006954:	4b6b      	ldr	r3, [pc, #428]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006956:	637b      	str	r3, [r7, #52]	@ 0x34
 8006958:	e002      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800695e:	e003      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006960:	e002      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006966:	bf00      	nop
          }
        }
        break;
 8006968:	f001 bfef 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800696c:	4b61      	ldr	r3, [pc, #388]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800696e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006972:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8006976:	633b      	str	r3, [r7, #48]	@ 0x30
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800697e:	d036      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006986:	d86b      	bhi.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800698e:	d02b      	beq.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006996:	d863      	bhi.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800699e:	d01b      	beq.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069a6:	d85b      	bhi.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069b4:	d008      	beq.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80069b6:	e053      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069b8:	f107 0320 	add.w	r3, r7, #32
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff f83b 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069c6:	e04e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c8:	f107 0314 	add.w	r3, r7, #20
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff f99d 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069d6:	e046      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d8:	f107 0308 	add.w	r3, r7, #8
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff faff 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069e6:	e03e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80069e8:	4b43      	ldr	r3, [pc, #268]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069ec:	e03b      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069ee:	4b41      	ldr	r3, [pc, #260]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069fa:	4b3e      	ldr	r3, [pc, #248]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d10c      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a0c:	4b39      	ldr	r3, [pc, #228]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	08db      	lsrs	r3, r3, #3
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	4a39      	ldr	r2, [pc, #228]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1e:	e01e      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a20:	4b34      	ldr	r3, [pc, #208]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2c:	d106      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a34:	d102      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006a36:	4b32      	ldr	r3, [pc, #200]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3a:	e010      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a48:	d106      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a50:	d102      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006a52:	4b2c      	ldr	r3, [pc, #176]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a56:	e002      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006a5c:	e003      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006a5e:	e002      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a64:	bf00      	nop
          }
        }
        break;
 8006a66:	f001 bf70 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006a6a:	4b22      	ldr	r3, [pc, #136]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d108      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a7c:	f107 0320 	add.w	r3, r7, #32
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe ffd9 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a8a:	f001 bf5e 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	2b40      	cmp	r3, #64	@ 0x40
 8006a92:	d108      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff f937 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aa2:	f001 bf52 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aaa:	f001 bf4e 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006aae:	4b11      	ldr	r3, [pc, #68]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ab0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d108      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac0:	f107 0320 	add.w	r3, r7, #32
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe ffb7 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ace:	f001 bf3c 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2b80      	cmp	r3, #128	@ 0x80
 8006ad6:	d108      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad8:	f107 0314 	add.w	r3, r7, #20
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff f915 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ae6:	f001 bf30 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aee:	f001 bf2c 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006af2:	bf00      	nop
 8006af4:	44020c00 	.word	0x44020c00
 8006af8:	00bb8000 	.word	0x00bb8000
 8006afc:	03d09000 	.word	0x03d09000
 8006b00:	003d0900 	.word	0x003d0900
 8006b04:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b08:	4b9d      	ldr	r3, [pc, #628]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006b1a:	f7fc ffd7 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8006b1e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b20:	f001 bf13 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006b24:	4b96      	ldr	r3, [pc, #600]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b30:	d10a      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d107      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b38:	f107 0314 	add.w	r3, r7, #20
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff f8e5 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b46:	e043      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006b48:	4b8d      	ldr	r3, [pc, #564]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b54:	d10a      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d107      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fa3d 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6a:	e031      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006b6c:	4b84      	ldr	r3, [pc, #528]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d10c      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d109      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b7e:	4b80      	ldr	r3, [pc, #512]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	08db      	lsrs	r3, r3, #3
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	4a7e      	ldr	r2, [pc, #504]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b90:	e01e      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006b92:	4b7b      	ldr	r3, [pc, #492]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b9e:	d105      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d102      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8006ba6:	4b78      	ldr	r3, [pc, #480]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006baa:	e011      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006bac:	4b74      	ldr	r3, [pc, #464]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d106      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	2b05      	cmp	r3, #5
 8006bbe:	d103      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006bc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc6:	e003      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bcc:	f001 bebd 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bd0:	f001 bebb 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006bd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bde:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006be6:	f7fc ff5b 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8006bea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bec:	f001 bead 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006bf0:	4b63      	ldr	r3, [pc, #396]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bfc:	d10a      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d107      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c04:	f107 0314 	add.w	r3, r7, #20
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff f87f 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c12:	e03d      	b.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d108      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff f9de 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c28:	f001 be8f 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006c2c:	4b54      	ldr	r3, [pc, #336]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d10c      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	2b18      	cmp	r3, #24
 8006c3c:	d109      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c3e:	4b50      	ldr	r3, [pc, #320]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	08db      	lsrs	r3, r3, #3
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	4a4e      	ldr	r2, [pc, #312]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c50:	e01e      	b.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006c52:	4b4b      	ldr	r3, [pc, #300]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c5e:	d105      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d102      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8006c66:	4b48      	ldr	r3, [pc, #288]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6a:	e011      	b.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006c6c:	4b44      	ldr	r3, [pc, #272]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d106      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	2b28      	cmp	r3, #40	@ 0x28
 8006c7e:	d103      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006c80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c8c:	f001 be5d 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c90:	f001 be5b 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006c94:	4b3a      	ldr	r3, [pc, #232]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c9a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006c9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ca6:	f7fc fefb 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8006caa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006cac:	f001 be4d 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006cb0:	4b33      	ldr	r3, [pc, #204]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cbc:	d10a      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	2b40      	cmp	r3, #64	@ 0x40
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc4:	f107 0314 	add.w	r3, r7, #20
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff f81f 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd2:	e045      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ce0:	d10a      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	2b80      	cmp	r3, #128	@ 0x80
 8006ce6:	d107      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff f977 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf6:	e033      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006cf8:	4b21      	ldr	r3, [pc, #132]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	08db      	lsrs	r3, r3, #3
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	4a1b      	ldr	r2, [pc, #108]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1c:	e020      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006d1e:	4b18      	ldr	r3, [pc, #96]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006d34:	4b14      	ldr	r3, [pc, #80]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d38:	e012      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006d3a:	4b11      	ldr	r3, [pc, #68]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d107      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006d4e:	d103      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006d50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d56:	e003      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5c:	f001 bdf5 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d60:	f001 bdf3 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006d64:	4b06      	ldr	r3, [pc, #24]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d6a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006d6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d76:	f7fc fe93 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8006d7a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d7c:	f001 bde5 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d80:	44020c00 	.word	0x44020c00
 8006d84:	03d09000 	.word	0x03d09000
 8006d88:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006d8c:	4ba0      	ldr	r3, [pc, #640]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d98:	d10b      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da0:	d107      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da2:	f107 0314 	add.w	r3, r7, #20
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe ffb0 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db0:	e047      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006db2:	4b97      	ldr	r3, [pc, #604]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dbe:	d10b      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dc8:	f107 0308 	add.w	r3, r7, #8
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff f907 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd6:	e034      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d10d      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006dea:	d109      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dec:	4b88      	ldr	r3, [pc, #544]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	08db      	lsrs	r3, r3, #3
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	4a87      	ldr	r2, [pc, #540]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfe:	e020      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006e00:	4b83      	ldr	r3, [pc, #524]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e0c:	d106      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e14:	d102      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006e16:	4b80      	ldr	r3, [pc, #512]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1a:	e012      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006e1c:	4b7c      	ldr	r3, [pc, #496]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d107      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006e30:	d103      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e38:	e003      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e3e:	f001 bd84 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e42:	f001 bd82 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e46:	4b72      	ldr	r3, [pc, #456]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d104      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fc fe22 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e5e:	f001 bd74 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006e62:	4b6b      	ldr	r3, [pc, #428]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e6e:	d10b      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e76:	d107      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e78:	f107 0314 	add.w	r3, r7, #20
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fe ff45 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e86:	e047      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006e88:	4b61      	ldr	r3, [pc, #388]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e94:	d10b      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e9c:	d107      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff f89c 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eac:	e034      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006eae:	4b58      	ldr	r3, [pc, #352]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d10d      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ec0:	d109      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ec2:	4b53      	ldr	r3, [pc, #332]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	08db      	lsrs	r3, r3, #3
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	4a51      	ldr	r2, [pc, #324]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006ece:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed4:	e020      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee2:	d106      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eea:	d102      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006eec:	4b4a      	ldr	r3, [pc, #296]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef0:	e012      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006ef2:	4b47      	ldr	r3, [pc, #284]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d107      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f06:	d103      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f0e:	e003      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f14:	f001 bd19 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f18:	f001 bd17 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f22:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006f26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f2e:	f7fc fdb7 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8006f32:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f34:	f001 bd09 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006f38:	4b35      	ldr	r3, [pc, #212]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f44:	d10b      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4c:	d107      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f4e:	f107 0314 	add.w	r3, r7, #20
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe feda 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f5c:	e047      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f6a:	d10b      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f72:	d107      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f74:	f107 0308 	add.w	r3, r7, #8
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff f831 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f82:	e034      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006f84:	4b22      	ldr	r3, [pc, #136]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d10d      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8006f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f92:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006f96:	d109      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f98:	4b1d      	ldr	r3, [pc, #116]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	08db      	lsrs	r3, r3, #3
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006faa:	e020      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006fac:	4b18      	ldr	r3, [pc, #96]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fb8:	d106      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc0:	d102      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc6:	e012      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006fc8:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d107      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006fdc:	d103      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fea:	f001 bcae 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fee:	f001 bcac 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006ff2:	4b07      	ldr	r3, [pc, #28]	@ (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ff8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8006ffc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007004:	f7fc fd4c 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8007008:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800700a:	f001 bc9e 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800700e:	bf00      	nop
 8007010:	44020c00 	.word	0x44020c00
 8007014:	03d09000 	.word	0x03d09000
 8007018:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800701c:	4ba0      	ldr	r3, [pc, #640]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007028:	d10b      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007030:	d107      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007032:	f107 0314 	add.w	r3, r7, #20
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fe68 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007040:	e047      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007042:	4b97      	ldr	r3, [pc, #604]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800704a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800704e:	d10b      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007056:	d107      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007058:	f107 0308 	add.w	r3, r7, #8
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe ffbf 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	637b      	str	r3, [r7, #52]	@ 0x34
 8007066:	e034      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007068:	4b8d      	ldr	r3, [pc, #564]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d10d      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800707a:	d109      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800707c:	4b88      	ldr	r3, [pc, #544]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	08db      	lsrs	r3, r3, #3
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	4a87      	ldr	r2, [pc, #540]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
 800708e:	e020      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007090:	4b83      	ldr	r3, [pc, #524]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800709c:	d106      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070a4:	d102      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80070a6:	4b80      	ldr	r3, [pc, #512]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070aa:	e012      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80070ac:	4b7c      	ldr	r3, [pc, #496]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d107      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80070c0:	d103      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80070c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c8:	e003      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070ce:	f001 bc3c 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070d2:	f001 bc3a 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80070d6:	4b72      	ldr	r3, [pc, #456]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80070dc:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80070e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80070e8:	f7fc fcda 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 80070ec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80070ee:	f001 bc2c 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80070f2:	4b6b      	ldr	r3, [pc, #428]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070fe:	d10b      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007106:	d107      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007108:	f107 0314 	add.w	r3, r7, #20
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fdfd 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
 8007116:	e047      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007118:	4b61      	ldr	r3, [pc, #388]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007124:	d10b      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800712c:	d107      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800712e:	f107 0308 	add.w	r3, r7, #8
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe ff54 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
 800713c:	e034      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800713e:	4b58      	ldr	r3, [pc, #352]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b02      	cmp	r3, #2
 8007148:	d10d      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007150:	d109      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007152:	4b53      	ldr	r3, [pc, #332]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	08db      	lsrs	r3, r3, #3
 8007158:	f003 0303 	and.w	r3, r3, #3
 800715c:	4a51      	ldr	r2, [pc, #324]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800715e:	fa22 f303 	lsr.w	r3, r2, r3
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
 8007164:	e020      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007166:	4b4e      	ldr	r3, [pc, #312]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800716e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007172:	d106      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800717a:	d102      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800717c:	4b4a      	ldr	r3, [pc, #296]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007180:	e012      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007182:	4b47      	ldr	r3, [pc, #284]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b02      	cmp	r3, #2
 800718e:	d107      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007196:	d103      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
 800719e:	e003      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071a4:	f001 bbd1 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071a8:	f001 bbcf 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80071ac:	4b3c      	ldr	r3, [pc, #240]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071b2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80071b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80071be:	f7fc fc6f 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 80071c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80071c4:	f001 bbc1 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80071c8:	4b35      	ldr	r3, [pc, #212]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071d4:	d10b      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071dc:	d107      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071de:	f107 0314 	add.w	r3, r7, #20
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fd92 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ec:	e047      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80071ee:	4b2c      	ldr	r3, [pc, #176]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071fa:	d10b      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007202:	d107      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007204:	f107 0308 	add.w	r3, r7, #8
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe fee9 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	637b      	str	r3, [r7, #52]	@ 0x34
 8007212:	e034      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007214:	4b22      	ldr	r3, [pc, #136]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b02      	cmp	r3, #2
 800721e:	d10d      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007226:	d109      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007228:	4b1d      	ldr	r3, [pc, #116]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	08db      	lsrs	r3, r3, #3
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	4a1c      	ldr	r2, [pc, #112]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
 800723a:	e020      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800723c:	4b18      	ldr	r3, [pc, #96]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007248:	d106      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007250:	d102      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007252:	4b15      	ldr	r3, [pc, #84]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007254:	637b      	str	r3, [r7, #52]	@ 0x34
 8007256:	e012      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007258:	4b11      	ldr	r3, [pc, #68]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800725a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d107      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800726c:	d103      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007272:	637b      	str	r3, [r7, #52]	@ 0x34
 8007274:	e003      	b.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800727a:	f001 bb66 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800727e:	f001 bb64 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007282:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007288:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800728c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800728e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10b      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007294:	f7fc fc04 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8007298:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800729a:	f001 bb56 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800729e:	bf00      	nop
 80072a0:	44020c00 	.word	0x44020c00
 80072a4:	03d09000 	.word	0x03d09000
 80072a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80072ac:	4ba1      	ldr	r3, [pc, #644]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072b8:	d10b      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072c0:	d107      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c2:	f107 0314 	add.w	r3, r7, #20
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fd20 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d0:	e047      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80072d2:	4b98      	ldr	r3, [pc, #608]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072de:	d10b      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e6:	d107      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e8:	f107 0308 	add.w	r3, r7, #8
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fe77 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	e034      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80072f8:	4b8e      	ldr	r3, [pc, #568]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b02      	cmp	r3, #2
 8007302:	d10d      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800730a:	d109      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800730c:	4b89      	ldr	r3, [pc, #548]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	08db      	lsrs	r3, r3, #3
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	4a88      	ldr	r2, [pc, #544]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
 800731e:	e020      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007320:	4b84      	ldr	r3, [pc, #528]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800732c:	d106      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007334:	d102      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007336:	4b81      	ldr	r3, [pc, #516]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
 800733a:	e012      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800733c:	4b7d      	ldr	r3, [pc, #500]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800733e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b02      	cmp	r3, #2
 8007348:	d107      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007350:	d103      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007356:	637b      	str	r3, [r7, #52]	@ 0x34
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800735e:	f001 baf4 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007362:	f001 baf2 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007366:	4b73      	ldr	r3, [pc, #460]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007368:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007378:	f7fc fb92 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 800737c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800737e:	f001 bae4 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007382:	4b6c      	ldr	r3, [pc, #432]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800738a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800738e:	d10a      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	2b01      	cmp	r3, #1
 8007394:	d107      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007396:	f107 0314 	add.w	r3, r7, #20
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fcb6 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a4:	e043      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80073a6:	4b63      	ldr	r3, [pc, #396]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073b2:	d10a      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d107      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fe0e 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c8:	e031      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80073ca:	4b5a      	ldr	r3, [pc, #360]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d10c      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d109      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073dc:	4b55      	ldr	r3, [pc, #340]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	08db      	lsrs	r3, r3, #3
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	4a54      	ldr	r2, [pc, #336]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ee:	e01e      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80073f0:	4b50      	ldr	r3, [pc, #320]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073fc:	d105      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2b04      	cmp	r3, #4
 8007402:	d102      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007404:	4b4d      	ldr	r3, [pc, #308]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
 8007408:	e011      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800740a:	4b4a      	ldr	r3, [pc, #296]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800740c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b02      	cmp	r3, #2
 8007416:	d106      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	2b05      	cmp	r3, #5
 800741c:	d103      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e003      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800742a:	f001 ba8e 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800742e:	f001 ba8c 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007432:	4b40      	ldr	r3, [pc, #256]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007434:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800743c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007444:	f7fc fb2c 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8007448:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800744a:	f001 ba7e 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800744e:	4b39      	ldr	r3, [pc, #228]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800745a:	d10a      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	2b10      	cmp	r3, #16
 8007460:	d107      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007462:	f107 0314 	add.w	r3, r7, #20
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fc50 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007470:	e043      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007472:	4b30      	ldr	r3, [pc, #192]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800747a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800747e:	d10a      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	2b20      	cmp	r3, #32
 8007484:	d107      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fda8 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
 8007494:	e031      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007496:	4b27      	ldr	r3, [pc, #156]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d10c      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	2b30      	cmp	r3, #48	@ 0x30
 80074a6:	d109      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074a8:	4b22      	ldr	r3, [pc, #136]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	08db      	lsrs	r3, r3, #3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	4a21      	ldr	r2, [pc, #132]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ba:	e01e      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80074bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c8:	d105      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	2b40      	cmp	r3, #64	@ 0x40
 80074ce:	d102      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80074d0:	4b1a      	ldr	r3, [pc, #104]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d4:	e011      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80074d6:	4b17      	ldr	r3, [pc, #92]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d106      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	2b50      	cmp	r3, #80	@ 0x50
 80074e8:	d103      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80074ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f0:	e003      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074f6:	f001 ba28 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074fa:	f001 ba26 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80074fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007504:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007508:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007510:	f7fc faf2 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 8007514:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007516:	f001 ba18 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007520:	d10e      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007522:	f107 0314 	add.w	r3, r7, #20
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fbf0 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007530:	f001 ba0b 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007534:	44020c00 	.word	0x44020c00
 8007538:	03d09000 	.word	0x03d09000
 800753c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007546:	d108      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fd47 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007556:	f001 b9f8 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800755a:	4ba4      	ldr	r3, [pc, #656]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b02      	cmp	r3, #2
 8007564:	d10d      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800756c:	d109      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800756e:	4b9f      	ldr	r3, [pc, #636]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	08db      	lsrs	r3, r3, #3
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	4a9d      	ldr	r2, [pc, #628]	@ (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800757a:	fa22 f303 	lsr.w	r3, r2, r3
 800757e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007580:	e020      	b.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007582:	4b9a      	ldr	r3, [pc, #616]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800758a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800758e:	d106      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007596:	d102      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007598:	4b96      	ldr	r3, [pc, #600]	@ (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800759a:	637b      	str	r3, [r7, #52]	@ 0x34
 800759c:	e012      	b.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800759e:	4b93      	ldr	r3, [pc, #588]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80075a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d107      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075b2:	d103      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80075b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ba:	e003      	b.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c0:	f001 b9c3 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075c4:	f001 b9c1 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80075c8:	4b88      	ldr	r3, [pc, #544]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80075ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80075d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d104      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80075da:	f7fc fa45 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 80075de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80075e0:	f001 b9b3 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80075e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d104      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80075ea:	f7fc f911 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80075ee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075f0:	f001 b9ab 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80075f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d108      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075fa:	f107 0314 	add.w	r3, r7, #20
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fb84 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007608:	f001 b99f 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800760c:	4b77      	ldr	r3, [pc, #476]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007618:	d105      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	2b03      	cmp	r3, #3
 800761e:	d102      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007620:	4b75      	ldr	r3, [pc, #468]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007622:	637b      	str	r3, [r7, #52]	@ 0x34
 8007624:	e023      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007626:	4b71      	ldr	r3, [pc, #452]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d10c      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	2b04      	cmp	r3, #4
 8007636:	d109      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007638:	4b6c      	ldr	r3, [pc, #432]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	08db      	lsrs	r3, r3, #3
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	4a6b      	ldr	r2, [pc, #428]	@ (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	637b      	str	r3, [r7, #52]	@ 0x34
 800764a:	e010      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800764c:	4b67      	ldr	r3, [pc, #412]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007658:	d105      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	2b05      	cmp	r3, #5
 800765e:	d102      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007660:	4b64      	ldr	r3, [pc, #400]	@ (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007662:	637b      	str	r3, [r7, #52]	@ 0x34
 8007664:	e003      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800766a:	f001 b96e 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800766e:	f001 b96c 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007672:	4b5e      	ldr	r3, [pc, #376]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800767e:	4b5b      	ldr	r3, [pc, #364]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d106      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2b00      	cmp	r3, #0
 8007690:	d103      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
 8007698:	e012      	b.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800769a:	4b54      	ldr	r3, [pc, #336]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800769c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076a8:	d106      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80076aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d103      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80076b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b6:	e003      	b.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80076bc:	f001 b945 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076c0:	f001 b943 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80076c4:	4b49      	ldr	r3, [pc, #292]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80076ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80076d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076d6:	f7fc f9e3 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 80076da:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80076dc:	f001 b935 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e6:	d108      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fc77 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076f6:	f001 b928 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80076fa:	4b3c      	ldr	r3, [pc, #240]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b02      	cmp	r3, #2
 8007704:	d10d      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800770c:	d109      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800770e:	4b37      	ldr	r3, [pc, #220]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	08db      	lsrs	r3, r3, #3
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	4a35      	ldr	r2, [pc, #212]	@ (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800771a:	fa22 f303 	lsr.w	r3, r2, r3
 800771e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007720:	e011      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007722:	4b32      	ldr	r3, [pc, #200]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800772a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800772e:	d106      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007736:	d102      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007738:	4b2e      	ldr	r3, [pc, #184]	@ (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800773a:	637b      	str	r3, [r7, #52]	@ 0x34
 800773c:	e003      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007742:	f001 b902 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007746:	f001 b900 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800774a:	4b28      	ldr	r3, [pc, #160]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800774c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007750:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007754:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800775c:	f7fc f9a0 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8007760:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007762:	f001 b8f2 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800776c:	d108      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800776e:	f107 0308 	add.w	r3, r7, #8
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fc34 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777c:	f001 b8e5 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007780:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	2b02      	cmp	r3, #2
 800778a:	d10d      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800778c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007792:	d109      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007794:	4b15      	ldr	r3, [pc, #84]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	08db      	lsrs	r3, r3, #3
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	4a14      	ldr	r2, [pc, #80]	@ (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
 80077a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a6:	e011      	b.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80077a8:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b4:	d106      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80077bc:	d102      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c2:	e003      	b.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c8:	f001 b8bf 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077cc:	f001 b8bd 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80077d0:	4b06      	ldr	r3, [pc, #24]	@ (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10c      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80077e2:	f7fc f989 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 80077e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80077e8:	f001 b8af 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077ec:	44020c00 	.word	0x44020c00
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	003d0900 	.word	0x003d0900
 80077f8:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007802:	d108      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007804:	f107 0308 	add.w	r3, r7, #8
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fbe9 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007812:	f001 b89a 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007816:	4b9f      	ldr	r3, [pc, #636]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b02      	cmp	r3, #2
 8007820:	d10d      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007828:	d109      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800782a:	4b9a      	ldr	r3, [pc, #616]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	08db      	lsrs	r3, r3, #3
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	4a98      	ldr	r2, [pc, #608]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
 800783c:	e011      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800783e:	4b95      	ldr	r3, [pc, #596]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800784a:	d106      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007852:	d102      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007854:	4b91      	ldr	r3, [pc, #580]	@ (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007856:	637b      	str	r3, [r7, #52]	@ 0x34
 8007858:	e003      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800785e:	f001 b874 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007862:	f001 b872 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007866:	4b8b      	ldr	r3, [pc, #556]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800786c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007870:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007878:	f7fc f93e 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 800787c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800787e:	f001 b864 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007888:	d108      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fba6 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007898:	f001 b857 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800789c:	4b7d      	ldr	r3, [pc, #500]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d10d      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078ae:	d109      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078b0:	4b78      	ldr	r3, [pc, #480]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	08db      	lsrs	r3, r3, #3
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	4a77      	ldr	r2, [pc, #476]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c2:	e011      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80078c4:	4b73      	ldr	r3, [pc, #460]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d0:	d106      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80078d8:	d102      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80078da:	4b70      	ldr	r3, [pc, #448]	@ (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078de:	e003      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078e4:	f001 b831 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078e8:	f001 b82f 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80078ec:	4b69      	ldr	r3, [pc, #420]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80078ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078f2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80078f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078fe:	f7fc f8cf 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8007902:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007904:	f001 b821 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800790e:	d108      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007910:	f107 0308 	add.w	r3, r7, #8
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fb63 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800791e:	f001 b814 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007922:	4b5c      	ldr	r3, [pc, #368]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b02      	cmp	r3, #2
 800792c:	d10e      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007934:	d10a      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007936:	4b57      	ldr	r3, [pc, #348]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	08db      	lsrs	r3, r3, #3
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	4a55      	ldr	r2, [pc, #340]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007948:	f000 bfff 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007950:	f000 bffb 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007954:	4b4f      	ldr	r3, [pc, #316]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007956:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800795a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800795e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007962:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007966:	d056      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800796e:	f200 808b 	bhi.w	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007978:	d03e      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007980:	f200 8082 	bhi.w	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800798a:	d027      	beq.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007992:	d879      	bhi.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800799a:	d017      	beq.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a2:	d871      	bhi.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b0:	d004      	beq.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80079b2:	e069      	b.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80079b4:	f7fc f8a0 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 80079b8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80079ba:	e068      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079bc:	f107 0314 	add.w	r3, r7, #20
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe f9a3 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079ca:	e060      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079cc:	f107 0308 	add.w	r3, r7, #8
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe fb05 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079da:	e058      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80079dc:	4b2d      	ldr	r3, [pc, #180]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d103      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80079ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80079f0:	e04d      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079f6:	e04a      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80079f8:	4b26      	ldr	r3, [pc, #152]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a06:	d103      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007a08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007a0e:	e03e      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a14:	e03b      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a16:	4b1f      	ldr	r3, [pc, #124]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a22:	4b1c      	ldr	r3, [pc, #112]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d10c      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a34:	4b17      	ldr	r3, [pc, #92]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	4a16      	ldr	r2, [pc, #88]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a46:	e01e      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a48:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	d106      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5c:	d102      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a62:	e010      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a64:	4b0b      	ldr	r3, [pc, #44]	@ (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a70:	d106      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a78:	d102      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a7a:	4b09      	ldr	r3, [pc, #36]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a7e:	e002      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a84:	e003      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007a86:	e002      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a8c:	bf00      	nop
          }
        }
        break;
 8007a8e:	f000 bf5c 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a92:	bf00      	nop
 8007a94:	44020c00 	.word	0x44020c00
 8007a98:	03d09000 	.word	0x03d09000
 8007a9c:	003d0900 	.word	0x003d0900
 8007aa0:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007aa4:	4b9e      	ldr	r3, [pc, #632]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007aa6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007aaa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ab6:	d056      	beq.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007abe:	f200 808b 	bhi.w	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ac8:	d03e      	beq.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad0:	f200 8082 	bhi.w	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ada:	d027      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ade:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ae2:	d879      	bhi.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aea:	d017      	beq.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007af2:	d871      	bhi.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b00:	d004      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007b02:	e069      	b.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007b04:	f7fb ffcc 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8007b08:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007b0a:	e068      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe f8fb 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b1a:	e060      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b1c:	f107 0308 	add.w	r3, r7, #8
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fa5d 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b2a:	e058      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d103      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007b40:	e04d      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b46:	e04a      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007b48:	4b75      	ldr	r3, [pc, #468]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b56:	d103      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007b58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007b5c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007b5e:	e03e      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b64:	e03b      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b66:	4b6e      	ldr	r3, [pc, #440]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b6c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b72:	4b6b      	ldr	r3, [pc, #428]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d10c      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d109      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b84:	4b66      	ldr	r3, [pc, #408]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	08db      	lsrs	r3, r3, #3
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	4a65      	ldr	r2, [pc, #404]	@ (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
 8007b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b96:	e01e      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b98:	4b61      	ldr	r3, [pc, #388]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba4:	d106      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8007ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bac:	d102      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007bae:	4b5e      	ldr	r3, [pc, #376]	@ (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb2:	e010      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc0:	d106      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bc8:	d102      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007bca:	4b58      	ldr	r3, [pc, #352]	@ (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bce:	e002      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007bd4:	e003      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007bd6:	e002      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bdc:	bf00      	nop
          }
        }
        break;
 8007bde:	f000 beb4 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007be2:	4b4f      	ldr	r3, [pc, #316]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007be4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007be8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bf4:	d056      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bfc:	f200 808b 	bhi.w	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c06:	d03e      	beq.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c0e:	f200 8082 	bhi.w	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c18:	d027      	beq.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c20:	d879      	bhi.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c28:	d017      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c30:	d871      	bhi.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c3e:	d004      	beq.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007c40:	e069      	b.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007c42:	f7fb ff59 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 8007c46:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007c48:	e068      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c4a:	f107 0314 	add.w	r3, r7, #20
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe f85c 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c58:	e060      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe f9be 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c68:	e058      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d103      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8007c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c7e:	e04d      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c84:	e04a      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007c86:	4b26      	ldr	r3, [pc, #152]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c94:	d103      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8007c96:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c9c:	e03e      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ca2:	e03b      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007caa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d10c      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cc2:	4b17      	ldr	r3, [pc, #92]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	08db      	lsrs	r3, r3, #3
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	4a15      	ldr	r2, [pc, #84]	@ (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007cce:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd4:	e01e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cd6:	4b12      	ldr	r3, [pc, #72]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cea:	d102      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007cec:	4b0e      	ldr	r3, [pc, #56]	@ (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	e010      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cfe:	d106      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d06:	d102      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d08:	4b08      	ldr	r3, [pc, #32]	@ (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d0c:	e002      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d12:	e003      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007d14:	e002      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d1a:	bf00      	nop
          }
        }
        break;
 8007d1c:	f000 be15 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d20:	44020c00 	.word	0x44020c00
 8007d24:	03d09000 	.word	0x03d09000
 8007d28:	003d0900 	.word	0x003d0900
 8007d2c:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007d30:	4b9e      	ldr	r3, [pc, #632]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007d32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d36:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8007d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007d42:	d056      	beq.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007d4a:	f200 808b 	bhi.w	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d54:	d03e      	beq.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d5c:	f200 8082 	bhi.w	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d66:	d027      	beq.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d6e:	d879      	bhi.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d76:	d017      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d7e:	d871      	bhi.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8c:	d004      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007d8e:	e069      	b.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007d90:	f7fb feb2 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 8007d94:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007d96:	e068      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fd ffb5 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007da6:	e060      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da8:	f107 0308 	add.w	r3, r7, #8
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe f917 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007db6:	e058      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007db8:	4b7c      	ldr	r3, [pc, #496]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d103      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8007dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dca:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dcc:	e04d      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dd2:	e04a      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007dd4:	4b75      	ldr	r3, [pc, #468]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007de2:	d103      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007de4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007de8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dea:	e03e      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007df0:	e03b      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007df2:	4b6e      	ldr	r3, [pc, #440]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007df8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d10c      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e10:	4b66      	ldr	r3, [pc, #408]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	08db      	lsrs	r3, r3, #3
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	4a65      	ldr	r2, [pc, #404]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e22:	e01e      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e24:	4b61      	ldr	r3, [pc, #388]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e30:	d106      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e38:	d102      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e3a:	4b5e      	ldr	r3, [pc, #376]	@ (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3e:	e010      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e40:	4b5a      	ldr	r3, [pc, #360]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4c:	d106      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e54:	d102      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e56:	4b58      	ldr	r3, [pc, #352]	@ (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5a:	e002      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007e60:	e003      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8007e62:	e002      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e68:	bf00      	nop
          }
        }
        break;
 8007e6a:	f000 bd6e 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007e70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007e74:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e80:	d056      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e88:	f200 808b 	bhi.w	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e92:	d03e      	beq.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e9a:	f200 8082 	bhi.w	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ea4:	d027      	beq.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007eac:	d879      	bhi.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eb4:	d017      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ebc:	d871      	bhi.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d004      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eca:	d004      	beq.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007ecc:	e069      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007ece:	f7fb fe13 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 8007ed2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007ed4:	e068      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed6:	f107 0314 	add.w	r3, r7, #20
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd ff16 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ee4:	e060      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ee6:	f107 0308 	add.w	r3, r7, #8
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe f878 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ef4:	e058      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d103      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f0a:	e04d      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f10:	e04a      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007f12:	4b26      	ldr	r3, [pc, #152]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f20:	d103      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007f22:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f26:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f28:	e03e      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f2e:	e03b      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f30:	4b1e      	ldr	r3, [pc, #120]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f36:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d10c      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f4e:	4b17      	ldr	r3, [pc, #92]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	08db      	lsrs	r3, r3, #3
 8007f54:	f003 0303 	and.w	r3, r3, #3
 8007f58:	4a15      	ldr	r2, [pc, #84]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f60:	e01e      	b.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f62:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f6e:	d106      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8007f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f76:	d102      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f78:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7c:	e010      	b.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f8a:	d106      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f92:	d102      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f94:	4b08      	ldr	r3, [pc, #32]	@ (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f98:	e002      	b.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007f9e:	e003      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8007fa0:	e002      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fa6:	bf00      	nop
          }
        }
        break;
 8007fa8:	f000 bccf 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fac:	44020c00 	.word	0x44020c00
 8007fb0:	03d09000 	.word	0x03d09000
 8007fb4:	003d0900 	.word	0x003d0900
 8007fb8:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007fbc:	4b9e      	ldr	r3, [pc, #632]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007fbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007fc2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fce:	d056      	beq.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fd6:	f200 808b 	bhi.w	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe0:	d03e      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe8:	f200 8082 	bhi.w	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ff2:	d027      	beq.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ffa:	d879      	bhi.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008002:	d017      	beq.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800800a:	d871      	bhi.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	2b00      	cmp	r3, #0
 8008010:	d004      	beq.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008018:	d004      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800801a:	e069      	b.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800801c:	f7fb fd6c 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 8008020:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008022:	e068      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	4618      	mov	r0, r3
 800802a:	f7fd fe6f 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008032:	e060      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4618      	mov	r0, r3
 800803a:	f7fd ffd1 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008042:	e058      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008044:	4b7c      	ldr	r3, [pc, #496]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b02      	cmp	r3, #2
 8008050:	d103      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8008052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008058:	e04d      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800805e:	e04a      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008060:	4b75      	ldr	r3, [pc, #468]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008066:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800806a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800806e:	d103      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008070:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008076:	e03e      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800807c:	e03b      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800807e:	4b6e      	ldr	r3, [pc, #440]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008084:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008088:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800808a:	4b6b      	ldr	r3, [pc, #428]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d10c      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800809c:	4b66      	ldr	r3, [pc, #408]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	08db      	lsrs	r3, r3, #3
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	4a65      	ldr	r2, [pc, #404]	@ (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80080a8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ae:	e01e      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080b0:	4b61      	ldr	r3, [pc, #388]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080bc:	d106      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80080be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c4:	d102      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80080c6:	4b5e      	ldr	r3, [pc, #376]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80080c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ca:	e010      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080cc:	4b5a      	ldr	r3, [pc, #360]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d8:	d106      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080e0:	d102      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80080e2:	4b58      	ldr	r3, [pc, #352]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80080e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e6:	e002      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80080ec:	e003      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80080ee:	e002      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080f4:	bf00      	nop
          }
        }
        break;
 80080f6:	f000 bc28 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80080fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80080fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008104:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008106:	4b4c      	ldr	r3, [pc, #304]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008112:	d106      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800811a:	4b4a      	ldr	r3, [pc, #296]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800811c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800811e:	f000 bc14 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008128:	d108      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800812a:	f107 0320 	add.w	r3, r7, #32
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd fc82 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008138:	f000 bc07 	b.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008142:	d107      	bne.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	4618      	mov	r0, r3
 800814a:	f7fd fddf 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008152:	e3fa      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008158:	e3f7      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800815a:	4b37      	ldr	r3, [pc, #220]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800815c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	633b      	str	r3, [r7, #48]	@ 0x30
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	2b04      	cmp	r3, #4
 800816a:	d861      	bhi.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800816c:	a201      	add	r2, pc, #4	@ (adr r2, 8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008172:	bf00      	nop
 8008174:	08008189 	.word	0x08008189
 8008178:	08008199 	.word	0x08008199
 800817c:	080081a9 	.word	0x080081a9
 8008180:	080081b9 	.word	0x080081b9
 8008184:	080081bf 	.word	0x080081bf
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008188:	f107 0320 	add.w	r3, r7, #32
 800818c:	4618      	mov	r0, r3
 800818e:	f7fd fc53 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008196:	e04e      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008198:	f107 0314 	add.w	r3, r7, #20
 800819c:	4618      	mov	r0, r3
 800819e:	f7fd fdb5 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081a6:	e046      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081a8:	f107 0308 	add.w	r3, r7, #8
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fd ff17 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081b6:	e03e      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80081b8:	4b23      	ldr	r3, [pc, #140]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80081ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081bc:	e03b      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081be:	4b1e      	ldr	r3, [pc, #120]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80081c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d10c      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d109      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081dc:	4b16      	ldr	r3, [pc, #88]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	08db      	lsrs	r3, r3, #3
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	4a15      	ldr	r2, [pc, #84]	@ (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ee:	e01e      	b.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081f0:	4b11      	ldr	r3, [pc, #68]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081fc:	d106      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80081fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008204:	d102      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008206:	4b0e      	ldr	r3, [pc, #56]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008208:	637b      	str	r3, [r7, #52]	@ 0x34
 800820a:	e010      	b.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800820c:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008218:	d106      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008220:	d102      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008222:	4b08      	ldr	r3, [pc, #32]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34
 8008226:	e002      	b.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800822c:	e003      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800822e:	e002      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008234:	bf00      	nop
          }
        }
        break;
 8008236:	e388      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008238:	44020c00 	.word	0x44020c00
 800823c:	03d09000 	.word	0x03d09000
 8008240:	003d0900 	.word	0x003d0900
 8008244:	017d7840 	.word	0x017d7840
 8008248:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800824c:	4ba9      	ldr	r3, [pc, #676]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800824e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008252:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008256:	633b      	str	r3, [r7, #48]	@ 0x30
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	2b20      	cmp	r3, #32
 800825c:	f200 809a 	bhi.w	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008260:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	080082ed 	.word	0x080082ed
 800826c:	08008395 	.word	0x08008395
 8008270:	08008395 	.word	0x08008395
 8008274:	08008395 	.word	0x08008395
 8008278:	08008395 	.word	0x08008395
 800827c:	08008395 	.word	0x08008395
 8008280:	08008395 	.word	0x08008395
 8008284:	08008395 	.word	0x08008395
 8008288:	080082fd 	.word	0x080082fd
 800828c:	08008395 	.word	0x08008395
 8008290:	08008395 	.word	0x08008395
 8008294:	08008395 	.word	0x08008395
 8008298:	08008395 	.word	0x08008395
 800829c:	08008395 	.word	0x08008395
 80082a0:	08008395 	.word	0x08008395
 80082a4:	08008395 	.word	0x08008395
 80082a8:	0800830d 	.word	0x0800830d
 80082ac:	08008395 	.word	0x08008395
 80082b0:	08008395 	.word	0x08008395
 80082b4:	08008395 	.word	0x08008395
 80082b8:	08008395 	.word	0x08008395
 80082bc:	08008395 	.word	0x08008395
 80082c0:	08008395 	.word	0x08008395
 80082c4:	08008395 	.word	0x08008395
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	08008395 	.word	0x08008395
 80082d0:	08008395 	.word	0x08008395
 80082d4:	08008395 	.word	0x08008395
 80082d8:	08008395 	.word	0x08008395
 80082dc:	08008395 	.word	0x08008395
 80082e0:	08008395 	.word	0x08008395
 80082e4:	08008395 	.word	0x08008395
 80082e8:	08008323 	.word	0x08008323
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082ec:	f107 0320 	add.w	r3, r7, #32
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd fba1 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082fa:	e04e      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082fc:	f107 0314 	add.w	r3, r7, #20
 8008300:	4618      	mov	r0, r3
 8008302:	f7fd fd03 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800830a:	e046      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800830c:	f107 0308 	add.w	r3, r7, #8
 8008310:	4618      	mov	r0, r3
 8008312:	f7fd fe65 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800831a:	e03e      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800831c:	4b76      	ldr	r3, [pc, #472]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800831e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008320:	e03b      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008322:	4b74      	ldr	r3, [pc, #464]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008328:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800832c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800832e:	4b71      	ldr	r3, [pc, #452]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b02      	cmp	r3, #2
 8008338:	d10c      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d109      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008340:	4b6c      	ldr	r3, [pc, #432]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	08db      	lsrs	r3, r3, #3
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	4a6c      	ldr	r2, [pc, #432]	@ (80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
 8008352:	e01e      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008354:	4b67      	ldr	r3, [pc, #412]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800835c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008360:	d106      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008368:	d102      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800836a:	4b65      	ldr	r3, [pc, #404]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800836c:	637b      	str	r3, [r7, #52]	@ 0x34
 800836e:	e010      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008370:	4b60      	ldr	r3, [pc, #384]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800837c:	d106      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800837e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008384:	d102      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008386:	4b5f      	ldr	r3, [pc, #380]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008388:	637b      	str	r3, [r7, #52]	@ 0x34
 800838a:	e002      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008390:	e003      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008392:	e002      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008398:	bf00      	nop
          }
        }
        break;
 800839a:	e2d6      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800839c:	4b55      	ldr	r3, [pc, #340]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800839e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083a2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80083a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ae:	d031      	beq.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80083b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b6:	d866      	bhi.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80083bc:	d027      	beq.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80083c2:	d860      	bhi.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80083c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c6:	2b80      	cmp	r3, #128	@ 0x80
 80083c8:	d019      	beq.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	2b80      	cmp	r3, #128	@ 0x80
 80083ce:	d85a      	bhi.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80083d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d008      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80083dc:	e053      	b.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083de:	f107 0320 	add.w	r3, r7, #32
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fb28 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083ec:	e04e      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ee:	f107 0314 	add.w	r3, r7, #20
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd fc8a 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083fc:	e046      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083fe:	f107 0308 	add.w	r3, r7, #8
 8008402:	4618      	mov	r0, r3
 8008404:	f7fd fdec 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800840c:	e03e      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800840e:	4b3a      	ldr	r3, [pc, #232]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008412:	e03b      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008414:	4b37      	ldr	r3, [pc, #220]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008416:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800841a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800841e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008420:	4b34      	ldr	r3, [pc, #208]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b02      	cmp	r3, #2
 800842a:	d10c      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800842c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008432:	4b30      	ldr	r3, [pc, #192]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	08db      	lsrs	r3, r3, #3
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	4a2f      	ldr	r2, [pc, #188]	@ (80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800843e:	fa22 f303 	lsr.w	r3, r2, r3
 8008442:	637b      	str	r3, [r7, #52]	@ 0x34
 8008444:	e01e      	b.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008446:	4b2b      	ldr	r3, [pc, #172]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800844e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008452:	d106      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800845a:	d102      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800845c:	4b28      	ldr	r3, [pc, #160]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008460:	e010      	b.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008462:	4b24      	ldr	r3, [pc, #144]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800846e:	d106      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008476:	d102      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008478:	4b22      	ldr	r3, [pc, #136]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800847a:	637b      	str	r3, [r7, #52]	@ 0x34
 800847c:	e002      	b.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008482:	e003      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008484:	e002      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800848a:	bf00      	nop
          }
        }
        break;
 800848c:	e25d      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800848e:	4b19      	ldr	r3, [pc, #100]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008494:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008498:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80084a0:	f7fb fb14 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 80084a4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80084a6:	e250      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80084a8:	4b12      	ldr	r3, [pc, #72]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084b4:	d10b      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084bc:	d107      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fd fc22 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80084cc:	e04f      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80084ce:	4b09      	ldr	r3, [pc, #36]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084da:	d115      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e2:	d111      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e4:	f107 0308 	add.w	r3, r7, #8
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fd fd79 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f2:	e03c      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80084f4:	44020c00 	.word	0x44020c00
 80084f8:	00bb8000 	.word	0x00bb8000
 80084fc:	03d09000 	.word	0x03d09000
 8008500:	003d0900 	.word	0x003d0900
 8008504:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008508:	4b94      	ldr	r3, [pc, #592]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b02      	cmp	r3, #2
 8008512:	d10d      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800851a:	d109      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800851c:	4b8f      	ldr	r3, [pc, #572]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	08db      	lsrs	r3, r3, #3
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	4a8e      	ldr	r2, [pc, #568]	@ (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
 800852c:	637b      	str	r3, [r7, #52]	@ 0x34
 800852e:	e01e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008530:	4b8a      	ldr	r3, [pc, #552]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800853c:	d106      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008544:	d102      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008546:	4b87      	ldr	r3, [pc, #540]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008548:	637b      	str	r3, [r7, #52]	@ 0x34
 800854a:	e010      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800854c:	4b83      	ldr	r3, [pc, #524]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008560:	d102      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008562:	4b81      	ldr	r3, [pc, #516]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
 8008566:	e002      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800856c:	e1ed      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800856e:	e1ec      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008570:	4b7a      	ldr	r3, [pc, #488]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008576:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800857a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	2b00      	cmp	r3, #0
 8008580:	d103      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008582:	f7fb fab9 	bl	8003af8 <HAL_RCC_GetPCLK3Freq>
 8008586:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008588:	e1df      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800858a:	4b74      	ldr	r3, [pc, #464]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008596:	d10b      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800859e:	d107      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a0:	f107 0314 	add.w	r3, r7, #20
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fd fbb1 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ae:	e045      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80085b0:	4b6a      	ldr	r3, [pc, #424]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085bc:	d10b      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085c4:	d107      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c6:	f107 0308 	add.w	r3, r7, #8
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fd fd08 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d4:	e032      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80085d6:	4b61      	ldr	r3, [pc, #388]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d10d      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085e8:	d109      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085ea:	4b5c      	ldr	r3, [pc, #368]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	08db      	lsrs	r3, r3, #3
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	4a5a      	ldr	r2, [pc, #360]	@ (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80085f6:	fa22 f303 	lsr.w	r3, r2, r3
 80085fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fc:	e01e      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80085fe:	4b57      	ldr	r3, [pc, #348]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800860a:	d106      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008612:	d102      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008614:	4b53      	ldr	r3, [pc, #332]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
 8008618:	e010      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800861a:	4b50      	ldr	r3, [pc, #320]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008626:	d106      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800862e:	d102      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008630:	4b4d      	ldr	r3, [pc, #308]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008632:	637b      	str	r3, [r7, #52]	@ 0x34
 8008634:	e002      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800863a:	e186      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800863c:	e185      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800863e:	4b47      	ldr	r3, [pc, #284]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008644:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008648:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	2b00      	cmp	r3, #0
 800864e:	d103      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008650:	f7fb fa3c 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 8008654:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008656:	e178      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008658:	4b40      	ldr	r3, [pc, #256]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008660:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008664:	d10b      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800866c:	d107      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866e:	f107 0314 	add.w	r3, r7, #20
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd fb4a 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34
 800867c:	e045      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800867e:	4b37      	ldr	r3, [pc, #220]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800868a:	d10b      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008692:	d107      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd fca1 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a2:	e032      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80086a4:	4b2d      	ldr	r3, [pc, #180]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d10d      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80086b6:	d109      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086b8:	4b28      	ldr	r3, [pc, #160]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	08db      	lsrs	r3, r3, #3
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	4a27      	ldr	r2, [pc, #156]	@ (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ca:	e01e      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80086cc:	4b23      	ldr	r3, [pc, #140]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d8:	d106      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086e0:	d102      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80086e2:	4b20      	ldr	r3, [pc, #128]	@ (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086e6:	e010      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80086e8:	4b1c      	ldr	r3, [pc, #112]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f4:	d106      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80086fc:	d102      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80086fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008700:	637b      	str	r3, [r7, #52]	@ 0x34
 8008702:	e002      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008708:	e11f      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800870a:	e11e      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800870c:	4b13      	ldr	r3, [pc, #76]	@ (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800870e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	633b      	str	r3, [r7, #48]	@ 0x30
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	2b03      	cmp	r3, #3
 800871c:	d85f      	bhi.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800871e:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008735 	.word	0x08008735
 8008728:	0800873d 	.word	0x0800873d
 800872c:	0800874d 	.word	0x0800874d
 8008730:	0800876d 	.word	0x0800876d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008734:	f7fb f998 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8008738:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800873a:	e053      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800873c:	f107 0320 	add.w	r3, r7, #32
 8008740:	4618      	mov	r0, r3
 8008742:	f7fd f979 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800874a:	e04b      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800874c:	f107 0314 	add.w	r3, r7, #20
 8008750:	4618      	mov	r0, r3
 8008752:	f7fd fadb 	bl	8005d0c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800875a:	e043      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800875c:	44020c00 	.word	0x44020c00
 8008760:	03d09000 	.word	0x03d09000
 8008764:	003d0900 	.word	0x003d0900
 8008768:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800876c:	4b79      	ldr	r3, [pc, #484]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800876e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008772:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008776:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008778:	4b76      	ldr	r3, [pc, #472]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b02      	cmp	r3, #2
 8008782:	d10c      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800878a:	4b72      	ldr	r3, [pc, #456]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	08db      	lsrs	r3, r3, #3
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	4a70      	ldr	r2, [pc, #448]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008796:	fa22 f303 	lsr.w	r3, r2, r3
 800879a:	637b      	str	r3, [r7, #52]	@ 0x34
 800879c:	e01e      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800879e:	4b6d      	ldr	r3, [pc, #436]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087aa:	d106      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80087ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b2:	d102      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087b4:	4b69      	ldr	r3, [pc, #420]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80087b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087b8:	e010      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087ba:	4b66      	ldr	r3, [pc, #408]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087c6:	d106      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 80087c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ce:	d102      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087d0:	4b63      	ldr	r3, [pc, #396]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d4:	e002      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80087dc:	e002      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087e2:	bf00      	nop
          }
        }
        break;
 80087e4:	e0b1      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80087e6:	4b5b      	ldr	r3, [pc, #364]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80087f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80087f2:	4b58      	ldr	r3, [pc, #352]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d106      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800880a:	637b      	str	r3, [r7, #52]	@ 0x34
 800880c:	e01f      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800880e:	4b51      	ldr	r3, [pc, #324]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800881c:	d106      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	2b40      	cmp	r3, #64	@ 0x40
 8008822:	d103      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008824:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008828:	637b      	str	r3, [r7, #52]	@ 0x34
 800882a:	e010      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800882c:	4b49      	ldr	r3, [pc, #292]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008838:	d106      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	2b80      	cmp	r3, #128	@ 0x80
 800883e:	d103      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008840:	f248 0312 	movw	r3, #32786	@ 0x8012
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
 8008846:	e002      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800884c:	e07d      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800884e:	e07c      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008850:	4b40      	ldr	r3, [pc, #256]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008856:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800885a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800885c:	4b3d      	ldr	r3, [pc, #244]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008868:	d105      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008870:	4b3c      	ldr	r3, [pc, #240]	@ (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008872:	637b      	str	r3, [r7, #52]	@ 0x34
 8008874:	e031      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008876:	4b37      	ldr	r3, [pc, #220]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008882:	d10a      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	2b10      	cmp	r3, #16
 8008888:	d107      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800888a:	f107 0320 	add.w	r3, r7, #32
 800888e:	4618      	mov	r0, r3
 8008890:	f7fd f8d2 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
 8008898:	e01f      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800889a:	4b2e      	ldr	r3, [pc, #184]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800889c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d106      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80088a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d103      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80088ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088b4:	e011      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80088b6:	4b27      	ldr	r3, [pc, #156]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c4:	d106      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	2b30      	cmp	r3, #48	@ 0x30
 80088ca:	d103      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 80088cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80088d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d2:	e002      	b.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80088d8:	e037      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088da:	e036      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80088dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088e6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d107      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ee:	f107 0320 	add.w	r3, r7, #32
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fd f8a0 	bl	8005a38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80088fc:	e025      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80088fe:	4b15      	ldr	r3, [pc, #84]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800890a:	d10a      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800890c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890e:	2b20      	cmp	r3, #32
 8008910:	d107      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008912:	f107 0308 	add.w	r3, r7, #8
 8008916:	4618      	mov	r0, r3
 8008918:	f7fd fb62 	bl	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008920:	e00f      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008922:	4b0c      	ldr	r3, [pc, #48]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800892a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800892e:	d105      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	2b30      	cmp	r3, #48	@ 0x30
 8008934:	d102      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008936:	4b0b      	ldr	r3, [pc, #44]	@ (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008938:	637b      	str	r3, [r7, #52]	@ 0x34
 800893a:	e002      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008940:	e003      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008942:	e002      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008948:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800894a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800894c:	4618      	mov	r0, r3
 800894e:	373c      	adds	r7, #60	@ 0x3c
 8008950:	46bd      	mov	sp, r7
 8008952:	bd90      	pop	{r4, r7, pc}
 8008954:	44020c00 	.word	0x44020c00
 8008958:	03d09000 	.word	0x03d09000
 800895c:	003d0900 	.word	0x003d0900
 8008960:	017d7840 	.word	0x017d7840
 8008964:	02dc6c00 	.word	0x02dc6c00

08008968 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008970:	4b48      	ldr	r3, [pc, #288]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a47      	ldr	r2, [pc, #284]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008976:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800897a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800897c:	f7f9 f8ae 	bl	8001adc <HAL_GetTick>
 8008980:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008982:	e008      	b.n	8008996 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008984:	f7f9 f8aa 	bl	8001adc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e07a      	b.n	8008a8c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008996:	4b3f      	ldr	r3, [pc, #252]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f0      	bne.n	8008984 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80089a2:	4b3c      	ldr	r3, [pc, #240]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 80089a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80089aa:	f023 0303 	bic.w	r3, r3, #3
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6811      	ldr	r1, [r2, #0]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6852      	ldr	r2, [r2, #4]
 80089b6:	0212      	lsls	r2, r2, #8
 80089b8:	430a      	orrs	r2, r1
 80089ba:	4936      	ldr	r1, [pc, #216]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	025b      	lsls	r3, r3, #9
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	3b01      	subs	r3, #1
 80089dc:	041b      	lsls	r3, r3, #16
 80089de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	061b      	lsls	r3, r3, #24
 80089ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089f0:	4928      	ldr	r1, [pc, #160]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80089f6:	4b27      	ldr	r3, [pc, #156]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 80089f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fa:	f023 020c 	bic.w	r2, r3, #12
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	4924      	ldr	r1, [pc, #144]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008a08:	4b22      	ldr	r3, [pc, #136]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0c:	f023 0220 	bic.w	r2, r3, #32
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	491f      	ldr	r1, [pc, #124]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a22:	491c      	ldr	r1, [pc, #112]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008a28:	4b1a      	ldr	r3, [pc, #104]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2c:	4a19      	ldr	r2, [pc, #100]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a2e:	f023 0310 	bic.w	r3, r3, #16
 8008a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008a34:	4b17      	ldr	r3, [pc, #92]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a3c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6a12      	ldr	r2, [r2, #32]
 8008a44:	00d2      	lsls	r2, r2, #3
 8008a46:	4913      	ldr	r1, [pc, #76]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008a4c:	4b11      	ldr	r3, [pc, #68]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	4a10      	ldr	r2, [pc, #64]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a52:	f043 0310 	orr.w	r3, r3, #16
 8008a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008a58:	4b0e      	ldr	r3, [pc, #56]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a64:	f7f9 f83a 	bl	8001adc <HAL_GetTick>
 8008a68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a6a:	e008      	b.n	8008a7e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a6c:	f7f9 f836 	bl	8001adc <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e006      	b.n	8008a8c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a7e:	4b05      	ldr	r3, [pc, #20]	@ (8008a94 <RCCEx_PLL2_Config+0x12c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0f0      	beq.n	8008a6c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0

}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	44020c00 	.word	0x44020c00

08008a98 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008aa0:	4b48      	ldr	r3, [pc, #288]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a47      	ldr	r2, [pc, #284]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008aac:	f7f9 f816 	bl	8001adc <HAL_GetTick>
 8008ab0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ab2:	e008      	b.n	8008ac6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ab4:	f7f9 f812 	bl	8001adc <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e07a      	b.n	8008bbc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f0      	bne.n	8008ab4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ada:	f023 0303 	bic.w	r3, r3, #3
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6811      	ldr	r1, [r2, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6852      	ldr	r2, [r2, #4]
 8008ae6:	0212      	lsls	r2, r2, #8
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	4936      	ldr	r1, [pc, #216]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	630b      	str	r3, [r1, #48]	@ 0x30
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	025b      	lsls	r3, r3, #9
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	061b      	lsls	r3, r3, #24
 8008b1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b20:	4928      	ldr	r1, [pc, #160]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b26:	4b27      	ldr	r3, [pc, #156]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2a:	f023 020c 	bic.w	r2, r3, #12
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	4924      	ldr	r1, [pc, #144]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008b38:	4b22      	ldr	r3, [pc, #136]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3c:	f023 0220 	bic.w	r2, r3, #32
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	491f      	ldr	r1, [pc, #124]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b52:	491c      	ldr	r1, [pc, #112]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008b58:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5c:	4a19      	ldr	r2, [pc, #100]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b5e:	f023 0310 	bic.w	r3, r3, #16
 8008b62:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008b64:	4b17      	ldr	r3, [pc, #92]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b6c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6a12      	ldr	r2, [r2, #32]
 8008b74:	00d2      	lsls	r2, r2, #3
 8008b76:	4913      	ldr	r1, [pc, #76]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008b7c:	4b11      	ldr	r3, [pc, #68]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b80:	4a10      	ldr	r2, [pc, #64]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b82:	f043 0310 	orr.w	r3, r3, #16
 8008b86:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008b88:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b94:	f7f8 ffa2 	bl	8001adc <HAL_GetTick>
 8008b98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b9a:	e008      	b.n	8008bae <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b9c:	f7f8 ff9e 	bl	8001adc <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d901      	bls.n	8008bae <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e006      	b.n	8008bbc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bae:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <RCCEx_PLL3_Config+0x12c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0f0      	beq.n	8008b9c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	44020c00 	.word	0x44020c00

08008bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e042      	b.n	8008c60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7f8 fddd 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2224      	movs	r2, #36	@ 0x24
 8008bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0201 	bic.w	r2, r2, #1
 8008c08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fab4 	bl	8009180 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f8c3 	bl	8008da4 <UART_SetConfig>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e01b      	b.n	8008c60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689a      	ldr	r2, [r3, #8]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fb33 	bl	80092c4 <UART_CheckIdleState>
 8008c5e:	4603      	mov	r3, r0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	@ 0x28
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	f040 808b 	bne.w	8008d9a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_UART_Transmit+0x28>
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e083      	b.n	8008d9c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c9e:	2b80      	cmp	r3, #128	@ 0x80
 8008ca0:	d107      	bne.n	8008cb2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cb0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2221      	movs	r2, #33	@ 0x21
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cc2:	f7f8 ff0b 	bl	8001adc <HAL_GetTick>
 8008cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	88fa      	ldrh	r2, [r7, #6]
 8008ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce0:	d108      	bne.n	8008cf4 <HAL_UART_Transmit+0x8c>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d104      	bne.n	8008cf4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	e003      	b.n	8008cfc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cfc:	e030      	b.n	8008d60 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2200      	movs	r2, #0
 8008d06:	2180      	movs	r1, #128	@ 0x80
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fb85 	bl	8009418 <UART_WaitOnFlagUntilTimeout>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e03d      	b.n	8008d9c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	3302      	adds	r3, #2
 8008d3a:	61bb      	str	r3, [r7, #24]
 8008d3c:	e007      	b.n	8008d4e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	781a      	ldrb	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1c8      	bne.n	8008cfe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	2140      	movs	r1, #64	@ 0x40
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fb4e 	bl	8009418 <UART_WaitOnFlagUntilTimeout>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d005      	beq.n	8008d8e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e006      	b.n	8008d9c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e000      	b.n	8008d9c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
  }
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008da8:	b094      	sub	sp, #80	@ 0x50
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b78      	ldr	r3, [pc, #480]	@ (8008f9c <UART_SetConfig+0x1f8>)
 8008dba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4971      	ldr	r1, [pc, #452]	@ (8008fa0 <UART_SetConfig+0x1fc>)
 8008ddc:	4019      	ands	r1, r3
 8008dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df4:	68d9      	ldr	r1, [r3, #12]
 8008df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	ea40 0301 	orr.w	r3, r0, r1
 8008dfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b64      	ldr	r3, [pc, #400]	@ (8008f9c <UART_SetConfig+0x1f8>)
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d009      	beq.n	8008e24 <UART_SetConfig+0x80>
 8008e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	4b63      	ldr	r3, [pc, #396]	@ (8008fa4 <UART_SetConfig+0x200>)
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d004      	beq.n	8008e24 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1c:	6a1a      	ldr	r2, [r3, #32]
 8008e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e20:	4313      	orrs	r3, r2
 8008e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008e2e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	f023 000f 	bic.w	r0, r3, #15
 8008e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	ea40 0301 	orr.w	r3, r0, r1
 8008e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	4b53      	ldr	r3, [pc, #332]	@ (8008fa8 <UART_SetConfig+0x204>)
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d102      	bne.n	8008e64 <UART_SetConfig+0xc0>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e62:	e066      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	4b50      	ldr	r3, [pc, #320]	@ (8008fac <UART_SetConfig+0x208>)
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d102      	bne.n	8008e74 <UART_SetConfig+0xd0>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e72:	e05e      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4b4d      	ldr	r3, [pc, #308]	@ (8008fb0 <UART_SetConfig+0x20c>)
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d102      	bne.n	8008e84 <UART_SetConfig+0xe0>
 8008e7e:	2304      	movs	r3, #4
 8008e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e82:	e056      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4b4a      	ldr	r3, [pc, #296]	@ (8008fb4 <UART_SetConfig+0x210>)
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d102      	bne.n	8008e94 <UART_SetConfig+0xf0>
 8008e8e:	2308      	movs	r3, #8
 8008e90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e92:	e04e      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	4b47      	ldr	r3, [pc, #284]	@ (8008fb8 <UART_SetConfig+0x214>)
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d102      	bne.n	8008ea4 <UART_SetConfig+0x100>
 8008e9e:	2310      	movs	r3, #16
 8008ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ea2:	e046      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	4b44      	ldr	r3, [pc, #272]	@ (8008fbc <UART_SetConfig+0x218>)
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d102      	bne.n	8008eb4 <UART_SetConfig+0x110>
 8008eae:	2320      	movs	r3, #32
 8008eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eb2:	e03e      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4b41      	ldr	r3, [pc, #260]	@ (8008fc0 <UART_SetConfig+0x21c>)
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d102      	bne.n	8008ec4 <UART_SetConfig+0x120>
 8008ebe:	2340      	movs	r3, #64	@ 0x40
 8008ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ec2:	e036      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8008fc4 <UART_SetConfig+0x220>)
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d102      	bne.n	8008ed4 <UART_SetConfig+0x130>
 8008ece:	2380      	movs	r3, #128	@ 0x80
 8008ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ed2:	e02e      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8008fc8 <UART_SetConfig+0x224>)
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d103      	bne.n	8008ee6 <UART_SetConfig+0x142>
 8008ede:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ee4:	e025      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b38      	ldr	r3, [pc, #224]	@ (8008fcc <UART_SetConfig+0x228>)
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d103      	bne.n	8008ef8 <UART_SetConfig+0x154>
 8008ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ef6:	e01c      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	4b34      	ldr	r3, [pc, #208]	@ (8008fd0 <UART_SetConfig+0x22c>)
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d103      	bne.n	8008f0a <UART_SetConfig+0x166>
 8008f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f08:	e013      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b31      	ldr	r3, [pc, #196]	@ (8008fd4 <UART_SetConfig+0x230>)
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d103      	bne.n	8008f1c <UART_SetConfig+0x178>
 8008f14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f1a:	e00a      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	4b1e      	ldr	r3, [pc, #120]	@ (8008f9c <UART_SetConfig+0x1f8>)
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d103      	bne.n	8008f2e <UART_SetConfig+0x18a>
 8008f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f2c:	e001      	b.n	8008f32 <UART_SetConfig+0x18e>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b19      	ldr	r3, [pc, #100]	@ (8008f9c <UART_SetConfig+0x1f8>)
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d005      	beq.n	8008f48 <UART_SetConfig+0x1a4>
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	4b18      	ldr	r3, [pc, #96]	@ (8008fa4 <UART_SetConfig+0x200>)
 8008f42:	429a      	cmp	r2, r3
 8008f44:	f040 8094 	bne.w	8009070 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	623b      	str	r3, [r7, #32]
 8008f4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f54:	f7fd f9ae 	bl	80062b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f58:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80f7 	beq.w	8009150 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f66:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd8 <UART_SetConfig+0x234>)
 8008f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	4413      	add	r3, r2
 8008f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d305      	bcc.n	8008f92 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d924      	bls.n	8008fdc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f98:	e069      	b.n	800906e <UART_SetConfig+0x2ca>
 8008f9a:	bf00      	nop
 8008f9c:	44002400 	.word	0x44002400
 8008fa0:	cfff69f3 	.word	0xcfff69f3
 8008fa4:	54002400 	.word	0x54002400
 8008fa8:	40013800 	.word	0x40013800
 8008fac:	40004400 	.word	0x40004400
 8008fb0:	40004800 	.word	0x40004800
 8008fb4:	40004c00 	.word	0x40004c00
 8008fb8:	40005000 	.word	0x40005000
 8008fbc:	40006400 	.word	0x40006400
 8008fc0:	40007800 	.word	0x40007800
 8008fc4:	40007c00 	.word	0x40007c00
 8008fc8:	40008000 	.word	0x40008000
 8008fcc:	40006800 	.word	0x40006800
 8008fd0:	40006c00 	.word	0x40006c00
 8008fd4:	40008400 	.word	0x40008400
 8008fd8:	0800df24 	.word	0x0800df24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fde:	2200      	movs	r2, #0
 8008fe0:	61bb      	str	r3, [r7, #24]
 8008fe2:	61fa      	str	r2, [r7, #28]
 8008fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	4a64      	ldr	r2, [pc, #400]	@ (800917c <UART_SetConfig+0x3d8>)
 8008fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	613b      	str	r3, [r7, #16]
 8008ff4:	617a      	str	r2, [r7, #20]
 8008ff6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ffe:	f7f7 fe53 	bl	8000ca8 <__aeabi_uldivmod>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4610      	mov	r0, r2
 8009008:	4619      	mov	r1, r3
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	020b      	lsls	r3, r1, #8
 8009014:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009018:	0202      	lsls	r2, r0, #8
 800901a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800901c:	6849      	ldr	r1, [r1, #4]
 800901e:	0849      	lsrs	r1, r1, #1
 8009020:	2000      	movs	r0, #0
 8009022:	460c      	mov	r4, r1
 8009024:	4605      	mov	r5, r0
 8009026:	eb12 0804 	adds.w	r8, r2, r4
 800902a:	eb43 0905 	adc.w	r9, r3, r5
 800902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	60fa      	str	r2, [r7, #12]
 8009038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800903c:	4640      	mov	r0, r8
 800903e:	4649      	mov	r1, r9
 8009040:	f7f7 fe32 	bl	8000ca8 <__aeabi_uldivmod>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4613      	mov	r3, r2
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800904c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009052:	d308      	bcc.n	8009066 <UART_SetConfig+0x2c2>
 8009054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800905a:	d204      	bcs.n	8009066 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800905c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009062:	60da      	str	r2, [r3, #12]
 8009064:	e003      	b.n	800906e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800906c:	e070      	b.n	8009150 <UART_SetConfig+0x3ac>
 800906e:	e06f      	b.n	8009150 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009078:	d13c      	bne.n	80090f4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800907a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800907c:	2200      	movs	r2, #0
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	607a      	str	r2, [r7, #4]
 8009082:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009086:	f7fd f915 	bl	80062b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800908a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800908c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d05e      	beq.n	8009150 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009096:	4a39      	ldr	r2, [pc, #228]	@ (800917c <UART_SetConfig+0x3d8>)
 8009098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909c:	461a      	mov	r2, r3
 800909e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a4:	005a      	lsls	r2, r3, #1
 80090a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	441a      	add	r2, r3
 80090ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d916      	bls.n	80090ec <UART_SetConfig+0x348>
 80090be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090c4:	d212      	bcs.n	80090ec <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f023 030f 	bic.w	r3, r3, #15
 80090ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	b29a      	uxth	r2, r3
 80090dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80090de:	4313      	orrs	r3, r2
 80090e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80090e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	e031      	b.n	8009150 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80090f2:	e02d      	b.n	8009150 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090f6:	2200      	movs	r2, #0
 80090f8:	469a      	mov	sl, r3
 80090fa:	4693      	mov	fp, r2
 80090fc:	4650      	mov	r0, sl
 80090fe:	4659      	mov	r1, fp
 8009100:	f7fd f8d8 	bl	80062b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009104:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d021      	beq.n	8009150 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009110:	4a1a      	ldr	r2, [pc, #104]	@ (800917c <UART_SetConfig+0x3d8>)
 8009112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009116:	461a      	mov	r2, r3
 8009118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800911a:	fbb3 f2f2 	udiv	r2, r3, r2
 800911e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	085b      	lsrs	r3, r3, #1
 8009124:	441a      	add	r2, r3
 8009126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	fbb2 f3f3 	udiv	r3, r2, r3
 800912e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009132:	2b0f      	cmp	r3, #15
 8009134:	d909      	bls.n	800914a <UART_SetConfig+0x3a6>
 8009136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800913c:	d205      	bcs.n	800914a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800913e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009140:	b29a      	uxth	r2, r3
 8009142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60da      	str	r2, [r3, #12]
 8009148:	e002      	b.n	8009150 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009152:	2201      	movs	r2, #1
 8009154:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915a:	2201      	movs	r2, #1
 800915c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009162:	2200      	movs	r2, #0
 8009164:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009168:	2200      	movs	r2, #0
 800916a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800916c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009170:	4618      	mov	r0, r3
 8009172:	3750      	adds	r7, #80	@ 0x50
 8009174:	46bd      	mov	sp, r7
 8009176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800917a:	bf00      	nop
 800917c:	0800df24 	.word	0x0800df24

08009180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918c:	f003 0308 	and.w	r3, r3, #8
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00a      	beq.n	80091aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00a      	beq.n	80091ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01a      	beq.n	8009296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800927a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800927e:	d10a      	bne.n	8009296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	605a      	str	r2, [r3, #4]
  }
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b098      	sub	sp, #96	@ 0x60
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092d4:	f7f8 fc02 	bl	8001adc <HAL_GetTick>
 80092d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d12f      	bne.n	8009348 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f0:	2200      	movs	r2, #0
 80092f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f88e 	bl	8009418 <UART_WaitOnFlagUntilTimeout>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d022      	beq.n	8009348 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009312:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009316:	653b      	str	r3, [r7, #80]	@ 0x50
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009320:	647b      	str	r3, [r7, #68]	@ 0x44
 8009322:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e6      	bne.n	8009302 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e063      	b.n	8009410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b04      	cmp	r3, #4
 8009354:	d149      	bne.n	80093ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009356:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800935e:	2200      	movs	r2, #0
 8009360:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f857 	bl	8009418 <UART_WaitOnFlagUntilTimeout>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d03c      	beq.n	80093ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	623b      	str	r3, [r7, #32]
   return(result);
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800938e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009390:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800939c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093c2:	61fa      	str	r2, [r7, #28]
 80093c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	69b9      	ldr	r1, [r7, #24]
 80093c8:	69fa      	ldr	r2, [r7, #28]
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	617b      	str	r3, [r7, #20]
   return(result);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e012      	b.n	8009410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3758      	adds	r7, #88	@ 0x58
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	4613      	mov	r3, r2
 8009426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009428:	e04f      	b.n	80094ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009430:	d04b      	beq.n	80094ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009432:	f7f8 fb53 	bl	8001adc <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	429a      	cmp	r2, r3
 8009440:	d302      	bcc.n	8009448 <UART_WaitOnFlagUntilTimeout+0x30>
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e04e      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b00      	cmp	r3, #0
 8009458:	d037      	beq.n	80094ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b80      	cmp	r3, #128	@ 0x80
 800945e:	d034      	beq.n	80094ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b40      	cmp	r3, #64	@ 0x40
 8009464:	d031      	beq.n	80094ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b08      	cmp	r3, #8
 8009472:	d110      	bne.n	8009496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2208      	movs	r2, #8
 800947a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f838 	bl	80094f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2208      	movs	r2, #8
 8009486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e029      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094a4:	d111      	bne.n	80094ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f81e 	bl	80094f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e00f      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69da      	ldr	r2, [r3, #28]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4013      	ands	r3, r2
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	bf0c      	ite	eq
 80094da:	2301      	moveq	r3, #1
 80094dc:	2300      	movne	r3, #0
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	461a      	mov	r2, r3
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d0a0      	beq.n	800942a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b095      	sub	sp, #84	@ 0x54
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800950e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009518:	643b      	str	r3, [r7, #64]	@ 0x40
 800951a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800951e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3308      	adds	r3, #8
 8009532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	61fb      	str	r3, [r7, #28]
   return(result);
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009542:	f023 0301 	bic.w	r3, r3, #1
 8009546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3308      	adds	r3, #8
 800954e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009550:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e3      	bne.n	800952c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d118      	bne.n	800959e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	60bb      	str	r3, [r7, #8]
   return(result);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f023 0310 	bic.w	r3, r3, #16
 8009580:	647b      	str	r3, [r7, #68]	@ 0x44
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	6979      	ldr	r1, [r7, #20]
 8009590:	69ba      	ldr	r2, [r7, #24]
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	613b      	str	r3, [r7, #16]
   return(result);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e6      	bne.n	800956c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80095b2:	bf00      	nop
 80095b4:	3754      	adds	r7, #84	@ 0x54
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095be:	b480      	push	{r7}
 80095c0:	b085      	sub	sp, #20
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e027      	b.n	8009624 <HAL_UARTEx_DisableFifoMode+0x66>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2224      	movs	r2, #36	@ 0x24
 80095e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0201 	bic.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009602:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009644:	2302      	movs	r3, #2
 8009646:	e02d      	b.n	80096a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2224      	movs	r2, #36	@ 0x24
 8009654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0201 	bic.w	r2, r2, #1
 800966e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f84f 	bl	8009728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d101      	bne.n	80096c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096c0:	2302      	movs	r3, #2
 80096c2:	e02d      	b.n	8009720 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2224      	movs	r2, #36	@ 0x24
 80096d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 0201 	bic.w	r2, r2, #1
 80096ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f811 	bl	8009728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009734:	2b00      	cmp	r3, #0
 8009736:	d108      	bne.n	800974a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009748:	e031      	b.n	80097ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800974a:	2308      	movs	r3, #8
 800974c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800974e:	2308      	movs	r3, #8
 8009750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	0e5b      	lsrs	r3, r3, #25
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	0f5b      	lsrs	r3, r3, #29
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	7b3a      	ldrb	r2, [r7, #12]
 8009776:	4911      	ldr	r1, [pc, #68]	@ (80097bc <UARTEx_SetNbDataToProcess+0x94>)
 8009778:	5c8a      	ldrb	r2, [r1, r2]
 800977a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800977e:	7b3a      	ldrb	r2, [r7, #12]
 8009780:	490f      	ldr	r1, [pc, #60]	@ (80097c0 <UARTEx_SetNbDataToProcess+0x98>)
 8009782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009784:	fb93 f3f2 	sdiv	r3, r3, r2
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	7b7a      	ldrb	r2, [r7, #13]
 8009794:	4909      	ldr	r1, [pc, #36]	@ (80097bc <UARTEx_SetNbDataToProcess+0x94>)
 8009796:	5c8a      	ldrb	r2, [r1, r2]
 8009798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800979c:	7b7a      	ldrb	r2, [r7, #13]
 800979e:	4908      	ldr	r1, [pc, #32]	@ (80097c0 <UARTEx_SetNbDataToProcess+0x98>)
 80097a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80097ae:	bf00      	nop
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	0800df3c 	.word	0x0800df3c
 80097c0:	0800df44 	.word	0x0800df44

080097c4 <__cvt>:
 80097c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	ec57 6b10 	vmov	r6, r7, d0
 80097cc:	2f00      	cmp	r7, #0
 80097ce:	460c      	mov	r4, r1
 80097d0:	4619      	mov	r1, r3
 80097d2:	463b      	mov	r3, r7
 80097d4:	bfb4      	ite	lt
 80097d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80097da:	2300      	movge	r3, #0
 80097dc:	4691      	mov	r9, r2
 80097de:	bfbf      	itttt	lt
 80097e0:	4632      	movlt	r2, r6
 80097e2:	461f      	movlt	r7, r3
 80097e4:	232d      	movlt	r3, #45	@ 0x2d
 80097e6:	4616      	movlt	r6, r2
 80097e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80097ec:	700b      	strb	r3, [r1, #0]
 80097ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097f0:	f023 0820 	bic.w	r8, r3, #32
 80097f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097f8:	d005      	beq.n	8009806 <__cvt+0x42>
 80097fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80097fe:	d100      	bne.n	8009802 <__cvt+0x3e>
 8009800:	3401      	adds	r4, #1
 8009802:	2102      	movs	r1, #2
 8009804:	e000      	b.n	8009808 <__cvt+0x44>
 8009806:	2103      	movs	r1, #3
 8009808:	ab03      	add	r3, sp, #12
 800980a:	4622      	mov	r2, r4
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	ab02      	add	r3, sp, #8
 8009810:	ec47 6b10 	vmov	d0, r6, r7
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	4653      	mov	r3, sl
 8009818:	f001 f88a 	bl	800a930 <_dtoa_r>
 800981c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009820:	4605      	mov	r5, r0
 8009822:	d119      	bne.n	8009858 <__cvt+0x94>
 8009824:	f019 0f01 	tst.w	r9, #1
 8009828:	d00e      	beq.n	8009848 <__cvt+0x84>
 800982a:	eb00 0904 	add.w	r9, r0, r4
 800982e:	2200      	movs	r2, #0
 8009830:	2300      	movs	r3, #0
 8009832:	4630      	mov	r0, r6
 8009834:	4639      	mov	r1, r7
 8009836:	f7f7 f957 	bl	8000ae8 <__aeabi_dcmpeq>
 800983a:	b108      	cbz	r0, 8009840 <__cvt+0x7c>
 800983c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009840:	2230      	movs	r2, #48	@ 0x30
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	454b      	cmp	r3, r9
 8009846:	d31e      	bcc.n	8009886 <__cvt+0xc2>
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	4628      	mov	r0, r5
 800984c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800984e:	1b5b      	subs	r3, r3, r5
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	b004      	add	sp, #16
 8009854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009858:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800985c:	eb00 0904 	add.w	r9, r0, r4
 8009860:	d1e5      	bne.n	800982e <__cvt+0x6a>
 8009862:	7803      	ldrb	r3, [r0, #0]
 8009864:	2b30      	cmp	r3, #48	@ 0x30
 8009866:	d10a      	bne.n	800987e <__cvt+0xba>
 8009868:	2200      	movs	r2, #0
 800986a:	2300      	movs	r3, #0
 800986c:	4630      	mov	r0, r6
 800986e:	4639      	mov	r1, r7
 8009870:	f7f7 f93a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009874:	b918      	cbnz	r0, 800987e <__cvt+0xba>
 8009876:	f1c4 0401 	rsb	r4, r4, #1
 800987a:	f8ca 4000 	str.w	r4, [sl]
 800987e:	f8da 3000 	ldr.w	r3, [sl]
 8009882:	4499      	add	r9, r3
 8009884:	e7d3      	b.n	800982e <__cvt+0x6a>
 8009886:	1c59      	adds	r1, r3, #1
 8009888:	9103      	str	r1, [sp, #12]
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	e7d9      	b.n	8009842 <__cvt+0x7e>

0800988e <__exponent>:
 800988e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009890:	2900      	cmp	r1, #0
 8009892:	7002      	strb	r2, [r0, #0]
 8009894:	bfba      	itte	lt
 8009896:	4249      	neglt	r1, r1
 8009898:	232d      	movlt	r3, #45	@ 0x2d
 800989a:	232b      	movge	r3, #43	@ 0x2b
 800989c:	2909      	cmp	r1, #9
 800989e:	7043      	strb	r3, [r0, #1]
 80098a0:	dd28      	ble.n	80098f4 <__exponent+0x66>
 80098a2:	f10d 0307 	add.w	r3, sp, #7
 80098a6:	270a      	movs	r7, #10
 80098a8:	461d      	mov	r5, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	3b01      	subs	r3, #1
 80098ae:	fbb1 f6f7 	udiv	r6, r1, r7
 80098b2:	fb07 1416 	mls	r4, r7, r6, r1
 80098b6:	3430      	adds	r4, #48	@ 0x30
 80098b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098bc:	460c      	mov	r4, r1
 80098be:	4631      	mov	r1, r6
 80098c0:	2c63      	cmp	r4, #99	@ 0x63
 80098c2:	dcf2      	bgt.n	80098aa <__exponent+0x1c>
 80098c4:	3130      	adds	r1, #48	@ 0x30
 80098c6:	1e94      	subs	r4, r2, #2
 80098c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098cc:	1c41      	adds	r1, r0, #1
 80098ce:	4623      	mov	r3, r4
 80098d0:	42ab      	cmp	r3, r5
 80098d2:	d30a      	bcc.n	80098ea <__exponent+0x5c>
 80098d4:	f10d 0309 	add.w	r3, sp, #9
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	42ac      	cmp	r4, r5
 80098dc:	bf88      	it	hi
 80098de:	2300      	movhi	r3, #0
 80098e0:	3302      	adds	r3, #2
 80098e2:	4403      	add	r3, r0
 80098e4:	1a18      	subs	r0, r3, r0
 80098e6:	b003      	add	sp, #12
 80098e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80098ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80098f2:	e7ed      	b.n	80098d0 <__exponent+0x42>
 80098f4:	2330      	movs	r3, #48	@ 0x30
 80098f6:	3130      	adds	r1, #48	@ 0x30
 80098f8:	7083      	strb	r3, [r0, #2]
 80098fa:	1d03      	adds	r3, r0, #4
 80098fc:	70c1      	strb	r1, [r0, #3]
 80098fe:	e7f1      	b.n	80098e4 <__exponent+0x56>

08009900 <_printf_float>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	b08d      	sub	sp, #52	@ 0x34
 8009906:	460c      	mov	r4, r1
 8009908:	4616      	mov	r6, r2
 800990a:	461f      	mov	r7, r3
 800990c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009910:	4605      	mov	r5, r0
 8009912:	f000 fef1 	bl	800a6f8 <_localeconv_r>
 8009916:	6803      	ldr	r3, [r0, #0]
 8009918:	4618      	mov	r0, r3
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	f7f6 fcb8 	bl	8000290 <strlen>
 8009920:	2300      	movs	r3, #0
 8009922:	9005      	str	r0, [sp, #20]
 8009924:	930a      	str	r3, [sp, #40]	@ 0x28
 8009926:	f8d8 3000 	ldr.w	r3, [r8]
 800992a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800992e:	3307      	adds	r3, #7
 8009930:	f8d4 b000 	ldr.w	fp, [r4]
 8009934:	f023 0307 	bic.w	r3, r3, #7
 8009938:	f103 0208 	add.w	r2, r3, #8
 800993c:	f8c8 2000 	str.w	r2, [r8]
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009948:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800994c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	4b9d      	ldr	r3, [pc, #628]	@ (8009bc8 <_printf_float+0x2c8>)
 8009954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009958:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800995c:	f7f7 f8f6 	bl	8000b4c <__aeabi_dcmpun>
 8009960:	bb70      	cbnz	r0, 80099c0 <_printf_float+0xc0>
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	4b98      	ldr	r3, [pc, #608]	@ (8009bc8 <_printf_float+0x2c8>)
 8009968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800996c:	f7f7 f8d0 	bl	8000b10 <__aeabi_dcmple>
 8009970:	bb30      	cbnz	r0, 80099c0 <_printf_float+0xc0>
 8009972:	2200      	movs	r2, #0
 8009974:	2300      	movs	r3, #0
 8009976:	4640      	mov	r0, r8
 8009978:	4649      	mov	r1, r9
 800997a:	f7f7 f8bf 	bl	8000afc <__aeabi_dcmplt>
 800997e:	b110      	cbz	r0, 8009986 <_printf_float+0x86>
 8009980:	232d      	movs	r3, #45	@ 0x2d
 8009982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009986:	4a91      	ldr	r2, [pc, #580]	@ (8009bcc <_printf_float+0x2cc>)
 8009988:	4b91      	ldr	r3, [pc, #580]	@ (8009bd0 <_printf_float+0x2d0>)
 800998a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800998e:	bf94      	ite	ls
 8009990:	4690      	movls	r8, r2
 8009992:	4698      	movhi	r8, r3
 8009994:	2303      	movs	r3, #3
 8009996:	f04f 0900 	mov.w	r9, #0
 800999a:	6123      	str	r3, [r4, #16]
 800999c:	f02b 0304 	bic.w	r3, fp, #4
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	4633      	mov	r3, r6
 80099a4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	9700      	str	r7, [sp, #0]
 80099ac:	f000 f9d2 	bl	8009d54 <_printf_common>
 80099b0:	3001      	adds	r0, #1
 80099b2:	f040 808d 	bne.w	8009ad0 <_printf_float+0x1d0>
 80099b6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ba:	b00d      	add	sp, #52	@ 0x34
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c0:	4642      	mov	r2, r8
 80099c2:	464b      	mov	r3, r9
 80099c4:	4640      	mov	r0, r8
 80099c6:	4649      	mov	r1, r9
 80099c8:	f7f7 f8c0 	bl	8000b4c <__aeabi_dcmpun>
 80099cc:	b140      	cbz	r0, 80099e0 <_printf_float+0xe0>
 80099ce:	464b      	mov	r3, r9
 80099d0:	4a80      	ldr	r2, [pc, #512]	@ (8009bd4 <_printf_float+0x2d4>)
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bfbc      	itt	lt
 80099d6:	232d      	movlt	r3, #45	@ 0x2d
 80099d8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099dc:	4b7e      	ldr	r3, [pc, #504]	@ (8009bd8 <_printf_float+0x2d8>)
 80099de:	e7d4      	b.n	800998a <_printf_float+0x8a>
 80099e0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80099e4:	6863      	ldr	r3, [r4, #4]
 80099e6:	9206      	str	r2, [sp, #24]
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	d13b      	bne.n	8009a64 <_printf_float+0x164>
 80099ec:	2306      	movs	r3, #6
 80099ee:	6063      	str	r3, [r4, #4]
 80099f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80099f4:	2300      	movs	r3, #0
 80099f6:	4628      	mov	r0, r5
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	ab0a      	add	r3, sp, #40	@ 0x28
 80099fe:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a02:	ab09      	add	r3, sp, #36	@ 0x24
 8009a04:	ec49 8b10 	vmov	d0, r8, r9
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a0e:	6861      	ldr	r1, [r4, #4]
 8009a10:	f7ff fed8 	bl	80097c4 <__cvt>
 8009a14:	9b06      	ldr	r3, [sp, #24]
 8009a16:	4680      	mov	r8, r0
 8009a18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a1a:	2b47      	cmp	r3, #71	@ 0x47
 8009a1c:	d129      	bne.n	8009a72 <_printf_float+0x172>
 8009a1e:	1cc8      	adds	r0, r1, #3
 8009a20:	db02      	blt.n	8009a28 <_printf_float+0x128>
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	4299      	cmp	r1, r3
 8009a26:	dd41      	ble.n	8009aac <_printf_float+0x1ac>
 8009a28:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a2c:	fa5f fa8a 	uxtb.w	sl, sl
 8009a30:	3901      	subs	r1, #1
 8009a32:	4652      	mov	r2, sl
 8009a34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a38:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a3a:	f7ff ff28 	bl	800988e <__exponent>
 8009a3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a40:	4681      	mov	r9, r0
 8009a42:	1813      	adds	r3, r2, r0
 8009a44:	2a01      	cmp	r2, #1
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	dc02      	bgt.n	8009a50 <_printf_float+0x150>
 8009a4a:	6822      	ldr	r2, [r4, #0]
 8009a4c:	07d2      	lsls	r2, r2, #31
 8009a4e:	d501      	bpl.n	8009a54 <_printf_float+0x154>
 8009a50:	3301      	adds	r3, #1
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0a2      	beq.n	80099a2 <_printf_float+0xa2>
 8009a5c:	232d      	movs	r3, #45	@ 0x2d
 8009a5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a62:	e79e      	b.n	80099a2 <_printf_float+0xa2>
 8009a64:	9a06      	ldr	r2, [sp, #24]
 8009a66:	2a47      	cmp	r2, #71	@ 0x47
 8009a68:	d1c2      	bne.n	80099f0 <_printf_float+0xf0>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1c0      	bne.n	80099f0 <_printf_float+0xf0>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e7bd      	b.n	80099ee <_printf_float+0xee>
 8009a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a76:	d9db      	bls.n	8009a30 <_printf_float+0x130>
 8009a78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a7c:	d118      	bne.n	8009ab0 <_printf_float+0x1b0>
 8009a7e:	2900      	cmp	r1, #0
 8009a80:	6863      	ldr	r3, [r4, #4]
 8009a82:	dd0b      	ble.n	8009a9c <_printf_float+0x19c>
 8009a84:	6121      	str	r1, [r4, #16]
 8009a86:	b913      	cbnz	r3, 8009a8e <_printf_float+0x18e>
 8009a88:	6822      	ldr	r2, [r4, #0]
 8009a8a:	07d0      	lsls	r0, r2, #31
 8009a8c:	d502      	bpl.n	8009a94 <_printf_float+0x194>
 8009a8e:	3301      	adds	r3, #1
 8009a90:	440b      	add	r3, r1
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	f04f 0900 	mov.w	r9, #0
 8009a98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a9a:	e7db      	b.n	8009a54 <_printf_float+0x154>
 8009a9c:	b913      	cbnz	r3, 8009aa4 <_printf_float+0x1a4>
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	07d2      	lsls	r2, r2, #31
 8009aa2:	d501      	bpl.n	8009aa8 <_printf_float+0x1a8>
 8009aa4:	3302      	adds	r3, #2
 8009aa6:	e7f4      	b.n	8009a92 <_printf_float+0x192>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e7f2      	b.n	8009a92 <_printf_float+0x192>
 8009aac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab2:	4299      	cmp	r1, r3
 8009ab4:	db05      	blt.n	8009ac2 <_printf_float+0x1c2>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	6121      	str	r1, [r4, #16]
 8009aba:	07d8      	lsls	r0, r3, #31
 8009abc:	d5ea      	bpl.n	8009a94 <_printf_float+0x194>
 8009abe:	1c4b      	adds	r3, r1, #1
 8009ac0:	e7e7      	b.n	8009a92 <_printf_float+0x192>
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	bfd4      	ite	le
 8009ac6:	f1c1 0202 	rsble	r2, r1, #2
 8009aca:	2201      	movgt	r2, #1
 8009acc:	4413      	add	r3, r2
 8009ace:	e7e0      	b.n	8009a92 <_printf_float+0x192>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	055a      	lsls	r2, r3, #21
 8009ad4:	d407      	bmi.n	8009ae6 <_printf_float+0x1e6>
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	4642      	mov	r2, r8
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b8      	blx	r7
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d12b      	bne.n	8009b3c <_printf_float+0x23c>
 8009ae4:	e767      	b.n	80099b6 <_printf_float+0xb6>
 8009ae6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009aea:	f240 80dd 	bls.w	8009ca8 <_printf_float+0x3a8>
 8009aee:	2200      	movs	r2, #0
 8009af0:	2300      	movs	r3, #0
 8009af2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009af6:	f7f6 fff7 	bl	8000ae8 <__aeabi_dcmpeq>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d033      	beq.n	8009b66 <_printf_float+0x266>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4a36      	ldr	r2, [pc, #216]	@ (8009bdc <_printf_float+0x2dc>)
 8009b02:	4631      	mov	r1, r6
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b8      	blx	r7
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f43f af54 	beq.w	80099b6 <_printf_float+0xb6>
 8009b0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b12:	4543      	cmp	r3, r8
 8009b14:	db02      	blt.n	8009b1c <_printf_float+0x21c>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	07d8      	lsls	r0, r3, #31
 8009b1a:	d50f      	bpl.n	8009b3c <_printf_float+0x23c>
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	f43f af45 	beq.w	80099b6 <_printf_float+0xb6>
 8009b2c:	f04f 0900 	mov.w	r9, #0
 8009b30:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b34:	f104 0a1a 	add.w	sl, r4, #26
 8009b38:	45c8      	cmp	r8, r9
 8009b3a:	dc09      	bgt.n	8009b50 <_printf_float+0x250>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	079b      	lsls	r3, r3, #30
 8009b40:	f100 8103 	bmi.w	8009d4a <_printf_float+0x44a>
 8009b44:	68e0      	ldr	r0, [r4, #12]
 8009b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b48:	4298      	cmp	r0, r3
 8009b4a:	bfb8      	it	lt
 8009b4c:	4618      	movlt	r0, r3
 8009b4e:	e734      	b.n	80099ba <_printf_float+0xba>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4652      	mov	r2, sl
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f af2b 	beq.w	80099b6 <_printf_float+0xb6>
 8009b60:	f109 0901 	add.w	r9, r9, #1
 8009b64:	e7e8      	b.n	8009b38 <_printf_float+0x238>
 8009b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	dc39      	bgt.n	8009be0 <_printf_float+0x2e0>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8009bdc <_printf_float+0x2dc>)
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f af1d 	beq.w	80099b6 <_printf_float+0xb6>
 8009b7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b80:	ea59 0303 	orrs.w	r3, r9, r3
 8009b84:	d102      	bne.n	8009b8c <_printf_float+0x28c>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	07d9      	lsls	r1, r3, #31
 8009b8a:	d5d7      	bpl.n	8009b3c <_printf_float+0x23c>
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b94:	47b8      	blx	r7
 8009b96:	3001      	adds	r0, #1
 8009b98:	f43f af0d 	beq.w	80099b6 <_printf_float+0xb6>
 8009b9c:	f04f 0a00 	mov.w	sl, #0
 8009ba0:	f104 0b1a 	add.w	fp, r4, #26
 8009ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba6:	425b      	negs	r3, r3
 8009ba8:	4553      	cmp	r3, sl
 8009baa:	dc01      	bgt.n	8009bb0 <_printf_float+0x2b0>
 8009bac:	464b      	mov	r3, r9
 8009bae:	e793      	b.n	8009ad8 <_printf_float+0x1d8>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	465a      	mov	r2, fp
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	47b8      	blx	r7
 8009bba:	3001      	adds	r0, #1
 8009bbc:	f43f aefb 	beq.w	80099b6 <_printf_float+0xb6>
 8009bc0:	f10a 0a01 	add.w	sl, sl, #1
 8009bc4:	e7ee      	b.n	8009ba4 <_printf_float+0x2a4>
 8009bc6:	bf00      	nop
 8009bc8:	7fefffff 	.word	0x7fefffff
 8009bcc:	0800df4c 	.word	0x0800df4c
 8009bd0:	0800df50 	.word	0x0800df50
 8009bd4:	0800df54 	.word	0x0800df54
 8009bd8:	0800df58 	.word	0x0800df58
 8009bdc:	0800df5c 	.word	0x0800df5c
 8009be0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009be2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009be6:	4553      	cmp	r3, sl
 8009be8:	bfa8      	it	ge
 8009bea:	4653      	movge	r3, sl
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	4699      	mov	r9, r3
 8009bf0:	dc36      	bgt.n	8009c60 <_printf_float+0x360>
 8009bf2:	f04f 0b00 	mov.w	fp, #0
 8009bf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bfa:	f104 021a 	add.w	r2, r4, #26
 8009bfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c00:	9306      	str	r3, [sp, #24]
 8009c02:	eba3 0309 	sub.w	r3, r3, r9
 8009c06:	455b      	cmp	r3, fp
 8009c08:	dc31      	bgt.n	8009c6e <_printf_float+0x36e>
 8009c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0c:	459a      	cmp	sl, r3
 8009c0e:	dc3a      	bgt.n	8009c86 <_printf_float+0x386>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	07da      	lsls	r2, r3, #31
 8009c14:	d437      	bmi.n	8009c86 <_printf_float+0x386>
 8009c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c18:	ebaa 0903 	sub.w	r9, sl, r3
 8009c1c:	9b06      	ldr	r3, [sp, #24]
 8009c1e:	ebaa 0303 	sub.w	r3, sl, r3
 8009c22:	4599      	cmp	r9, r3
 8009c24:	bfa8      	it	ge
 8009c26:	4699      	movge	r9, r3
 8009c28:	f1b9 0f00 	cmp.w	r9, #0
 8009c2c:	dc33      	bgt.n	8009c96 <_printf_float+0x396>
 8009c2e:	f04f 0800 	mov.w	r8, #0
 8009c32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c36:	f104 0b1a 	add.w	fp, r4, #26
 8009c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c40:	eba3 0309 	sub.w	r3, r3, r9
 8009c44:	4543      	cmp	r3, r8
 8009c46:	f77f af79 	ble.w	8009b3c <_printf_float+0x23c>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	465a      	mov	r2, fp
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b8      	blx	r7
 8009c54:	3001      	adds	r0, #1
 8009c56:	f43f aeae 	beq.w	80099b6 <_printf_float+0xb6>
 8009c5a:	f108 0801 	add.w	r8, r8, #1
 8009c5e:	e7ec      	b.n	8009c3a <_printf_float+0x33a>
 8009c60:	4642      	mov	r2, r8
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d1c2      	bne.n	8009bf2 <_printf_float+0x2f2>
 8009c6c:	e6a3      	b.n	80099b6 <_printf_float+0xb6>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	9206      	str	r2, [sp, #24]
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f ae9c 	beq.w	80099b6 <_printf_float+0xb6>
 8009c7e:	f10b 0b01 	add.w	fp, fp, #1
 8009c82:	9a06      	ldr	r2, [sp, #24]
 8009c84:	e7bb      	b.n	8009bfe <_printf_float+0x2fe>
 8009c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	d1c0      	bne.n	8009c16 <_printf_float+0x316>
 8009c94:	e68f      	b.n	80099b6 <_printf_float+0xb6>
 8009c96:	9a06      	ldr	r2, [sp, #24]
 8009c98:	464b      	mov	r3, r9
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	4442      	add	r2, r8
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d1c3      	bne.n	8009c2e <_printf_float+0x32e>
 8009ca6:	e686      	b.n	80099b6 <_printf_float+0xb6>
 8009ca8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009cac:	f1ba 0f01 	cmp.w	sl, #1
 8009cb0:	dc01      	bgt.n	8009cb6 <_printf_float+0x3b6>
 8009cb2:	07db      	lsls	r3, r3, #31
 8009cb4:	d536      	bpl.n	8009d24 <_printf_float+0x424>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4642      	mov	r2, r8
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f43f ae78 	beq.w	80099b6 <_printf_float+0xb6>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4628      	mov	r0, r5
 8009cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cce:	47b8      	blx	r7
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	f43f ae70 	beq.w	80099b6 <_printf_float+0xb6>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ce2:	f7f6 ff01 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ce6:	b9c0      	cbnz	r0, 8009d1a <_printf_float+0x41a>
 8009ce8:	4653      	mov	r3, sl
 8009cea:	f108 0201 	add.w	r2, r8, #1
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d10c      	bne.n	8009d12 <_printf_float+0x412>
 8009cf8:	e65d      	b.n	80099b6 <_printf_float+0xb6>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	465a      	mov	r2, fp
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	f43f ae56 	beq.w	80099b6 <_printf_float+0xb6>
 8009d0a:	f108 0801 	add.w	r8, r8, #1
 8009d0e:	45d0      	cmp	r8, sl
 8009d10:	dbf3      	blt.n	8009cfa <_printf_float+0x3fa>
 8009d12:	464b      	mov	r3, r9
 8009d14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d18:	e6df      	b.n	8009ada <_printf_float+0x1da>
 8009d1a:	f04f 0800 	mov.w	r8, #0
 8009d1e:	f104 0b1a 	add.w	fp, r4, #26
 8009d22:	e7f4      	b.n	8009d0e <_printf_float+0x40e>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4642      	mov	r2, r8
 8009d28:	e7e1      	b.n	8009cee <_printf_float+0x3ee>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f ae3e 	beq.w	80099b6 <_printf_float+0xb6>
 8009d3a:	f108 0801 	add.w	r8, r8, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	4543      	cmp	r3, r8
 8009d46:	dcf0      	bgt.n	8009d2a <_printf_float+0x42a>
 8009d48:	e6fc      	b.n	8009b44 <_printf_float+0x244>
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	f104 0919 	add.w	r9, r4, #25
 8009d52:	e7f4      	b.n	8009d3e <_printf_float+0x43e>

08009d54 <_printf_common>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	4616      	mov	r6, r2
 8009d5a:	4698      	mov	r8, r3
 8009d5c:	688a      	ldr	r2, [r1, #8]
 8009d5e:	4607      	mov	r7, r0
 8009d60:	690b      	ldr	r3, [r1, #16]
 8009d62:	460c      	mov	r4, r1
 8009d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	bfb8      	it	lt
 8009d6c:	4613      	movlt	r3, r2
 8009d6e:	6033      	str	r3, [r6, #0]
 8009d70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d74:	b10a      	cbz	r2, 8009d7a <_printf_common+0x26>
 8009d76:	3301      	adds	r3, #1
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	0699      	lsls	r1, r3, #26
 8009d7e:	bf42      	ittt	mi
 8009d80:	6833      	ldrmi	r3, [r6, #0]
 8009d82:	3302      	addmi	r3, #2
 8009d84:	6033      	strmi	r3, [r6, #0]
 8009d86:	6825      	ldr	r5, [r4, #0]
 8009d88:	f015 0506 	ands.w	r5, r5, #6
 8009d8c:	d106      	bne.n	8009d9c <_printf_common+0x48>
 8009d8e:	f104 0a19 	add.w	sl, r4, #25
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	6832      	ldr	r2, [r6, #0]
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dc2b      	bgt.n	8009df4 <_printf_common+0xa0>
 8009d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009da0:	6822      	ldr	r2, [r4, #0]
 8009da2:	3b00      	subs	r3, #0
 8009da4:	bf18      	it	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	0692      	lsls	r2, r2, #26
 8009daa:	d430      	bmi.n	8009e0e <_printf_common+0xba>
 8009dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009db0:	4641      	mov	r1, r8
 8009db2:	4638      	mov	r0, r7
 8009db4:	47c8      	blx	r9
 8009db6:	3001      	adds	r0, #1
 8009db8:	d023      	beq.n	8009e02 <_printf_common+0xae>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	341a      	adds	r4, #26
 8009dbe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009dc2:	f003 0306 	and.w	r3, r3, #6
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	bf0a      	itet	eq
 8009dca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009dce:	2500      	movne	r5, #0
 8009dd0:	6833      	ldreq	r3, [r6, #0]
 8009dd2:	f04f 0600 	mov.w	r6, #0
 8009dd6:	bf08      	it	eq
 8009dd8:	1aed      	subeq	r5, r5, r3
 8009dda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009dde:	bf08      	it	eq
 8009de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009de4:	4293      	cmp	r3, r2
 8009de6:	bfc4      	itt	gt
 8009de8:	1a9b      	subgt	r3, r3, r2
 8009dea:	18ed      	addgt	r5, r5, r3
 8009dec:	42b5      	cmp	r5, r6
 8009dee:	d11a      	bne.n	8009e26 <_printf_common+0xd2>
 8009df0:	2000      	movs	r0, #0
 8009df2:	e008      	b.n	8009e06 <_printf_common+0xb2>
 8009df4:	2301      	movs	r3, #1
 8009df6:	4652      	mov	r2, sl
 8009df8:	4641      	mov	r1, r8
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	47c8      	blx	r9
 8009dfe:	3001      	adds	r0, #1
 8009e00:	d103      	bne.n	8009e0a <_printf_common+0xb6>
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295
 8009e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0a:	3501      	adds	r5, #1
 8009e0c:	e7c1      	b.n	8009d92 <_printf_common+0x3e>
 8009e0e:	18e1      	adds	r1, r4, r3
 8009e10:	1c5a      	adds	r2, r3, #1
 8009e12:	2030      	movs	r0, #48	@ 0x30
 8009e14:	3302      	adds	r3, #2
 8009e16:	4422      	add	r2, r4
 8009e18:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e24:	e7c2      	b.n	8009dac <_printf_common+0x58>
 8009e26:	2301      	movs	r3, #1
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	47c8      	blx	r9
 8009e30:	3001      	adds	r0, #1
 8009e32:	d0e6      	beq.n	8009e02 <_printf_common+0xae>
 8009e34:	3601      	adds	r6, #1
 8009e36:	e7d9      	b.n	8009dec <_printf_common+0x98>

08009e38 <_printf_i>:
 8009e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	7e0f      	ldrb	r7, [r1, #24]
 8009e3e:	4691      	mov	r9, r2
 8009e40:	4680      	mov	r8, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	2f78      	cmp	r7, #120	@ 0x78
 8009e46:	469a      	mov	sl, r3
 8009e48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e4e:	d807      	bhi.n	8009e60 <_printf_i+0x28>
 8009e50:	2f62      	cmp	r7, #98	@ 0x62
 8009e52:	d80a      	bhi.n	8009e6a <_printf_i+0x32>
 8009e54:	2f00      	cmp	r7, #0
 8009e56:	f000 80d2 	beq.w	8009ffe <_printf_i+0x1c6>
 8009e5a:	2f58      	cmp	r7, #88	@ 0x58
 8009e5c:	f000 80b9 	beq.w	8009fd2 <_printf_i+0x19a>
 8009e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e68:	e03a      	b.n	8009ee0 <_printf_i+0xa8>
 8009e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e6e:	2b15      	cmp	r3, #21
 8009e70:	d8f6      	bhi.n	8009e60 <_printf_i+0x28>
 8009e72:	a101      	add	r1, pc, #4	@ (adr r1, 8009e78 <_printf_i+0x40>)
 8009e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e78:	08009ed1 	.word	0x08009ed1
 8009e7c:	08009ee5 	.word	0x08009ee5
 8009e80:	08009e61 	.word	0x08009e61
 8009e84:	08009e61 	.word	0x08009e61
 8009e88:	08009e61 	.word	0x08009e61
 8009e8c:	08009e61 	.word	0x08009e61
 8009e90:	08009ee5 	.word	0x08009ee5
 8009e94:	08009e61 	.word	0x08009e61
 8009e98:	08009e61 	.word	0x08009e61
 8009e9c:	08009e61 	.word	0x08009e61
 8009ea0:	08009e61 	.word	0x08009e61
 8009ea4:	08009fe5 	.word	0x08009fe5
 8009ea8:	08009f0f 	.word	0x08009f0f
 8009eac:	08009f9f 	.word	0x08009f9f
 8009eb0:	08009e61 	.word	0x08009e61
 8009eb4:	08009e61 	.word	0x08009e61
 8009eb8:	0800a007 	.word	0x0800a007
 8009ebc:	08009e61 	.word	0x08009e61
 8009ec0:	08009f0f 	.word	0x08009f0f
 8009ec4:	08009e61 	.word	0x08009e61
 8009ec8:	08009e61 	.word	0x08009e61
 8009ecc:	08009fa7 	.word	0x08009fa7
 8009ed0:	6833      	ldr	r3, [r6, #0]
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6032      	str	r2, [r6, #0]
 8009ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e09d      	b.n	800a020 <_printf_i+0x1e8>
 8009ee4:	6833      	ldr	r3, [r6, #0]
 8009ee6:	6820      	ldr	r0, [r4, #0]
 8009ee8:	1d19      	adds	r1, r3, #4
 8009eea:	6031      	str	r1, [r6, #0]
 8009eec:	0606      	lsls	r6, r0, #24
 8009eee:	d501      	bpl.n	8009ef4 <_printf_i+0xbc>
 8009ef0:	681d      	ldr	r5, [r3, #0]
 8009ef2:	e003      	b.n	8009efc <_printf_i+0xc4>
 8009ef4:	0645      	lsls	r5, r0, #25
 8009ef6:	d5fb      	bpl.n	8009ef0 <_printf_i+0xb8>
 8009ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	da03      	bge.n	8009f08 <_printf_i+0xd0>
 8009f00:	232d      	movs	r3, #45	@ 0x2d
 8009f02:	426d      	negs	r5, r5
 8009f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f08:	4859      	ldr	r0, [pc, #356]	@ (800a070 <_printf_i+0x238>)
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	e011      	b.n	8009f32 <_printf_i+0xfa>
 8009f0e:	6821      	ldr	r1, [r4, #0]
 8009f10:	6833      	ldr	r3, [r6, #0]
 8009f12:	0608      	lsls	r0, r1, #24
 8009f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f18:	d402      	bmi.n	8009f20 <_printf_i+0xe8>
 8009f1a:	0649      	lsls	r1, r1, #25
 8009f1c:	bf48      	it	mi
 8009f1e:	b2ad      	uxthmi	r5, r5
 8009f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f22:	6033      	str	r3, [r6, #0]
 8009f24:	4852      	ldr	r0, [pc, #328]	@ (800a070 <_printf_i+0x238>)
 8009f26:	bf14      	ite	ne
 8009f28:	230a      	movne	r3, #10
 8009f2a:	2308      	moveq	r3, #8
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f32:	6866      	ldr	r6, [r4, #4]
 8009f34:	2e00      	cmp	r6, #0
 8009f36:	60a6      	str	r6, [r4, #8]
 8009f38:	bfa2      	ittt	ge
 8009f3a:	6821      	ldrge	r1, [r4, #0]
 8009f3c:	f021 0104 	bicge.w	r1, r1, #4
 8009f40:	6021      	strge	r1, [r4, #0]
 8009f42:	b90d      	cbnz	r5, 8009f48 <_printf_i+0x110>
 8009f44:	2e00      	cmp	r6, #0
 8009f46:	d04b      	beq.n	8009fe0 <_printf_i+0x1a8>
 8009f48:	4616      	mov	r6, r2
 8009f4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f4e:	fb03 5711 	mls	r7, r3, r1, r5
 8009f52:	5dc7      	ldrb	r7, [r0, r7]
 8009f54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f58:	462f      	mov	r7, r5
 8009f5a:	460d      	mov	r5, r1
 8009f5c:	42bb      	cmp	r3, r7
 8009f5e:	d9f4      	bls.n	8009f4a <_printf_i+0x112>
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d10b      	bne.n	8009f7c <_printf_i+0x144>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	07df      	lsls	r7, r3, #31
 8009f68:	d508      	bpl.n	8009f7c <_printf_i+0x144>
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	6861      	ldr	r1, [r4, #4]
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	bfde      	ittt	le
 8009f72:	2330      	movle	r3, #48	@ 0x30
 8009f74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f7c:	1b92      	subs	r2, r2, r6
 8009f7e:	6122      	str	r2, [r4, #16]
 8009f80:	464b      	mov	r3, r9
 8009f82:	aa03      	add	r2, sp, #12
 8009f84:	4621      	mov	r1, r4
 8009f86:	4640      	mov	r0, r8
 8009f88:	f8cd a000 	str.w	sl, [sp]
 8009f8c:	f7ff fee2 	bl	8009d54 <_printf_common>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d14a      	bne.n	800a02a <_printf_i+0x1f2>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	b004      	add	sp, #16
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	f043 0320 	orr.w	r3, r3, #32
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	2778      	movs	r7, #120	@ 0x78
 8009fa8:	4832      	ldr	r0, [pc, #200]	@ (800a074 <_printf_i+0x23c>)
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fb0:	061f      	lsls	r7, r3, #24
 8009fb2:	6831      	ldr	r1, [r6, #0]
 8009fb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fb8:	d402      	bmi.n	8009fc0 <_printf_i+0x188>
 8009fba:	065f      	lsls	r7, r3, #25
 8009fbc:	bf48      	it	mi
 8009fbe:	b2ad      	uxthmi	r5, r5
 8009fc0:	6031      	str	r1, [r6, #0]
 8009fc2:	07d9      	lsls	r1, r3, #31
 8009fc4:	bf44      	itt	mi
 8009fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fca:	6023      	strmi	r3, [r4, #0]
 8009fcc:	b11d      	cbz	r5, 8009fd6 <_printf_i+0x19e>
 8009fce:	2310      	movs	r3, #16
 8009fd0:	e7ac      	b.n	8009f2c <_printf_i+0xf4>
 8009fd2:	4827      	ldr	r0, [pc, #156]	@ (800a070 <_printf_i+0x238>)
 8009fd4:	e7e9      	b.n	8009faa <_printf_i+0x172>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	f023 0320 	bic.w	r3, r3, #32
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	e7f6      	b.n	8009fce <_printf_i+0x196>
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	e7bd      	b.n	8009f60 <_printf_i+0x128>
 8009fe4:	6833      	ldr	r3, [r6, #0]
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	1d18      	adds	r0, r3, #4
 8009fea:	6961      	ldr	r1, [r4, #20]
 8009fec:	6030      	str	r0, [r6, #0]
 8009fee:	062e      	lsls	r6, r5, #24
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	d501      	bpl.n	8009ff8 <_printf_i+0x1c0>
 8009ff4:	6019      	str	r1, [r3, #0]
 8009ff6:	e002      	b.n	8009ffe <_printf_i+0x1c6>
 8009ff8:	0668      	lsls	r0, r5, #25
 8009ffa:	d5fb      	bpl.n	8009ff4 <_printf_i+0x1bc>
 8009ffc:	8019      	strh	r1, [r3, #0]
 8009ffe:	2300      	movs	r3, #0
 800a000:	4616      	mov	r6, r2
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	e7bc      	b.n	8009f80 <_printf_i+0x148>
 800a006:	6833      	ldr	r3, [r6, #0]
 800a008:	2100      	movs	r1, #0
 800a00a:	1d1a      	adds	r2, r3, #4
 800a00c:	6032      	str	r2, [r6, #0]
 800a00e:	681e      	ldr	r6, [r3, #0]
 800a010:	6862      	ldr	r2, [r4, #4]
 800a012:	4630      	mov	r0, r6
 800a014:	f000 fbe7 	bl	800a7e6 <memchr>
 800a018:	b108      	cbz	r0, 800a01e <_printf_i+0x1e6>
 800a01a:	1b80      	subs	r0, r0, r6
 800a01c:	6060      	str	r0, [r4, #4]
 800a01e:	6863      	ldr	r3, [r4, #4]
 800a020:	6123      	str	r3, [r4, #16]
 800a022:	2300      	movs	r3, #0
 800a024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a028:	e7aa      	b.n	8009f80 <_printf_i+0x148>
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	4632      	mov	r2, r6
 800a02e:	4649      	mov	r1, r9
 800a030:	4640      	mov	r0, r8
 800a032:	47d0      	blx	sl
 800a034:	3001      	adds	r0, #1
 800a036:	d0ad      	beq.n	8009f94 <_printf_i+0x15c>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	079b      	lsls	r3, r3, #30
 800a03c:	d413      	bmi.n	800a066 <_printf_i+0x22e>
 800a03e:	68e0      	ldr	r0, [r4, #12]
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	4298      	cmp	r0, r3
 800a044:	bfb8      	it	lt
 800a046:	4618      	movlt	r0, r3
 800a048:	e7a6      	b.n	8009f98 <_printf_i+0x160>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4632      	mov	r2, r6
 800a04e:	4649      	mov	r1, r9
 800a050:	4640      	mov	r0, r8
 800a052:	47d0      	blx	sl
 800a054:	3001      	adds	r0, #1
 800a056:	d09d      	beq.n	8009f94 <_printf_i+0x15c>
 800a058:	3501      	adds	r5, #1
 800a05a:	68e3      	ldr	r3, [r4, #12]
 800a05c:	9903      	ldr	r1, [sp, #12]
 800a05e:	1a5b      	subs	r3, r3, r1
 800a060:	42ab      	cmp	r3, r5
 800a062:	dcf2      	bgt.n	800a04a <_printf_i+0x212>
 800a064:	e7eb      	b.n	800a03e <_printf_i+0x206>
 800a066:	2500      	movs	r5, #0
 800a068:	f104 0619 	add.w	r6, r4, #25
 800a06c:	e7f5      	b.n	800a05a <_printf_i+0x222>
 800a06e:	bf00      	nop
 800a070:	0800df5e 	.word	0x0800df5e
 800a074:	0800df6f 	.word	0x0800df6f

0800a078 <_scanf_float>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	b087      	sub	sp, #28
 800a07e:	4617      	mov	r7, r2
 800a080:	4680      	mov	r8, r0
 800a082:	460c      	mov	r4, r1
 800a084:	9303      	str	r3, [sp, #12]
 800a086:	688b      	ldr	r3, [r1, #8]
 800a088:	1e5a      	subs	r2, r3, #1
 800a08a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a08e:	460a      	mov	r2, r1
 800a090:	bf89      	itett	hi
 800a092:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a096:	f04f 0b00 	movls.w	fp, #0
 800a09a:	eb03 0b05 	addhi.w	fp, r3, r5
 800a09e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a0a2:	f04f 0500 	mov.w	r5, #0
 800a0a6:	bf88      	it	hi
 800a0a8:	608b      	strhi	r3, [r1, #8]
 800a0aa:	680b      	ldr	r3, [r1, #0]
 800a0ac:	46aa      	mov	sl, r5
 800a0ae:	46a9      	mov	r9, r5
 800a0b0:	9502      	str	r5, [sp, #8]
 800a0b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a0b6:	f842 3b1c 	str.w	r3, [r2], #28
 800a0ba:	4616      	mov	r6, r2
 800a0bc:	9201      	str	r2, [sp, #4]
 800a0be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0c2:	68a2      	ldr	r2, [r4, #8]
 800a0c4:	b152      	cbz	r2, 800a0dc <_scanf_float+0x64>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b4e      	cmp	r3, #78	@ 0x4e
 800a0cc:	d864      	bhi.n	800a198 <_scanf_float+0x120>
 800a0ce:	2b40      	cmp	r3, #64	@ 0x40
 800a0d0:	d83c      	bhi.n	800a14c <_scanf_float+0xd4>
 800a0d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a0d6:	b2c8      	uxtb	r0, r1
 800a0d8:	280e      	cmp	r0, #14
 800a0da:	d93a      	bls.n	800a152 <_scanf_float+0xda>
 800a0dc:	f1b9 0f00 	cmp.w	r9, #0
 800a0e0:	d003      	beq.n	800a0ea <_scanf_float+0x72>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ee:	f1ba 0f01 	cmp.w	sl, #1
 800a0f2:	f200 8117 	bhi.w	800a324 <_scanf_float+0x2ac>
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	429e      	cmp	r6, r3
 800a0fa:	f200 8108 	bhi.w	800a30e <_scanf_float+0x296>
 800a0fe:	2001      	movs	r0, #1
 800a100:	b007      	add	sp, #28
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a10a:	2a0d      	cmp	r2, #13
 800a10c:	d8e6      	bhi.n	800a0dc <_scanf_float+0x64>
 800a10e:	a101      	add	r1, pc, #4	@ (adr r1, 800a114 <_scanf_float+0x9c>)
 800a110:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a114:	0800a25b 	.word	0x0800a25b
 800a118:	0800a0dd 	.word	0x0800a0dd
 800a11c:	0800a0dd 	.word	0x0800a0dd
 800a120:	0800a0dd 	.word	0x0800a0dd
 800a124:	0800a2bb 	.word	0x0800a2bb
 800a128:	0800a293 	.word	0x0800a293
 800a12c:	0800a0dd 	.word	0x0800a0dd
 800a130:	0800a0dd 	.word	0x0800a0dd
 800a134:	0800a269 	.word	0x0800a269
 800a138:	0800a0dd 	.word	0x0800a0dd
 800a13c:	0800a0dd 	.word	0x0800a0dd
 800a140:	0800a0dd 	.word	0x0800a0dd
 800a144:	0800a0dd 	.word	0x0800a0dd
 800a148:	0800a221 	.word	0x0800a221
 800a14c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a150:	e7db      	b.n	800a10a <_scanf_float+0x92>
 800a152:	290e      	cmp	r1, #14
 800a154:	d8c2      	bhi.n	800a0dc <_scanf_float+0x64>
 800a156:	a001      	add	r0, pc, #4	@ (adr r0, 800a15c <_scanf_float+0xe4>)
 800a158:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a15c:	0800a211 	.word	0x0800a211
 800a160:	0800a0dd 	.word	0x0800a0dd
 800a164:	0800a211 	.word	0x0800a211
 800a168:	0800a2a7 	.word	0x0800a2a7
 800a16c:	0800a0dd 	.word	0x0800a0dd
 800a170:	0800a1b9 	.word	0x0800a1b9
 800a174:	0800a1f7 	.word	0x0800a1f7
 800a178:	0800a1f7 	.word	0x0800a1f7
 800a17c:	0800a1f7 	.word	0x0800a1f7
 800a180:	0800a1f7 	.word	0x0800a1f7
 800a184:	0800a1f7 	.word	0x0800a1f7
 800a188:	0800a1f7 	.word	0x0800a1f7
 800a18c:	0800a1f7 	.word	0x0800a1f7
 800a190:	0800a1f7 	.word	0x0800a1f7
 800a194:	0800a1f7 	.word	0x0800a1f7
 800a198:	2b6e      	cmp	r3, #110	@ 0x6e
 800a19a:	d809      	bhi.n	800a1b0 <_scanf_float+0x138>
 800a19c:	2b60      	cmp	r3, #96	@ 0x60
 800a19e:	d8b2      	bhi.n	800a106 <_scanf_float+0x8e>
 800a1a0:	2b54      	cmp	r3, #84	@ 0x54
 800a1a2:	d07b      	beq.n	800a29c <_scanf_float+0x224>
 800a1a4:	2b59      	cmp	r3, #89	@ 0x59
 800a1a6:	d199      	bne.n	800a0dc <_scanf_float+0x64>
 800a1a8:	2d07      	cmp	r5, #7
 800a1aa:	d197      	bne.n	800a0dc <_scanf_float+0x64>
 800a1ac:	2508      	movs	r5, #8
 800a1ae:	e02c      	b.n	800a20a <_scanf_float+0x192>
 800a1b0:	2b74      	cmp	r3, #116	@ 0x74
 800a1b2:	d073      	beq.n	800a29c <_scanf_float+0x224>
 800a1b4:	2b79      	cmp	r3, #121	@ 0x79
 800a1b6:	e7f6      	b.n	800a1a6 <_scanf_float+0x12e>
 800a1b8:	6821      	ldr	r1, [r4, #0]
 800a1ba:	05c8      	lsls	r0, r1, #23
 800a1bc:	d51b      	bpl.n	800a1f6 <_scanf_float+0x17e>
 800a1be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a1c2:	f109 0901 	add.w	r9, r9, #1
 800a1c6:	6021      	str	r1, [r4, #0]
 800a1c8:	f1bb 0f00 	cmp.w	fp, #0
 800a1cc:	d003      	beq.n	800a1d6 <_scanf_float+0x15e>
 800a1ce:	3201      	adds	r2, #1
 800a1d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1d4:	60a2      	str	r2, [r4, #8]
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	60a3      	str	r3, [r4, #8]
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	607b      	str	r3, [r7, #4]
 800a1ea:	f340 8087 	ble.w	800a2fc <_scanf_float+0x284>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	e765      	b.n	800a0c2 <_scanf_float+0x4a>
 800a1f6:	eb1a 0105 	adds.w	r1, sl, r5
 800a1fa:	f47f af6f 	bne.w	800a0dc <_scanf_float+0x64>
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	460d      	mov	r5, r1
 800a202:	468a      	mov	sl, r1
 800a204:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a208:	6022      	str	r2, [r4, #0]
 800a20a:	f806 3b01 	strb.w	r3, [r6], #1
 800a20e:	e7e2      	b.n	800a1d6 <_scanf_float+0x15e>
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	0610      	lsls	r0, r2, #24
 800a214:	f57f af62 	bpl.w	800a0dc <_scanf_float+0x64>
 800a218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a21c:	6022      	str	r2, [r4, #0]
 800a21e:	e7f4      	b.n	800a20a <_scanf_float+0x192>
 800a220:	f1ba 0f00 	cmp.w	sl, #0
 800a224:	d10e      	bne.n	800a244 <_scanf_float+0x1cc>
 800a226:	f1b9 0f00 	cmp.w	r9, #0
 800a22a:	d10e      	bne.n	800a24a <_scanf_float+0x1d2>
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a232:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a236:	d108      	bne.n	800a24a <_scanf_float+0x1d2>
 800a238:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a23c:	f04f 0a01 	mov.w	sl, #1
 800a240:	6022      	str	r2, [r4, #0]
 800a242:	e7e2      	b.n	800a20a <_scanf_float+0x192>
 800a244:	f1ba 0f02 	cmp.w	sl, #2
 800a248:	d055      	beq.n	800a2f6 <_scanf_float+0x27e>
 800a24a:	2d01      	cmp	r5, #1
 800a24c:	d002      	beq.n	800a254 <_scanf_float+0x1dc>
 800a24e:	2d04      	cmp	r5, #4
 800a250:	f47f af44 	bne.w	800a0dc <_scanf_float+0x64>
 800a254:	3501      	adds	r5, #1
 800a256:	b2ed      	uxtb	r5, r5
 800a258:	e7d7      	b.n	800a20a <_scanf_float+0x192>
 800a25a:	f1ba 0f01 	cmp.w	sl, #1
 800a25e:	f47f af3d 	bne.w	800a0dc <_scanf_float+0x64>
 800a262:	f04f 0a02 	mov.w	sl, #2
 800a266:	e7d0      	b.n	800a20a <_scanf_float+0x192>
 800a268:	b97d      	cbnz	r5, 800a28a <_scanf_float+0x212>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	f47f af38 	bne.w	800a0e2 <_scanf_float+0x6a>
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a278:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a27c:	f040 8107 	bne.w	800a48e <_scanf_float+0x416>
 800a280:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a284:	2501      	movs	r5, #1
 800a286:	6022      	str	r2, [r4, #0]
 800a288:	e7bf      	b.n	800a20a <_scanf_float+0x192>
 800a28a:	2d03      	cmp	r5, #3
 800a28c:	d0e2      	beq.n	800a254 <_scanf_float+0x1dc>
 800a28e:	2d05      	cmp	r5, #5
 800a290:	e7de      	b.n	800a250 <_scanf_float+0x1d8>
 800a292:	2d02      	cmp	r5, #2
 800a294:	f47f af22 	bne.w	800a0dc <_scanf_float+0x64>
 800a298:	2503      	movs	r5, #3
 800a29a:	e7b6      	b.n	800a20a <_scanf_float+0x192>
 800a29c:	2d06      	cmp	r5, #6
 800a29e:	f47f af1d 	bne.w	800a0dc <_scanf_float+0x64>
 800a2a2:	2507      	movs	r5, #7
 800a2a4:	e7b1      	b.n	800a20a <_scanf_float+0x192>
 800a2a6:	6822      	ldr	r2, [r4, #0]
 800a2a8:	0591      	lsls	r1, r2, #22
 800a2aa:	f57f af17 	bpl.w	800a0dc <_scanf_float+0x64>
 800a2ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a2b2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2b6:	6022      	str	r2, [r4, #0]
 800a2b8:	e7a7      	b.n	800a20a <_scanf_float+0x192>
 800a2ba:	6822      	ldr	r2, [r4, #0]
 800a2bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a2c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a2c4:	d006      	beq.n	800a2d4 <_scanf_float+0x25c>
 800a2c6:	0550      	lsls	r0, r2, #21
 800a2c8:	f57f af08 	bpl.w	800a0dc <_scanf_float+0x64>
 800a2cc:	f1b9 0f00 	cmp.w	r9, #0
 800a2d0:	f000 80dd 	beq.w	800a48e <_scanf_float+0x416>
 800a2d4:	0591      	lsls	r1, r2, #22
 800a2d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2da:	bf58      	it	pl
 800a2dc:	9902      	ldrpl	r1, [sp, #8]
 800a2de:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a2e2:	bf58      	it	pl
 800a2e4:	eba9 0101 	subpl.w	r1, r9, r1
 800a2e8:	6022      	str	r2, [r4, #0]
 800a2ea:	f04f 0900 	mov.w	r9, #0
 800a2ee:	bf58      	it	pl
 800a2f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2f4:	e789      	b.n	800a20a <_scanf_float+0x192>
 800a2f6:	f04f 0a03 	mov.w	sl, #3
 800a2fa:	e786      	b.n	800a20a <_scanf_float+0x192>
 800a2fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a300:	4639      	mov	r1, r7
 800a302:	4640      	mov	r0, r8
 800a304:	4798      	blx	r3
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f aedb 	beq.w	800a0c2 <_scanf_float+0x4a>
 800a30c:	e6e6      	b.n	800a0dc <_scanf_float+0x64>
 800a30e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a312:	463a      	mov	r2, r7
 800a314:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a318:	4640      	mov	r0, r8
 800a31a:	4798      	blx	r3
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	3b01      	subs	r3, #1
 800a320:	6123      	str	r3, [r4, #16]
 800a322:	e6e8      	b.n	800a0f6 <_scanf_float+0x7e>
 800a324:	1e6b      	subs	r3, r5, #1
 800a326:	2b06      	cmp	r3, #6
 800a328:	d824      	bhi.n	800a374 <_scanf_float+0x2fc>
 800a32a:	2d02      	cmp	r5, #2
 800a32c:	d836      	bhi.n	800a39c <_scanf_float+0x324>
 800a32e:	9b01      	ldr	r3, [sp, #4]
 800a330:	429e      	cmp	r6, r3
 800a332:	f67f aee4 	bls.w	800a0fe <_scanf_float+0x86>
 800a336:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a33a:	463a      	mov	r2, r7
 800a33c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a340:	4640      	mov	r0, r8
 800a342:	4798      	blx	r3
 800a344:	6923      	ldr	r3, [r4, #16]
 800a346:	3b01      	subs	r3, #1
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	e7f0      	b.n	800a32e <_scanf_float+0x2b6>
 800a34c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a350:	463a      	mov	r2, r7
 800a352:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a356:	4640      	mov	r0, r8
 800a358:	4798      	blx	r3
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	6123      	str	r3, [r4, #16]
 800a360:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a364:	fa5f fa8a 	uxtb.w	sl, sl
 800a368:	f1ba 0f02 	cmp.w	sl, #2
 800a36c:	d1ee      	bne.n	800a34c <_scanf_float+0x2d4>
 800a36e:	3d03      	subs	r5, #3
 800a370:	b2ed      	uxtb	r5, r5
 800a372:	1b76      	subs	r6, r6, r5
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	05da      	lsls	r2, r3, #23
 800a378:	d52f      	bpl.n	800a3da <_scanf_float+0x362>
 800a37a:	055b      	lsls	r3, r3, #21
 800a37c:	d511      	bpl.n	800a3a2 <_scanf_float+0x32a>
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	429e      	cmp	r6, r3
 800a382:	f67f aebc 	bls.w	800a0fe <_scanf_float+0x86>
 800a386:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a38a:	463a      	mov	r2, r7
 800a38c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a390:	4640      	mov	r0, r8
 800a392:	4798      	blx	r3
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	3b01      	subs	r3, #1
 800a398:	6123      	str	r3, [r4, #16]
 800a39a:	e7f0      	b.n	800a37e <_scanf_float+0x306>
 800a39c:	46aa      	mov	sl, r5
 800a39e:	46b3      	mov	fp, r6
 800a3a0:	e7de      	b.n	800a360 <_scanf_float+0x2e8>
 800a3a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3a6:	1e75      	subs	r5, r6, #1
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	2965      	cmp	r1, #101	@ 0x65
 800a3ac:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3b0:	6123      	str	r3, [r4, #16]
 800a3b2:	d00c      	beq.n	800a3ce <_scanf_float+0x356>
 800a3b4:	2945      	cmp	r1, #69	@ 0x45
 800a3b6:	d00a      	beq.n	800a3ce <_scanf_float+0x356>
 800a3b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3bc:	463a      	mov	r2, r7
 800a3be:	4640      	mov	r0, r8
 800a3c0:	1eb5      	subs	r5, r6, #2
 800a3c2:	4798      	blx	r3
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	462e      	mov	r6, r5
 800a3d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3d4:	463a      	mov	r2, r7
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	4798      	blx	r3
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	f012 0210 	ands.w	r2, r2, #16
 800a3e0:	d001      	beq.n	800a3e6 <_scanf_float+0x36e>
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	e68c      	b.n	800a100 <_scanf_float+0x88>
 800a3e6:	7032      	strb	r2, [r6, #0]
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a3ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3f2:	d11c      	bne.n	800a42e <_scanf_float+0x3b6>
 800a3f4:	9b02      	ldr	r3, [sp, #8]
 800a3f6:	454b      	cmp	r3, r9
 800a3f8:	eba3 0209 	sub.w	r2, r3, r9
 800a3fc:	d123      	bne.n	800a446 <_scanf_float+0x3ce>
 800a3fe:	2200      	movs	r2, #0
 800a400:	9901      	ldr	r1, [sp, #4]
 800a402:	4640      	mov	r0, r8
 800a404:	f002 fc18 	bl	800cc38 <_strtod_r>
 800a408:	6821      	ldr	r1, [r4, #0]
 800a40a:	9b03      	ldr	r3, [sp, #12]
 800a40c:	f011 0f02 	tst.w	r1, #2
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	ec57 6b10 	vmov	r6, r7, d0
 800a416:	f103 0204 	add.w	r2, r3, #4
 800a41a:	d01f      	beq.n	800a45c <_scanf_float+0x3e4>
 800a41c:	9903      	ldr	r1, [sp, #12]
 800a41e:	600a      	str	r2, [r1, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	e9c3 6700 	strd	r6, r7, [r3]
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	3301      	adds	r3, #1
 800a42a:	60e3      	str	r3, [r4, #12]
 800a42c:	e7d9      	b.n	800a3e2 <_scanf_float+0x36a>
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0e4      	beq.n	800a3fe <_scanf_float+0x386>
 800a434:	9905      	ldr	r1, [sp, #20]
 800a436:	230a      	movs	r3, #10
 800a438:	4640      	mov	r0, r8
 800a43a:	3101      	adds	r1, #1
 800a43c:	f002 fc7c 	bl	800cd38 <_strtol_r>
 800a440:	9b04      	ldr	r3, [sp, #16]
 800a442:	9e05      	ldr	r6, [sp, #20]
 800a444:	1ac2      	subs	r2, r0, r3
 800a446:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a44a:	4912      	ldr	r1, [pc, #72]	@ (800a494 <_scanf_float+0x41c>)
 800a44c:	429e      	cmp	r6, r3
 800a44e:	bf28      	it	cs
 800a450:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f8e3 	bl	800a620 <siprintf>
 800a45a:	e7d0      	b.n	800a3fe <_scanf_float+0x386>
 800a45c:	f011 0f04 	tst.w	r1, #4
 800a460:	9903      	ldr	r1, [sp, #12]
 800a462:	600a      	str	r2, [r1, #0]
 800a464:	d1dc      	bne.n	800a420 <_scanf_float+0x3a8>
 800a466:	681d      	ldr	r5, [r3, #0]
 800a468:	4632      	mov	r2, r6
 800a46a:	463b      	mov	r3, r7
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f6 fb6c 	bl	8000b4c <__aeabi_dcmpun>
 800a474:	b128      	cbz	r0, 800a482 <_scanf_float+0x40a>
 800a476:	4808      	ldr	r0, [pc, #32]	@ (800a498 <_scanf_float+0x420>)
 800a478:	f000 f9c4 	bl	800a804 <nanf>
 800a47c:	ed85 0a00 	vstr	s0, [r5]
 800a480:	e7d1      	b.n	800a426 <_scanf_float+0x3ae>
 800a482:	4630      	mov	r0, r6
 800a484:	4639      	mov	r1, r7
 800a486:	f7f6 fbbf 	bl	8000c08 <__aeabi_d2f>
 800a48a:	6028      	str	r0, [r5, #0]
 800a48c:	e7cb      	b.n	800a426 <_scanf_float+0x3ae>
 800a48e:	f04f 0900 	mov.w	r9, #0
 800a492:	e62a      	b.n	800a0ea <_scanf_float+0x72>
 800a494:	0800df80 	.word	0x0800df80
 800a498:	0800e315 	.word	0x0800e315

0800a49c <std>:
 800a49c:	2300      	movs	r3, #0
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	6083      	str	r3, [r0, #8]
 800a4a4:	8181      	strh	r1, [r0, #12]
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4aa:	81c2      	strh	r2, [r0, #14]
 800a4ac:	2208      	movs	r2, #8
 800a4ae:	6183      	str	r3, [r0, #24]
 800a4b0:	e9c0 3300 	strd	r3, r3, [r0]
 800a4b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4b8:	305c      	adds	r0, #92	@ 0x5c
 800a4ba:	f000 f914 	bl	800a6e6 <memset>
 800a4be:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f4 <std+0x58>)
 800a4c0:	6224      	str	r4, [r4, #32]
 800a4c2:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f8 <std+0x5c>)
 800a4c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4fc <std+0x60>)
 800a4ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <std+0x64>)
 800a4ce:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a504 <std+0x68>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d006      	beq.n	800a4e4 <std+0x48>
 800a4d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4da:	4294      	cmp	r4, r2
 800a4dc:	d002      	beq.n	800a4e4 <std+0x48>
 800a4de:	33d0      	adds	r3, #208	@ 0xd0
 800a4e0:	429c      	cmp	r4, r3
 800a4e2:	d105      	bne.n	800a4f0 <std+0x54>
 800a4e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ec:	f000 b978 	b.w	800a7e0 <__retarget_lock_init_recursive>
 800a4f0:	bd10      	pop	{r4, pc}
 800a4f2:	bf00      	nop
 800a4f4:	0800a661 	.word	0x0800a661
 800a4f8:	0800a683 	.word	0x0800a683
 800a4fc:	0800a6bb 	.word	0x0800a6bb
 800a500:	0800a6df 	.word	0x0800a6df
 800a504:	200002e0 	.word	0x200002e0

0800a508 <stdio_exit_handler>:
 800a508:	4a02      	ldr	r2, [pc, #8]	@ (800a514 <stdio_exit_handler+0xc>)
 800a50a:	4903      	ldr	r1, [pc, #12]	@ (800a518 <stdio_exit_handler+0x10>)
 800a50c:	4803      	ldr	r0, [pc, #12]	@ (800a51c <stdio_exit_handler+0x14>)
 800a50e:	f000 b869 	b.w	800a5e4 <_fwalk_sglue>
 800a512:	bf00      	nop
 800a514:	2000000c 	.word	0x2000000c
 800a518:	0800d0f5 	.word	0x0800d0f5
 800a51c:	2000001c 	.word	0x2000001c

0800a520 <cleanup_stdio>:
 800a520:	6841      	ldr	r1, [r0, #4]
 800a522:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <cleanup_stdio+0x34>)
 800a524:	4299      	cmp	r1, r3
 800a526:	b510      	push	{r4, lr}
 800a528:	4604      	mov	r4, r0
 800a52a:	d001      	beq.n	800a530 <cleanup_stdio+0x10>
 800a52c:	f002 fde2 	bl	800d0f4 <_fflush_r>
 800a530:	68a1      	ldr	r1, [r4, #8]
 800a532:	4b09      	ldr	r3, [pc, #36]	@ (800a558 <cleanup_stdio+0x38>)
 800a534:	4299      	cmp	r1, r3
 800a536:	d002      	beq.n	800a53e <cleanup_stdio+0x1e>
 800a538:	4620      	mov	r0, r4
 800a53a:	f002 fddb 	bl	800d0f4 <_fflush_r>
 800a53e:	68e1      	ldr	r1, [r4, #12]
 800a540:	4b06      	ldr	r3, [pc, #24]	@ (800a55c <cleanup_stdio+0x3c>)
 800a542:	4299      	cmp	r1, r3
 800a544:	d004      	beq.n	800a550 <cleanup_stdio+0x30>
 800a546:	4620      	mov	r0, r4
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	f002 bdd2 	b.w	800d0f4 <_fflush_r>
 800a550:	bd10      	pop	{r4, pc}
 800a552:	bf00      	nop
 800a554:	200002e0 	.word	0x200002e0
 800a558:	20000348 	.word	0x20000348
 800a55c:	200003b0 	.word	0x200003b0

0800a560 <global_stdio_init.part.0>:
 800a560:	b510      	push	{r4, lr}
 800a562:	4b0b      	ldr	r3, [pc, #44]	@ (800a590 <global_stdio_init.part.0+0x30>)
 800a564:	2104      	movs	r1, #4
 800a566:	4c0b      	ldr	r4, [pc, #44]	@ (800a594 <global_stdio_init.part.0+0x34>)
 800a568:	4a0b      	ldr	r2, [pc, #44]	@ (800a598 <global_stdio_init.part.0+0x38>)
 800a56a:	4620      	mov	r0, r4
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	2200      	movs	r2, #0
 800a570:	f7ff ff94 	bl	800a49c <std>
 800a574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a578:	2201      	movs	r2, #1
 800a57a:	2109      	movs	r1, #9
 800a57c:	f7ff ff8e 	bl	800a49c <std>
 800a580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a584:	2202      	movs	r2, #2
 800a586:	2112      	movs	r1, #18
 800a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a58c:	f7ff bf86 	b.w	800a49c <std>
 800a590:	20000418 	.word	0x20000418
 800a594:	200002e0 	.word	0x200002e0
 800a598:	0800a509 	.word	0x0800a509

0800a59c <__sfp_lock_acquire>:
 800a59c:	4801      	ldr	r0, [pc, #4]	@ (800a5a4 <__sfp_lock_acquire+0x8>)
 800a59e:	f000 b920 	b.w	800a7e2 <__retarget_lock_acquire_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	20000421 	.word	0x20000421

0800a5a8 <__sfp_lock_release>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	@ (800a5b0 <__sfp_lock_release+0x8>)
 800a5aa:	f000 b91b 	b.w	800a7e4 <__retarget_lock_release_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20000421 	.word	0x20000421

0800a5b4 <__sinit>:
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	f7ff fff0 	bl	800a59c <__sfp_lock_acquire>
 800a5bc:	6a23      	ldr	r3, [r4, #32]
 800a5be:	b11b      	cbz	r3, 800a5c8 <__sinit+0x14>
 800a5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c4:	f7ff bff0 	b.w	800a5a8 <__sfp_lock_release>
 800a5c8:	4b04      	ldr	r3, [pc, #16]	@ (800a5dc <__sinit+0x28>)
 800a5ca:	6223      	str	r3, [r4, #32]
 800a5cc:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <__sinit+0x2c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1f5      	bne.n	800a5c0 <__sinit+0xc>
 800a5d4:	f7ff ffc4 	bl	800a560 <global_stdio_init.part.0>
 800a5d8:	e7f2      	b.n	800a5c0 <__sinit+0xc>
 800a5da:	bf00      	nop
 800a5dc:	0800a521 	.word	0x0800a521
 800a5e0:	20000418 	.word	0x20000418

0800a5e4 <_fwalk_sglue>:
 800a5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	4688      	mov	r8, r1
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a5f8:	d505      	bpl.n	800a606 <_fwalk_sglue+0x22>
 800a5fa:	6824      	ldr	r4, [r4, #0]
 800a5fc:	2c00      	cmp	r4, #0
 800a5fe:	d1f7      	bne.n	800a5f0 <_fwalk_sglue+0xc>
 800a600:	4630      	mov	r0, r6
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d907      	bls.n	800a61c <_fwalk_sglue+0x38>
 800a60c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a610:	3301      	adds	r3, #1
 800a612:	d003      	beq.n	800a61c <_fwalk_sglue+0x38>
 800a614:	4629      	mov	r1, r5
 800a616:	4638      	mov	r0, r7
 800a618:	47c0      	blx	r8
 800a61a:	4306      	orrs	r6, r0
 800a61c:	3568      	adds	r5, #104	@ 0x68
 800a61e:	e7e9      	b.n	800a5f4 <_fwalk_sglue+0x10>

0800a620 <siprintf>:
 800a620:	b40e      	push	{r1, r2, r3}
 800a622:	b500      	push	{lr}
 800a624:	b09c      	sub	sp, #112	@ 0x70
 800a626:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a62a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a62c:	9002      	str	r0, [sp, #8]
 800a62e:	9006      	str	r0, [sp, #24]
 800a630:	9107      	str	r1, [sp, #28]
 800a632:	9104      	str	r1, [sp, #16]
 800a634:	4808      	ldr	r0, [pc, #32]	@ (800a658 <siprintf+0x38>)
 800a636:	4909      	ldr	r1, [pc, #36]	@ (800a65c <siprintf+0x3c>)
 800a638:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63c:	9105      	str	r1, [sp, #20]
 800a63e:	a902      	add	r1, sp, #8
 800a640:	6800      	ldr	r0, [r0, #0]
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	f002 fbd6 	bl	800cdf4 <_svfiprintf_r>
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	b01c      	add	sp, #112	@ 0x70
 800a650:	f85d eb04 	ldr.w	lr, [sp], #4
 800a654:	b003      	add	sp, #12
 800a656:	4770      	bx	lr
 800a658:	20000018 	.word	0x20000018
 800a65c:	ffff0208 	.word	0xffff0208

0800a660 <__sread>:
 800a660:	b510      	push	{r4, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	f000 f86c 	bl	800a744 <_read_r>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	bfab      	itete	ge
 800a670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a672:	89a3      	ldrhlt	r3, [r4, #12]
 800a674:	181b      	addge	r3, r3, r0
 800a676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a67a:	bfac      	ite	ge
 800a67c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a67e:	81a3      	strhlt	r3, [r4, #12]
 800a680:	bd10      	pop	{r4, pc}

0800a682 <__swrite>:
 800a682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a686:	461f      	mov	r7, r3
 800a688:	898b      	ldrh	r3, [r1, #12]
 800a68a:	4605      	mov	r5, r0
 800a68c:	460c      	mov	r4, r1
 800a68e:	05db      	lsls	r3, r3, #23
 800a690:	4616      	mov	r6, r2
 800a692:	d505      	bpl.n	800a6a0 <__swrite+0x1e>
 800a694:	2302      	movs	r3, #2
 800a696:	2200      	movs	r2, #0
 800a698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69c:	f000 f840 	bl	800a720 <_lseek_r>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	4632      	mov	r2, r6
 800a6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	463b      	mov	r3, r7
 800a6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b6:	f000 b857 	b.w	800a768 <_write_r>

0800a6ba <__sseek>:
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c2:	f000 f82d 	bl	800a720 <_lseek_r>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	bf15      	itete	ne
 800a6cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6d6:	81a3      	strheq	r3, [r4, #12]
 800a6d8:	bf18      	it	ne
 800a6da:	81a3      	strhne	r3, [r4, #12]
 800a6dc:	bd10      	pop	{r4, pc}

0800a6de <__sclose>:
 800a6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e2:	f000 b80d 	b.w	800a700 <_close_r>

0800a6e6 <memset>:
 800a6e6:	4402      	add	r2, r0
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d100      	bne.n	800a6f0 <memset+0xa>
 800a6ee:	4770      	bx	lr
 800a6f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a6f4:	e7f9      	b.n	800a6ea <memset+0x4>
	...

0800a6f8 <_localeconv_r>:
 800a6f8:	4800      	ldr	r0, [pc, #0]	@ (800a6fc <_localeconv_r+0x4>)
 800a6fa:	4770      	bx	lr
 800a6fc:	20000158 	.word	0x20000158

0800a700 <_close_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	2300      	movs	r3, #0
 800a704:	4d05      	ldr	r5, [pc, #20]	@ (800a71c <_close_r+0x1c>)
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f6 ff1c 	bl	8001548 <_close>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_close_r+0x1a>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_close_r+0x1a>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	2000041c 	.word	0x2000041c

0800a720 <_lseek_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4604      	mov	r4, r0
 800a724:	4d06      	ldr	r5, [pc, #24]	@ (800a740 <_lseek_r+0x20>)
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	602a      	str	r2, [r5, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f7f6 ff31 	bl	8001596 <_lseek>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_lseek_r+0x1e>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_lseek_r+0x1e>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	2000041c 	.word	0x2000041c

0800a744 <_read_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4604      	mov	r4, r0
 800a748:	4d06      	ldr	r5, [pc, #24]	@ (800a764 <_read_r+0x20>)
 800a74a:	4608      	mov	r0, r1
 800a74c:	4611      	mov	r1, r2
 800a74e:	2200      	movs	r2, #0
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f7f6 febf 	bl	80014d6 <_read>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_read_r+0x1e>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_read_r+0x1e>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	2000041c 	.word	0x2000041c

0800a768 <_write_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4604      	mov	r4, r0
 800a76c:	4d06      	ldr	r5, [pc, #24]	@ (800a788 <_write_r+0x20>)
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	2200      	movs	r2, #0
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f6 feca 	bl	8001510 <_write>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_write_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_write_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	2000041c 	.word	0x2000041c

0800a78c <__errno>:
 800a78c:	4b01      	ldr	r3, [pc, #4]	@ (800a794 <__errno+0x8>)
 800a78e:	6818      	ldr	r0, [r3, #0]
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	20000018 	.word	0x20000018

0800a798 <__libc_init_array>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	4d0d      	ldr	r5, [pc, #52]	@ (800a7d0 <__libc_init_array+0x38>)
 800a79c:	2600      	movs	r6, #0
 800a79e:	4c0d      	ldr	r4, [pc, #52]	@ (800a7d4 <__libc_init_array+0x3c>)
 800a7a0:	1b64      	subs	r4, r4, r5
 800a7a2:	10a4      	asrs	r4, r4, #2
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	d109      	bne.n	800a7bc <__libc_init_array+0x24>
 800a7a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a7d8 <__libc_init_array+0x40>)
 800a7aa:	2600      	movs	r6, #0
 800a7ac:	4c0b      	ldr	r4, [pc, #44]	@ (800a7dc <__libc_init_array+0x44>)
 800a7ae:	f003 fb8d 	bl	800decc <_init>
 800a7b2:	1b64      	subs	r4, r4, r5
 800a7b4:	10a4      	asrs	r4, r4, #2
 800a7b6:	42a6      	cmp	r6, r4
 800a7b8:	d105      	bne.n	800a7c6 <__libc_init_array+0x2e>
 800a7ba:	bd70      	pop	{r4, r5, r6, pc}
 800a7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c0:	3601      	adds	r6, #1
 800a7c2:	4798      	blx	r3
 800a7c4:	e7ee      	b.n	800a7a4 <__libc_init_array+0xc>
 800a7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	4798      	blx	r3
 800a7ce:	e7f2      	b.n	800a7b6 <__libc_init_array+0x1e>
 800a7d0:	0800e380 	.word	0x0800e380
 800a7d4:	0800e380 	.word	0x0800e380
 800a7d8:	0800e380 	.word	0x0800e380
 800a7dc:	0800e384 	.word	0x0800e384

0800a7e0 <__retarget_lock_init_recursive>:
 800a7e0:	4770      	bx	lr

0800a7e2 <__retarget_lock_acquire_recursive>:
 800a7e2:	4770      	bx	lr

0800a7e4 <__retarget_lock_release_recursive>:
 800a7e4:	4770      	bx	lr

0800a7e6 <memchr>:
 800a7e6:	b2c9      	uxtb	r1, r1
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4402      	add	r2, r0
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	d101      	bne.n	800a7f8 <memchr+0x12>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e003      	b.n	800a800 <memchr+0x1a>
 800a7f8:	7804      	ldrb	r4, [r0, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	428c      	cmp	r4, r1
 800a7fe:	d1f6      	bne.n	800a7ee <memchr+0x8>
 800a800:	bd10      	pop	{r4, pc}
	...

0800a804 <nanf>:
 800a804:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a80c <nanf+0x8>
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	7fc00000 	.word	0x7fc00000

0800a810 <quorem>:
 800a810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	6903      	ldr	r3, [r0, #16]
 800a816:	4607      	mov	r7, r0
 800a818:	690c      	ldr	r4, [r1, #16]
 800a81a:	42a3      	cmp	r3, r4
 800a81c:	f2c0 8083 	blt.w	800a926 <quorem+0x116>
 800a820:	3c01      	subs	r4, #1
 800a822:	f100 0514 	add.w	r5, r0, #20
 800a826:	f101 0814 	add.w	r8, r1, #20
 800a82a:	00a3      	lsls	r3, r4, #2
 800a82c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a840:	3301      	adds	r3, #1
 800a842:	429a      	cmp	r2, r3
 800a844:	fbb2 f6f3 	udiv	r6, r2, r3
 800a848:	d331      	bcc.n	800a8ae <quorem+0x9e>
 800a84a:	f04f 0a00 	mov.w	sl, #0
 800a84e:	46c4      	mov	ip, r8
 800a850:	46ae      	mov	lr, r5
 800a852:	46d3      	mov	fp, sl
 800a854:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a858:	b298      	uxth	r0, r3
 800a85a:	45e1      	cmp	r9, ip
 800a85c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a860:	fb06 a000 	mla	r0, r6, r0, sl
 800a864:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a868:	b280      	uxth	r0, r0
 800a86a:	fb06 2303 	mla	r3, r6, r3, r2
 800a86e:	f8de 2000 	ldr.w	r2, [lr]
 800a872:	b292      	uxth	r2, r2
 800a874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a878:	eba2 0200 	sub.w	r2, r2, r0
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f8de 0000 	ldr.w	r0, [lr]
 800a882:	445a      	add	r2, fp
 800a884:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a888:	b292      	uxth	r2, r2
 800a88a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a88e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a892:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a896:	f84e 2b04 	str.w	r2, [lr], #4
 800a89a:	d2db      	bcs.n	800a854 <quorem+0x44>
 800a89c:	9b00      	ldr	r3, [sp, #0]
 800a89e:	58eb      	ldr	r3, [r5, r3]
 800a8a0:	b92b      	cbnz	r3, 800a8ae <quorem+0x9e>
 800a8a2:	9b01      	ldr	r3, [sp, #4]
 800a8a4:	3b04      	subs	r3, #4
 800a8a6:	429d      	cmp	r5, r3
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	d330      	bcc.n	800a90e <quorem+0xfe>
 800a8ac:	613c      	str	r4, [r7, #16]
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f001 f9c8 	bl	800bc44 <__mcmp>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	db26      	blt.n	800a906 <quorem+0xf6>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8c0:	f8d1 c000 	ldr.w	ip, [r1]
 800a8c4:	fa1f fe82 	uxth.w	lr, r2
 800a8c8:	45c1      	cmp	r9, r8
 800a8ca:	fa1f f38c 	uxth.w	r3, ip
 800a8ce:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a8d2:	eba3 030e 	sub.w	r3, r3, lr
 800a8d6:	4403      	add	r3, r0
 800a8d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8ea:	f841 3b04 	str.w	r3, [r1], #4
 800a8ee:	d2e5      	bcs.n	800a8bc <quorem+0xac>
 800a8f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8f8:	b922      	cbnz	r2, 800a904 <quorem+0xf4>
 800a8fa:	3b04      	subs	r3, #4
 800a8fc:	429d      	cmp	r5, r3
 800a8fe:	461a      	mov	r2, r3
 800a900:	d30b      	bcc.n	800a91a <quorem+0x10a>
 800a902:	613c      	str	r4, [r7, #16]
 800a904:	3601      	adds	r6, #1
 800a906:	4630      	mov	r0, r6
 800a908:	b003      	add	sp, #12
 800a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90e:	6812      	ldr	r2, [r2, #0]
 800a910:	3b04      	subs	r3, #4
 800a912:	2a00      	cmp	r2, #0
 800a914:	d1ca      	bne.n	800a8ac <quorem+0x9c>
 800a916:	3c01      	subs	r4, #1
 800a918:	e7c5      	b.n	800a8a6 <quorem+0x96>
 800a91a:	6812      	ldr	r2, [r2, #0]
 800a91c:	3b04      	subs	r3, #4
 800a91e:	2a00      	cmp	r2, #0
 800a920:	d1ef      	bne.n	800a902 <quorem+0xf2>
 800a922:	3c01      	subs	r4, #1
 800a924:	e7ea      	b.n	800a8fc <quorem+0xec>
 800a926:	2000      	movs	r0, #0
 800a928:	e7ee      	b.n	800a908 <quorem+0xf8>
 800a92a:	0000      	movs	r0, r0
 800a92c:	0000      	movs	r0, r0
	...

0800a930 <_dtoa_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	69c7      	ldr	r7, [r0, #28]
 800a936:	b099      	sub	sp, #100	@ 0x64
 800a938:	4683      	mov	fp, r0
 800a93a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a93c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a93e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a940:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a942:	ec55 4b10 	vmov	r4, r5, d0
 800a946:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a94a:	b97f      	cbnz	r7, 800a96c <_dtoa_r+0x3c>
 800a94c:	2010      	movs	r0, #16
 800a94e:	f000 fdfd 	bl	800b54c <malloc>
 800a952:	4602      	mov	r2, r0
 800a954:	f8cb 001c 	str.w	r0, [fp, #28]
 800a958:	b920      	cbnz	r0, 800a964 <_dtoa_r+0x34>
 800a95a:	4ba7      	ldr	r3, [pc, #668]	@ (800abf8 <_dtoa_r+0x2c8>)
 800a95c:	21ef      	movs	r1, #239	@ 0xef
 800a95e:	48a7      	ldr	r0, [pc, #668]	@ (800abfc <_dtoa_r+0x2cc>)
 800a960:	f002 fc42 	bl	800d1e8 <__assert_func>
 800a964:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a968:	6007      	str	r7, [r0, #0]
 800a96a:	60c7      	str	r7, [r0, #12]
 800a96c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	b159      	cbz	r1, 800a98c <_dtoa_r+0x5c>
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	2301      	movs	r3, #1
 800a978:	4658      	mov	r0, fp
 800a97a:	4093      	lsls	r3, r2
 800a97c:	604a      	str	r2, [r1, #4]
 800a97e:	608b      	str	r3, [r1, #8]
 800a980:	f000 feda 	bl	800b738 <_Bfree>
 800a984:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	1e2b      	subs	r3, r5, #0
 800a98e:	bfb7      	itett	lt
 800a990:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a994:	2300      	movge	r3, #0
 800a996:	2201      	movlt	r2, #1
 800a998:	9303      	strlt	r3, [sp, #12]
 800a99a:	bfa8      	it	ge
 800a99c:	6033      	strge	r3, [r6, #0]
 800a99e:	9f03      	ldr	r7, [sp, #12]
 800a9a0:	4b97      	ldr	r3, [pc, #604]	@ (800ac00 <_dtoa_r+0x2d0>)
 800a9a2:	bfb8      	it	lt
 800a9a4:	6032      	strlt	r2, [r6, #0]
 800a9a6:	43bb      	bics	r3, r7
 800a9a8:	d112      	bne.n	800a9d0 <_dtoa_r+0xa0>
 800a9aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a9ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9b6:	4323      	orrs	r3, r4
 800a9b8:	f000 854c 	beq.w	800b454 <_dtoa_r+0xb24>
 800a9bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9be:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac14 <_dtoa_r+0x2e4>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 854e 	beq.w	800b464 <_dtoa_r+0xb34>
 800a9c8:	f10a 0303 	add.w	r3, sl, #3
 800a9cc:	f000 bd48 	b.w	800b460 <_dtoa_r+0xb30>
 800a9d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	ec51 0b17 	vmov	r0, r1, d7
 800a9dc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a9e0:	f7f6 f882 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	b158      	cbz	r0, 800aa00 <_dtoa_r+0xd0>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9f0:	b113      	cbz	r3, 800a9f8 <_dtoa_r+0xc8>
 800a9f2:	4b84      	ldr	r3, [pc, #528]	@ (800ac04 <_dtoa_r+0x2d4>)
 800a9f4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ac18 <_dtoa_r+0x2e8>
 800a9fc:	f000 bd32 	b.w	800b464 <_dtoa_r+0xb34>
 800aa00:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa04:	aa16      	add	r2, sp, #88	@ 0x58
 800aa06:	a917      	add	r1, sp, #92	@ 0x5c
 800aa08:	4658      	mov	r0, fp
 800aa0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa0e:	f001 fa41 	bl	800be94 <__d2b>
 800aa12:	4681      	mov	r9, r0
 800aa14:	2e00      	cmp	r6, #0
 800aa16:	d075      	beq.n	800ab04 <_dtoa_r+0x1d4>
 800aa18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa1a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa1e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa26:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa2e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa32:	4619      	mov	r1, r3
 800aa34:	2200      	movs	r2, #0
 800aa36:	4b74      	ldr	r3, [pc, #464]	@ (800ac08 <_dtoa_r+0x2d8>)
 800aa38:	f7f5 fc36 	bl	80002a8 <__aeabi_dsub>
 800aa3c:	a368      	add	r3, pc, #416	@ (adr r3, 800abe0 <_dtoa_r+0x2b0>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fde9 	bl	8000618 <__aeabi_dmul>
 800aa46:	a368      	add	r3, pc, #416	@ (adr r3, 800abe8 <_dtoa_r+0x2b8>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fc2e 	bl	80002ac <__adddf3>
 800aa50:	4604      	mov	r4, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7f5 fd75 	bl	8000544 <__aeabi_i2d>
 800aa5a:	a365      	add	r3, pc, #404	@ (adr r3, 800abf0 <_dtoa_r+0x2c0>)
 800aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa60:	f7f5 fdda 	bl	8000618 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4620      	mov	r0, r4
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	f7f5 fc1e 	bl	80002ac <__adddf3>
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	f7f6 f880 	bl	8000b78 <__aeabi_d2iz>
 800aa78:	2200      	movs	r2, #0
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4620      	mov	r0, r4
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7f6 f83b 	bl	8000afc <__aeabi_dcmplt>
 800aa86:	b140      	cbz	r0, 800aa9a <_dtoa_r+0x16a>
 800aa88:	4638      	mov	r0, r7
 800aa8a:	f7f5 fd5b 	bl	8000544 <__aeabi_i2d>
 800aa8e:	4622      	mov	r2, r4
 800aa90:	462b      	mov	r3, r5
 800aa92:	f7f6 f829 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa96:	b900      	cbnz	r0, 800aa9a <_dtoa_r+0x16a>
 800aa98:	3f01      	subs	r7, #1
 800aa9a:	2f16      	cmp	r7, #22
 800aa9c:	d851      	bhi.n	800ab42 <_dtoa_r+0x212>
 800aa9e:	4b5b      	ldr	r3, [pc, #364]	@ (800ac0c <_dtoa_r+0x2dc>)
 800aaa0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aaa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f6 f826 	bl	8000afc <__aeabi_dcmplt>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d048      	beq.n	800ab46 <_dtoa_r+0x216>
 800aab4:	3f01      	subs	r7, #1
 800aab6:	2300      	movs	r3, #0
 800aab8:	9312      	str	r3, [sp, #72]	@ 0x48
 800aaba:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aabc:	1b9b      	subs	r3, r3, r6
 800aabe:	1e5a      	subs	r2, r3, #1
 800aac0:	bf46      	itte	mi
 800aac2:	f1c3 0801 	rsbmi	r8, r3, #1
 800aac6:	2300      	movmi	r3, #0
 800aac8:	f04f 0800 	movpl.w	r8, #0
 800aacc:	9208      	str	r2, [sp, #32]
 800aace:	bf48      	it	mi
 800aad0:	9308      	strmi	r3, [sp, #32]
 800aad2:	2f00      	cmp	r7, #0
 800aad4:	db39      	blt.n	800ab4a <_dtoa_r+0x21a>
 800aad6:	9b08      	ldr	r3, [sp, #32]
 800aad8:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aada:	443b      	add	r3, r7
 800aadc:	9308      	str	r3, [sp, #32]
 800aade:	2300      	movs	r3, #0
 800aae0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae4:	2b09      	cmp	r3, #9
 800aae6:	d864      	bhi.n	800abb2 <_dtoa_r+0x282>
 800aae8:	2b05      	cmp	r3, #5
 800aaea:	bfc5      	ittet	gt
 800aaec:	3b04      	subgt	r3, #4
 800aaee:	2400      	movgt	r4, #0
 800aaf0:	2401      	movle	r4, #1
 800aaf2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aaf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf6:	3b02      	subs	r3, #2
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d865      	bhi.n	800abc8 <_dtoa_r+0x298>
 800aafc:	e8df f003 	tbb	[pc, r3]
 800ab00:	5737392c 	.word	0x5737392c
 800ab04:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab08:	441e      	add	r6, r3
 800ab0a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab0e:	2b20      	cmp	r3, #32
 800ab10:	bfc9      	itett	gt
 800ab12:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab16:	f1c3 0320 	rsble	r3, r3, #32
 800ab1a:	409f      	lslgt	r7, r3
 800ab1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab20:	bfd8      	it	le
 800ab22:	fa04 f003 	lslle.w	r0, r4, r3
 800ab26:	f106 36ff 	add.w	r6, r6, #4294967295
 800ab2a:	bfc4      	itt	gt
 800ab2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab30:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab34:	f7f5 fcf6 	bl	8000524 <__aeabi_ui2d>
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab3e:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab40:	e777      	b.n	800aa32 <_dtoa_r+0x102>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e7b8      	b.n	800aab8 <_dtoa_r+0x188>
 800ab46:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab48:	e7b7      	b.n	800aaba <_dtoa_r+0x18a>
 800ab4a:	427b      	negs	r3, r7
 800ab4c:	eba8 0807 	sub.w	r8, r8, r7
 800ab50:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab52:	2300      	movs	r3, #0
 800ab54:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab56:	e7c4      	b.n	800aae2 <_dtoa_r+0x1b2>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dc35      	bgt.n	800abce <_dtoa_r+0x29e>
 800ab62:	2301      	movs	r3, #1
 800ab64:	461a      	mov	r2, r3
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	9307      	str	r3, [sp, #28]
 800ab6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab6c:	e00b      	b.n	800ab86 <_dtoa_r+0x256>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e7f3      	b.n	800ab5a <_dtoa_r+0x22a>
 800ab72:	2300      	movs	r3, #0
 800ab74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab78:	18fb      	adds	r3, r7, r3
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	9307      	str	r3, [sp, #28]
 800ab82:	bfb8      	it	lt
 800ab84:	2301      	movlt	r3, #1
 800ab86:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	2204      	movs	r2, #4
 800ab8e:	f102 0514 	add.w	r5, r2, #20
 800ab92:	429d      	cmp	r5, r3
 800ab94:	d91f      	bls.n	800abd6 <_dtoa_r+0x2a6>
 800ab96:	6041      	str	r1, [r0, #4]
 800ab98:	4658      	mov	r0, fp
 800ab9a:	f000 fd8d 	bl	800b6b8 <_Balloc>
 800ab9e:	4682      	mov	sl, r0
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d13b      	bne.n	800ac1c <_dtoa_r+0x2ec>
 800aba4:	4b1a      	ldr	r3, [pc, #104]	@ (800ac10 <_dtoa_r+0x2e0>)
 800aba6:	4602      	mov	r2, r0
 800aba8:	f240 11af 	movw	r1, #431	@ 0x1af
 800abac:	e6d7      	b.n	800a95e <_dtoa_r+0x2e>
 800abae:	2301      	movs	r3, #1
 800abb0:	e7e0      	b.n	800ab74 <_dtoa_r+0x244>
 800abb2:	2401      	movs	r4, #1
 800abb4:	2300      	movs	r3, #0
 800abb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abba:	f04f 33ff 	mov.w	r3, #4294967295
 800abbe:	2200      	movs	r2, #0
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	9307      	str	r3, [sp, #28]
 800abc4:	2312      	movs	r3, #18
 800abc6:	e7d0      	b.n	800ab6a <_dtoa_r+0x23a>
 800abc8:	2301      	movs	r3, #1
 800abca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abcc:	e7f5      	b.n	800abba <_dtoa_r+0x28a>
 800abce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	9307      	str	r3, [sp, #28]
 800abd4:	e7d7      	b.n	800ab86 <_dtoa_r+0x256>
 800abd6:	3101      	adds	r1, #1
 800abd8:	0052      	lsls	r2, r2, #1
 800abda:	e7d8      	b.n	800ab8e <_dtoa_r+0x25e>
 800abdc:	f3af 8000 	nop.w
 800abe0:	636f4361 	.word	0x636f4361
 800abe4:	3fd287a7 	.word	0x3fd287a7
 800abe8:	8b60c8b3 	.word	0x8b60c8b3
 800abec:	3fc68a28 	.word	0x3fc68a28
 800abf0:	509f79fb 	.word	0x509f79fb
 800abf4:	3fd34413 	.word	0x3fd34413
 800abf8:	0800df92 	.word	0x0800df92
 800abfc:	0800dfa9 	.word	0x0800dfa9
 800ac00:	7ff00000 	.word	0x7ff00000
 800ac04:	0800df5d 	.word	0x0800df5d
 800ac08:	3ff80000 	.word	0x3ff80000
 800ac0c:	0800e0a0 	.word	0x0800e0a0
 800ac10:	0800e001 	.word	0x0800e001
 800ac14:	0800df8e 	.word	0x0800df8e
 800ac18:	0800df5c 	.word	0x0800df5c
 800ac1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac20:	6018      	str	r0, [r3, #0]
 800ac22:	9b07      	ldr	r3, [sp, #28]
 800ac24:	2b0e      	cmp	r3, #14
 800ac26:	f200 80a4 	bhi.w	800ad72 <_dtoa_r+0x442>
 800ac2a:	2c00      	cmp	r4, #0
 800ac2c:	f000 80a1 	beq.w	800ad72 <_dtoa_r+0x442>
 800ac30:	2f00      	cmp	r7, #0
 800ac32:	dd33      	ble.n	800ac9c <_dtoa_r+0x36c>
 800ac34:	f007 020f 	and.w	r2, r7, #15
 800ac38:	4bac      	ldr	r3, [pc, #688]	@ (800aeec <_dtoa_r+0x5bc>)
 800ac3a:	05f8      	lsls	r0, r7, #23
 800ac3c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac44:	ed93 7b00 	vldr	d7, [r3]
 800ac48:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac4c:	d516      	bpl.n	800ac7c <_dtoa_r+0x34c>
 800ac4e:	4ba8      	ldr	r3, [pc, #672]	@ (800aef0 <_dtoa_r+0x5c0>)
 800ac50:	f004 040f 	and.w	r4, r4, #15
 800ac54:	2603      	movs	r6, #3
 800ac56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac5e:	f7f5 fe05 	bl	800086c <__aeabi_ddiv>
 800ac62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac66:	4da2      	ldr	r5, [pc, #648]	@ (800aef0 <_dtoa_r+0x5c0>)
 800ac68:	b954      	cbnz	r4, 800ac80 <_dtoa_r+0x350>
 800ac6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac72:	f7f5 fdfb 	bl	800086c <__aeabi_ddiv>
 800ac76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac7a:	e028      	b.n	800acce <_dtoa_r+0x39e>
 800ac7c:	2602      	movs	r6, #2
 800ac7e:	e7f2      	b.n	800ac66 <_dtoa_r+0x336>
 800ac80:	07e1      	lsls	r1, r4, #31
 800ac82:	d508      	bpl.n	800ac96 <_dtoa_r+0x366>
 800ac84:	3601      	adds	r6, #1
 800ac86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac8e:	f7f5 fcc3 	bl	8000618 <__aeabi_dmul>
 800ac92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac96:	1064      	asrs	r4, r4, #1
 800ac98:	3508      	adds	r5, #8
 800ac9a:	e7e5      	b.n	800ac68 <_dtoa_r+0x338>
 800ac9c:	f000 80d2 	beq.w	800ae44 <_dtoa_r+0x514>
 800aca0:	427c      	negs	r4, r7
 800aca2:	4b92      	ldr	r3, [pc, #584]	@ (800aeec <_dtoa_r+0x5bc>)
 800aca4:	4d92      	ldr	r5, [pc, #584]	@ (800aef0 <_dtoa_r+0x5c0>)
 800aca6:	2602      	movs	r6, #2
 800aca8:	f004 020f 	and.w	r2, r4, #15
 800acac:	1124      	asrs	r4, r4, #4
 800acae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f7f5 fcad 	bl	8000618 <__aeabi_dmul>
 800acbe:	2300      	movs	r3, #0
 800acc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	f040 80b2 	bne.w	800ae2e <_dtoa_r+0x4fe>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1d3      	bne.n	800ac76 <_dtoa_r+0x346>
 800acce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80b7 	beq.w	800ae48 <_dtoa_r+0x518>
 800acda:	2200      	movs	r2, #0
 800acdc:	4b85      	ldr	r3, [pc, #532]	@ (800aef4 <_dtoa_r+0x5c4>)
 800acde:	4620      	mov	r0, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7f5 ff0b 	bl	8000afc <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f000 80ae 	beq.w	800ae48 <_dtoa_r+0x518>
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80aa 	beq.w	800ae48 <_dtoa_r+0x518>
 800acf4:	9b00      	ldr	r3, [sp, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd37      	ble.n	800ad6a <_dtoa_r+0x43a>
 800acfa:	1e7b      	subs	r3, r7, #1
 800acfc:	4620      	mov	r0, r4
 800acfe:	2200      	movs	r2, #0
 800ad00:	4629      	mov	r1, r5
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	3601      	adds	r6, #1
 800ad06:	4b7c      	ldr	r3, [pc, #496]	@ (800aef8 <_dtoa_r+0x5c8>)
 800ad08:	f7f5 fc86 	bl	8000618 <__aeabi_dmul>
 800ad0c:	9c00      	ldr	r4, [sp, #0]
 800ad0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7f5 fc16 	bl	8000544 <__aeabi_i2d>
 800ad18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad1c:	f7f5 fc7c 	bl	8000618 <__aeabi_dmul>
 800ad20:	2200      	movs	r2, #0
 800ad22:	4b76      	ldr	r3, [pc, #472]	@ (800aefc <_dtoa_r+0x5cc>)
 800ad24:	f7f5 fac2 	bl	80002ac <__adddf3>
 800ad28:	4605      	mov	r5, r0
 800ad2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad2e:	2c00      	cmp	r4, #0
 800ad30:	f040 808d 	bne.w	800ae4e <_dtoa_r+0x51e>
 800ad34:	2200      	movs	r2, #0
 800ad36:	4b72      	ldr	r3, [pc, #456]	@ (800af00 <_dtoa_r+0x5d0>)
 800ad38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3c:	f7f5 fab4 	bl	80002a8 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad48:	462a      	mov	r2, r5
 800ad4a:	4633      	mov	r3, r6
 800ad4c:	f7f5 fef4 	bl	8000b38 <__aeabi_dcmpgt>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f040 828b 	bne.w	800b26c <_dtoa_r+0x93c>
 800ad56:	462a      	mov	r2, r5
 800ad58:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad60:	f7f5 fecc 	bl	8000afc <__aeabi_dcmplt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 8128 	bne.w	800afba <_dtoa_r+0x68a>
 800ad6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f2c0 815a 	blt.w	800b02e <_dtoa_r+0x6fe>
 800ad7a:	2f0e      	cmp	r7, #14
 800ad7c:	f300 8157 	bgt.w	800b02e <_dtoa_r+0x6fe>
 800ad80:	4b5a      	ldr	r3, [pc, #360]	@ (800aeec <_dtoa_r+0x5bc>)
 800ad82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad86:	ed93 7b00 	vldr	d7, [r3]
 800ad8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	ed8d 7b00 	vstr	d7, [sp]
 800ad92:	da03      	bge.n	800ad9c <_dtoa_r+0x46c>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f340 8101 	ble.w	800af9e <_dtoa_r+0x66e>
 800ad9c:	4656      	mov	r6, sl
 800ad9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ada2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fd5f 	bl	800086c <__aeabi_ddiv>
 800adae:	f7f5 fee3 	bl	8000b78 <__aeabi_d2iz>
 800adb2:	4680      	mov	r8, r0
 800adb4:	f7f5 fbc6 	bl	8000544 <__aeabi_i2d>
 800adb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adbc:	f7f5 fc2c 	bl	8000618 <__aeabi_dmul>
 800adc0:	4602      	mov	r2, r0
 800adc2:	4620      	mov	r0, r4
 800adc4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800adc8:	460b      	mov	r3, r1
 800adca:	4629      	mov	r1, r5
 800adcc:	f7f5 fa6c 	bl	80002a8 <__aeabi_dsub>
 800add0:	9d07      	ldr	r5, [sp, #28]
 800add2:	f806 4b01 	strb.w	r4, [r6], #1
 800add6:	eba6 040a 	sub.w	r4, r6, sl
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	42a5      	cmp	r5, r4
 800ade0:	f040 8117 	bne.w	800b012 <_dtoa_r+0x6e2>
 800ade4:	f7f5 fa62 	bl	80002ac <__adddf3>
 800ade8:	4604      	mov	r4, r0
 800adea:	460d      	mov	r5, r1
 800adec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adf0:	f7f5 fea2 	bl	8000b38 <__aeabi_dcmpgt>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f040 80f9 	bne.w	800afec <_dtoa_r+0x6bc>
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae02:	f7f5 fe71 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae06:	b118      	cbz	r0, 800ae10 <_dtoa_r+0x4e0>
 800ae08:	f018 0f01 	tst.w	r8, #1
 800ae0c:	f040 80ee 	bne.w	800afec <_dtoa_r+0x6bc>
 800ae10:	4649      	mov	r1, r9
 800ae12:	4658      	mov	r0, fp
 800ae14:	f000 fc90 	bl	800b738 <_Bfree>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	3701      	adds	r7, #1
 800ae1c:	7033      	strb	r3, [r6, #0]
 800ae1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae20:	601f      	str	r7, [r3, #0]
 800ae22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 831d 	beq.w	800b464 <_dtoa_r+0xb34>
 800ae2a:	601e      	str	r6, [r3, #0]
 800ae2c:	e31a      	b.n	800b464 <_dtoa_r+0xb34>
 800ae2e:	07e2      	lsls	r2, r4, #31
 800ae30:	d505      	bpl.n	800ae3e <_dtoa_r+0x50e>
 800ae32:	3601      	adds	r6, #1
 800ae34:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae38:	f7f5 fbee 	bl	8000618 <__aeabi_dmul>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	1064      	asrs	r4, r4, #1
 800ae40:	3508      	adds	r5, #8
 800ae42:	e73f      	b.n	800acc4 <_dtoa_r+0x394>
 800ae44:	2602      	movs	r6, #2
 800ae46:	e742      	b.n	800acce <_dtoa_r+0x39e>
 800ae48:	9c07      	ldr	r4, [sp, #28]
 800ae4a:	9704      	str	r7, [sp, #16]
 800ae4c:	e761      	b.n	800ad12 <_dtoa_r+0x3e2>
 800ae4e:	4b27      	ldr	r3, [pc, #156]	@ (800aeec <_dtoa_r+0x5bc>)
 800ae50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae56:	4454      	add	r4, sl
 800ae58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d053      	beq.n	800af08 <_dtoa_r+0x5d8>
 800ae60:	2000      	movs	r0, #0
 800ae62:	4928      	ldr	r1, [pc, #160]	@ (800af04 <_dtoa_r+0x5d4>)
 800ae64:	f7f5 fd02 	bl	800086c <__aeabi_ddiv>
 800ae68:	4633      	mov	r3, r6
 800ae6a:	4656      	mov	r6, sl
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	f7f5 fa1b 	bl	80002a8 <__aeabi_dsub>
 800ae72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7a:	f7f5 fe7d 	bl	8000b78 <__aeabi_d2iz>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	f7f5 fb60 	bl	8000544 <__aeabi_i2d>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	3530      	adds	r5, #48	@ 0x30
 800ae8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8e:	f7f5 fa0b 	bl	80002a8 <__aeabi_dsub>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	f806 5b01 	strb.w	r5, [r6], #1
 800ae9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aea2:	f7f5 fe2b 	bl	8000afc <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d171      	bne.n	800af8e <_dtoa_r+0x65e>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	4911      	ldr	r1, [pc, #68]	@ (800aef4 <_dtoa_r+0x5c4>)
 800aeae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeb2:	f7f5 f9f9 	bl	80002a8 <__aeabi_dsub>
 800aeb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aeba:	f7f5 fe1f 	bl	8000afc <__aeabi_dcmplt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f040 8095 	bne.w	800afee <_dtoa_r+0x6be>
 800aec4:	42a6      	cmp	r6, r4
 800aec6:	f43f af50 	beq.w	800ad6a <_dtoa_r+0x43a>
 800aeca:	2200      	movs	r2, #0
 800aecc:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <_dtoa_r+0x5c8>)
 800aece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aed2:	f7f5 fba1 	bl	8000618 <__aeabi_dmul>
 800aed6:	2200      	movs	r2, #0
 800aed8:	4b07      	ldr	r3, [pc, #28]	@ (800aef8 <_dtoa_r+0x5c8>)
 800aeda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee2:	f7f5 fb99 	bl	8000618 <__aeabi_dmul>
 800aee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeea:	e7c4      	b.n	800ae76 <_dtoa_r+0x546>
 800aeec:	0800e0a0 	.word	0x0800e0a0
 800aef0:	0800e078 	.word	0x0800e078
 800aef4:	3ff00000 	.word	0x3ff00000
 800aef8:	40240000 	.word	0x40240000
 800aefc:	401c0000 	.word	0x401c0000
 800af00:	40140000 	.word	0x40140000
 800af04:	3fe00000 	.word	0x3fe00000
 800af08:	4631      	mov	r1, r6
 800af0a:	4656      	mov	r6, sl
 800af0c:	4628      	mov	r0, r5
 800af0e:	f7f5 fb83 	bl	8000618 <__aeabi_dmul>
 800af12:	9415      	str	r4, [sp, #84]	@ 0x54
 800af14:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1c:	f7f5 fe2c 	bl	8000b78 <__aeabi_d2iz>
 800af20:	4605      	mov	r5, r0
 800af22:	f7f5 fb0f 	bl	8000544 <__aeabi_i2d>
 800af26:	4602      	mov	r2, r0
 800af28:	3530      	adds	r5, #48	@ 0x30
 800af2a:	460b      	mov	r3, r1
 800af2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af30:	f7f5 f9ba 	bl	80002a8 <__aeabi_dsub>
 800af34:	f806 5b01 	strb.w	r5, [r6], #1
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	42a6      	cmp	r6, r4
 800af3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	d124      	bne.n	800af92 <_dtoa_r+0x662>
 800af48:	4bac      	ldr	r3, [pc, #688]	@ (800b1fc <_dtoa_r+0x8cc>)
 800af4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af4e:	f7f5 f9ad 	bl	80002ac <__adddf3>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5a:	f7f5 fded 	bl	8000b38 <__aeabi_dcmpgt>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d145      	bne.n	800afee <_dtoa_r+0x6be>
 800af62:	2000      	movs	r0, #0
 800af64:	49a5      	ldr	r1, [pc, #660]	@ (800b1fc <_dtoa_r+0x8cc>)
 800af66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af6a:	f7f5 f99d 	bl	80002a8 <__aeabi_dsub>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af76:	f7f5 fdc1 	bl	8000afc <__aeabi_dcmplt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f43f aef5 	beq.w	800ad6a <_dtoa_r+0x43a>
 800af80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800af82:	1e73      	subs	r3, r6, #1
 800af84:	9315      	str	r3, [sp, #84]	@ 0x54
 800af86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af8a:	2b30      	cmp	r3, #48	@ 0x30
 800af8c:	d0f8      	beq.n	800af80 <_dtoa_r+0x650>
 800af8e:	9f04      	ldr	r7, [sp, #16]
 800af90:	e73e      	b.n	800ae10 <_dtoa_r+0x4e0>
 800af92:	4b9b      	ldr	r3, [pc, #620]	@ (800b200 <_dtoa_r+0x8d0>)
 800af94:	f7f5 fb40 	bl	8000618 <__aeabi_dmul>
 800af98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af9c:	e7bc      	b.n	800af18 <_dtoa_r+0x5e8>
 800af9e:	d10c      	bne.n	800afba <_dtoa_r+0x68a>
 800afa0:	2200      	movs	r2, #0
 800afa2:	4b98      	ldr	r3, [pc, #608]	@ (800b204 <_dtoa_r+0x8d4>)
 800afa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afa8:	f7f5 fb36 	bl	8000618 <__aeabi_dmul>
 800afac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afb0:	f7f5 fdb8 	bl	8000b24 <__aeabi_dcmpge>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f000 8157 	beq.w	800b268 <_dtoa_r+0x938>
 800afba:	2400      	movs	r4, #0
 800afbc:	4625      	mov	r5, r4
 800afbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc0:	4656      	mov	r6, sl
 800afc2:	43db      	mvns	r3, r3
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	2700      	movs	r7, #0
 800afc8:	4621      	mov	r1, r4
 800afca:	4658      	mov	r0, fp
 800afcc:	f000 fbb4 	bl	800b738 <_Bfree>
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	d0dc      	beq.n	800af8e <_dtoa_r+0x65e>
 800afd4:	b12f      	cbz	r7, 800afe2 <_dtoa_r+0x6b2>
 800afd6:	42af      	cmp	r7, r5
 800afd8:	d003      	beq.n	800afe2 <_dtoa_r+0x6b2>
 800afda:	4639      	mov	r1, r7
 800afdc:	4658      	mov	r0, fp
 800afde:	f000 fbab 	bl	800b738 <_Bfree>
 800afe2:	4629      	mov	r1, r5
 800afe4:	4658      	mov	r0, fp
 800afe6:	f000 fba7 	bl	800b738 <_Bfree>
 800afea:	e7d0      	b.n	800af8e <_dtoa_r+0x65e>
 800afec:	9704      	str	r7, [sp, #16]
 800afee:	4633      	mov	r3, r6
 800aff0:	461e      	mov	r6, r3
 800aff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aff6:	2a39      	cmp	r2, #57	@ 0x39
 800aff8:	d107      	bne.n	800b00a <_dtoa_r+0x6da>
 800affa:	459a      	cmp	sl, r3
 800affc:	d1f8      	bne.n	800aff0 <_dtoa_r+0x6c0>
 800affe:	9a04      	ldr	r2, [sp, #16]
 800b000:	3201      	adds	r2, #1
 800b002:	9204      	str	r2, [sp, #16]
 800b004:	2230      	movs	r2, #48	@ 0x30
 800b006:	f88a 2000 	strb.w	r2, [sl]
 800b00a:	781a      	ldrb	r2, [r3, #0]
 800b00c:	3201      	adds	r2, #1
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e7bd      	b.n	800af8e <_dtoa_r+0x65e>
 800b012:	2200      	movs	r2, #0
 800b014:	4b7a      	ldr	r3, [pc, #488]	@ (800b200 <_dtoa_r+0x8d0>)
 800b016:	f7f5 faff 	bl	8000618 <__aeabi_dmul>
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	4604      	mov	r4, r0
 800b020:	460d      	mov	r5, r1
 800b022:	f7f5 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f aebb 	beq.w	800ada2 <_dtoa_r+0x472>
 800b02c:	e6f0      	b.n	800ae10 <_dtoa_r+0x4e0>
 800b02e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b030:	2a00      	cmp	r2, #0
 800b032:	f000 80db 	beq.w	800b1ec <_dtoa_r+0x8bc>
 800b036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b038:	2a01      	cmp	r2, #1
 800b03a:	f300 80bf 	bgt.w	800b1bc <_dtoa_r+0x88c>
 800b03e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b040:	2a00      	cmp	r2, #0
 800b042:	f000 80b7 	beq.w	800b1b4 <_dtoa_r+0x884>
 800b046:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b04a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b04c:	4646      	mov	r6, r8
 800b04e:	9a08      	ldr	r2, [sp, #32]
 800b050:	2101      	movs	r1, #1
 800b052:	4658      	mov	r0, fp
 800b054:	4498      	add	r8, r3
 800b056:	441a      	add	r2, r3
 800b058:	9208      	str	r2, [sp, #32]
 800b05a:	f000 fc6d 	bl	800b938 <__i2b>
 800b05e:	4605      	mov	r5, r0
 800b060:	b15e      	cbz	r6, 800b07a <_dtoa_r+0x74a>
 800b062:	9b08      	ldr	r3, [sp, #32]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd08      	ble.n	800b07a <_dtoa_r+0x74a>
 800b068:	42b3      	cmp	r3, r6
 800b06a:	9a08      	ldr	r2, [sp, #32]
 800b06c:	bfa8      	it	ge
 800b06e:	4633      	movge	r3, r6
 800b070:	eba8 0803 	sub.w	r8, r8, r3
 800b074:	1af6      	subs	r6, r6, r3
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	9308      	str	r3, [sp, #32]
 800b07a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07c:	b1f3      	cbz	r3, 800b0bc <_dtoa_r+0x78c>
 800b07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 80b7 	beq.w	800b1f4 <_dtoa_r+0x8c4>
 800b086:	b18c      	cbz	r4, 800b0ac <_dtoa_r+0x77c>
 800b088:	4629      	mov	r1, r5
 800b08a:	4622      	mov	r2, r4
 800b08c:	4658      	mov	r0, fp
 800b08e:	f000 fd13 	bl	800bab8 <__pow5mult>
 800b092:	464a      	mov	r2, r9
 800b094:	4601      	mov	r1, r0
 800b096:	4605      	mov	r5, r0
 800b098:	4658      	mov	r0, fp
 800b09a:	f000 fc63 	bl	800b964 <__multiply>
 800b09e:	4649      	mov	r1, r9
 800b0a0:	9004      	str	r0, [sp, #16]
 800b0a2:	4658      	mov	r0, fp
 800b0a4:	f000 fb48 	bl	800b738 <_Bfree>
 800b0a8:	9b04      	ldr	r3, [sp, #16]
 800b0aa:	4699      	mov	r9, r3
 800b0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ae:	1b1a      	subs	r2, r3, r4
 800b0b0:	d004      	beq.n	800b0bc <_dtoa_r+0x78c>
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	4658      	mov	r0, fp
 800b0b6:	f000 fcff 	bl	800bab8 <__pow5mult>
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	2101      	movs	r1, #1
 800b0be:	4658      	mov	r0, fp
 800b0c0:	f000 fc3a 	bl	800b938 <__i2b>
 800b0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 81cf 	beq.w	800b46c <_dtoa_r+0xb3c>
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4658      	mov	r0, fp
 800b0d4:	f000 fcf0 	bl	800bab8 <__pow5mult>
 800b0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0da:	4604      	mov	r4, r0
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	f300 8095 	bgt.w	800b20c <_dtoa_r+0x8dc>
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f040 8087 	bne.w	800b1f8 <_dtoa_r+0x8c8>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f040 8089 	bne.w	800b208 <_dtoa_r+0x8d8>
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0fc:	0d1b      	lsrs	r3, r3, #20
 800b0fe:	051b      	lsls	r3, r3, #20
 800b100:	b12b      	cbz	r3, 800b10e <_dtoa_r+0x7de>
 800b102:	9b08      	ldr	r3, [sp, #32]
 800b104:	f108 0801 	add.w	r8, r8, #1
 800b108:	3301      	adds	r3, #1
 800b10a:	9308      	str	r3, [sp, #32]
 800b10c:	2301      	movs	r3, #1
 800b10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 81b0 	beq.w	800b478 <_dtoa_r+0xb48>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b11e:	6918      	ldr	r0, [r3, #16]
 800b120:	f000 fbbe 	bl	800b8a0 <__hi0bits>
 800b124:	f1c0 0020 	rsb	r0, r0, #32
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	4418      	add	r0, r3
 800b12c:	f010 001f 	ands.w	r0, r0, #31
 800b130:	d077      	beq.n	800b222 <_dtoa_r+0x8f2>
 800b132:	f1c0 0320 	rsb	r3, r0, #32
 800b136:	2b04      	cmp	r3, #4
 800b138:	dd6b      	ble.n	800b212 <_dtoa_r+0x8e2>
 800b13a:	f1c0 001c 	rsb	r0, r0, #28
 800b13e:	9b08      	ldr	r3, [sp, #32]
 800b140:	4480      	add	r8, r0
 800b142:	4403      	add	r3, r0
 800b144:	4406      	add	r6, r0
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	f1b8 0f00 	cmp.w	r8, #0
 800b14c:	dd05      	ble.n	800b15a <_dtoa_r+0x82a>
 800b14e:	4649      	mov	r1, r9
 800b150:	4642      	mov	r2, r8
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fd0a 	bl	800bb6c <__lshift>
 800b158:	4681      	mov	r9, r0
 800b15a:	9b08      	ldr	r3, [sp, #32]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dd05      	ble.n	800b16c <_dtoa_r+0x83c>
 800b160:	4621      	mov	r1, r4
 800b162:	461a      	mov	r2, r3
 800b164:	4658      	mov	r0, fp
 800b166:	f000 fd01 	bl	800bb6c <__lshift>
 800b16a:	4604      	mov	r4, r0
 800b16c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d059      	beq.n	800b226 <_dtoa_r+0x8f6>
 800b172:	4621      	mov	r1, r4
 800b174:	4648      	mov	r0, r9
 800b176:	f000 fd65 	bl	800bc44 <__mcmp>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	da53      	bge.n	800b226 <_dtoa_r+0x8f6>
 800b17e:	1e7b      	subs	r3, r7, #1
 800b180:	4649      	mov	r1, r9
 800b182:	220a      	movs	r2, #10
 800b184:	4658      	mov	r0, fp
 800b186:	9304      	str	r3, [sp, #16]
 800b188:	2300      	movs	r3, #0
 800b18a:	f000 faf7 	bl	800b77c <__multadd>
 800b18e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b190:	4681      	mov	r9, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 8172 	beq.w	800b47c <_dtoa_r+0xb4c>
 800b198:	2300      	movs	r3, #0
 800b19a:	4629      	mov	r1, r5
 800b19c:	220a      	movs	r2, #10
 800b19e:	4658      	mov	r0, fp
 800b1a0:	f000 faec 	bl	800b77c <__multadd>
 800b1a4:	9b00      	ldr	r3, [sp, #0]
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	dc67      	bgt.n	800b27c <_dtoa_r+0x94c>
 800b1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	dc41      	bgt.n	800b236 <_dtoa_r+0x906>
 800b1b2:	e063      	b.n	800b27c <_dtoa_r+0x94c>
 800b1b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b1b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1ba:	e746      	b.n	800b04a <_dtoa_r+0x71a>
 800b1bc:	9b07      	ldr	r3, [sp, #28]
 800b1be:	1e5c      	subs	r4, r3, #1
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c2:	42a3      	cmp	r3, r4
 800b1c4:	bfb7      	itett	lt
 800b1c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b1c8:	1b1c      	subge	r4, r3, r4
 800b1ca:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b1cc:	1ae3      	sublt	r3, r4, r3
 800b1ce:	bfbe      	ittt	lt
 800b1d0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b1d2:	2400      	movlt	r4, #0
 800b1d4:	18d2      	addlt	r2, r2, r3
 800b1d6:	9b07      	ldr	r3, [sp, #28]
 800b1d8:	bfb8      	it	lt
 800b1da:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bfb5      	itete	lt
 800b1e0:	eba8 0603 	sublt.w	r6, r8, r3
 800b1e4:	4646      	movge	r6, r8
 800b1e6:	2300      	movlt	r3, #0
 800b1e8:	9b07      	ldrge	r3, [sp, #28]
 800b1ea:	e730      	b.n	800b04e <_dtoa_r+0x71e>
 800b1ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1ee:	4646      	mov	r6, r8
 800b1f0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1f2:	e735      	b.n	800b060 <_dtoa_r+0x730>
 800b1f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1f6:	e75c      	b.n	800b0b2 <_dtoa_r+0x782>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e788      	b.n	800b10e <_dtoa_r+0x7de>
 800b1fc:	3fe00000 	.word	0x3fe00000
 800b200:	40240000 	.word	0x40240000
 800b204:	40140000 	.word	0x40140000
 800b208:	9b02      	ldr	r3, [sp, #8]
 800b20a:	e780      	b.n	800b10e <_dtoa_r+0x7de>
 800b20c:	2300      	movs	r3, #0
 800b20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b210:	e782      	b.n	800b118 <_dtoa_r+0x7e8>
 800b212:	d099      	beq.n	800b148 <_dtoa_r+0x818>
 800b214:	331c      	adds	r3, #28
 800b216:	9a08      	ldr	r2, [sp, #32]
 800b218:	441a      	add	r2, r3
 800b21a:	4498      	add	r8, r3
 800b21c:	441e      	add	r6, r3
 800b21e:	9208      	str	r2, [sp, #32]
 800b220:	e792      	b.n	800b148 <_dtoa_r+0x818>
 800b222:	4603      	mov	r3, r0
 800b224:	e7f6      	b.n	800b214 <_dtoa_r+0x8e4>
 800b226:	9b07      	ldr	r3, [sp, #28]
 800b228:	9704      	str	r7, [sp, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dc20      	bgt.n	800b270 <_dtoa_r+0x940>
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b232:	2b02      	cmp	r3, #2
 800b234:	dd1e      	ble.n	800b274 <_dtoa_r+0x944>
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f47f aec0 	bne.w	800afbe <_dtoa_r+0x68e>
 800b23e:	4621      	mov	r1, r4
 800b240:	2205      	movs	r2, #5
 800b242:	4658      	mov	r0, fp
 800b244:	f000 fa9a 	bl	800b77c <__multadd>
 800b248:	4601      	mov	r1, r0
 800b24a:	4604      	mov	r4, r0
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 fcf9 	bl	800bc44 <__mcmp>
 800b252:	2800      	cmp	r0, #0
 800b254:	f77f aeb3 	ble.w	800afbe <_dtoa_r+0x68e>
 800b258:	2331      	movs	r3, #49	@ 0x31
 800b25a:	4656      	mov	r6, sl
 800b25c:	f806 3b01 	strb.w	r3, [r6], #1
 800b260:	9b04      	ldr	r3, [sp, #16]
 800b262:	3301      	adds	r3, #1
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	e6ae      	b.n	800afc6 <_dtoa_r+0x696>
 800b268:	9c07      	ldr	r4, [sp, #28]
 800b26a:	9704      	str	r7, [sp, #16]
 800b26c:	4625      	mov	r5, r4
 800b26e:	e7f3      	b.n	800b258 <_dtoa_r+0x928>
 800b270:	9b07      	ldr	r3, [sp, #28]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 8104 	beq.w	800b484 <_dtoa_r+0xb54>
 800b27c:	2e00      	cmp	r6, #0
 800b27e:	dd05      	ble.n	800b28c <_dtoa_r+0x95c>
 800b280:	4629      	mov	r1, r5
 800b282:	4632      	mov	r2, r6
 800b284:	4658      	mov	r0, fp
 800b286:	f000 fc71 	bl	800bb6c <__lshift>
 800b28a:	4605      	mov	r5, r0
 800b28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d05a      	beq.n	800b348 <_dtoa_r+0xa18>
 800b292:	6869      	ldr	r1, [r5, #4]
 800b294:	4658      	mov	r0, fp
 800b296:	f000 fa0f 	bl	800b6b8 <_Balloc>
 800b29a:	4606      	mov	r6, r0
 800b29c:	b928      	cbnz	r0, 800b2aa <_dtoa_r+0x97a>
 800b29e:	4b84      	ldr	r3, [pc, #528]	@ (800b4b0 <_dtoa_r+0xb80>)
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b2a6:	f7ff bb5a 	b.w	800a95e <_dtoa_r+0x2e>
 800b2aa:	692a      	ldr	r2, [r5, #16]
 800b2ac:	f105 010c 	add.w	r1, r5, #12
 800b2b0:	300c      	adds	r0, #12
 800b2b2:	3202      	adds	r2, #2
 800b2b4:	0092      	lsls	r2, r2, #2
 800b2b6:	f001 ff81 	bl	800d1bc <memcpy>
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4658      	mov	r0, fp
 800b2c0:	f000 fc54 	bl	800bb6c <__lshift>
 800b2c4:	f10a 0301 	add.w	r3, sl, #1
 800b2c8:	462f      	mov	r7, r5
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	9307      	str	r3, [sp, #28]
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	4453      	add	r3, sl
 800b2d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2d4:	9b02      	ldr	r3, [sp, #8]
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2dc:	9b07      	ldr	r3, [sp, #28]
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4648      	mov	r0, r9
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	f7ff fa93 	bl	800a810 <quorem>
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	9002      	str	r0, [sp, #8]
 800b2ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2f2:	4648      	mov	r0, r9
 800b2f4:	f000 fca6 	bl	800bc44 <__mcmp>
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	9008      	str	r0, [sp, #32]
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4658      	mov	r0, fp
 800b300:	f000 fcbc 	bl	800bc7c <__mdiff>
 800b304:	68c2      	ldr	r2, [r0, #12]
 800b306:	4606      	mov	r6, r0
 800b308:	bb02      	cbnz	r2, 800b34c <_dtoa_r+0xa1c>
 800b30a:	4601      	mov	r1, r0
 800b30c:	4648      	mov	r0, r9
 800b30e:	f000 fc99 	bl	800bc44 <__mcmp>
 800b312:	4602      	mov	r2, r0
 800b314:	4631      	mov	r1, r6
 800b316:	4658      	mov	r0, fp
 800b318:	920e      	str	r2, [sp, #56]	@ 0x38
 800b31a:	f000 fa0d 	bl	800b738 <_Bfree>
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b322:	9e07      	ldr	r6, [sp, #28]
 800b324:	ea43 0102 	orr.w	r1, r3, r2
 800b328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b32a:	4319      	orrs	r1, r3
 800b32c:	d110      	bne.n	800b350 <_dtoa_r+0xa20>
 800b32e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b332:	d029      	beq.n	800b388 <_dtoa_r+0xa58>
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	2b00      	cmp	r3, #0
 800b338:	dd02      	ble.n	800b340 <_dtoa_r+0xa10>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b340:	9b00      	ldr	r3, [sp, #0]
 800b342:	f883 8000 	strb.w	r8, [r3]
 800b346:	e63f      	b.n	800afc8 <_dtoa_r+0x698>
 800b348:	4628      	mov	r0, r5
 800b34a:	e7bb      	b.n	800b2c4 <_dtoa_r+0x994>
 800b34c:	2201      	movs	r2, #1
 800b34e:	e7e1      	b.n	800b314 <_dtoa_r+0x9e4>
 800b350:	9b08      	ldr	r3, [sp, #32]
 800b352:	2b00      	cmp	r3, #0
 800b354:	db04      	blt.n	800b360 <_dtoa_r+0xa30>
 800b356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b358:	430b      	orrs	r3, r1
 800b35a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b35c:	430b      	orrs	r3, r1
 800b35e:	d120      	bne.n	800b3a2 <_dtoa_r+0xa72>
 800b360:	2a00      	cmp	r2, #0
 800b362:	dded      	ble.n	800b340 <_dtoa_r+0xa10>
 800b364:	4649      	mov	r1, r9
 800b366:	2201      	movs	r2, #1
 800b368:	4658      	mov	r0, fp
 800b36a:	f000 fbff 	bl	800bb6c <__lshift>
 800b36e:	4621      	mov	r1, r4
 800b370:	4681      	mov	r9, r0
 800b372:	f000 fc67 	bl	800bc44 <__mcmp>
 800b376:	2800      	cmp	r0, #0
 800b378:	dc03      	bgt.n	800b382 <_dtoa_r+0xa52>
 800b37a:	d1e1      	bne.n	800b340 <_dtoa_r+0xa10>
 800b37c:	f018 0f01 	tst.w	r8, #1
 800b380:	d0de      	beq.n	800b340 <_dtoa_r+0xa10>
 800b382:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b386:	d1d8      	bne.n	800b33a <_dtoa_r+0xa0a>
 800b388:	2339      	movs	r3, #57	@ 0x39
 800b38a:	9a00      	ldr	r2, [sp, #0]
 800b38c:	7013      	strb	r3, [r2, #0]
 800b38e:	4633      	mov	r3, r6
 800b390:	461e      	mov	r6, r3
 800b392:	3b01      	subs	r3, #1
 800b394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b398:	2a39      	cmp	r2, #57	@ 0x39
 800b39a:	d052      	beq.n	800b442 <_dtoa_r+0xb12>
 800b39c:	3201      	adds	r2, #1
 800b39e:	701a      	strb	r2, [r3, #0]
 800b3a0:	e612      	b.n	800afc8 <_dtoa_r+0x698>
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	dd07      	ble.n	800b3b6 <_dtoa_r+0xa86>
 800b3a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3aa:	d0ed      	beq.n	800b388 <_dtoa_r+0xa58>
 800b3ac:	f108 0301 	add.w	r3, r8, #1
 800b3b0:	9a00      	ldr	r2, [sp, #0]
 800b3b2:	7013      	strb	r3, [r2, #0]
 800b3b4:	e608      	b.n	800afc8 <_dtoa_r+0x698>
 800b3b6:	9b07      	ldr	r3, [sp, #28]
 800b3b8:	9a07      	ldr	r2, [sp, #28]
 800b3ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d028      	beq.n	800b416 <_dtoa_r+0xae6>
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	220a      	movs	r2, #10
 800b3ca:	4658      	mov	r0, fp
 800b3cc:	f000 f9d6 	bl	800b77c <__multadd>
 800b3d0:	42af      	cmp	r7, r5
 800b3d2:	4681      	mov	r9, r0
 800b3d4:	f04f 0300 	mov.w	r3, #0
 800b3d8:	f04f 020a 	mov.w	r2, #10
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4658      	mov	r0, fp
 800b3e0:	d107      	bne.n	800b3f2 <_dtoa_r+0xac2>
 800b3e2:	f000 f9cb 	bl	800b77c <__multadd>
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	9b07      	ldr	r3, [sp, #28]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	9307      	str	r3, [sp, #28]
 800b3f0:	e774      	b.n	800b2dc <_dtoa_r+0x9ac>
 800b3f2:	f000 f9c3 	bl	800b77c <__multadd>
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	220a      	movs	r2, #10
 800b3fe:	4658      	mov	r0, fp
 800b400:	f000 f9bc 	bl	800b77c <__multadd>
 800b404:	4605      	mov	r5, r0
 800b406:	e7f0      	b.n	800b3ea <_dtoa_r+0xaba>
 800b408:	9b00      	ldr	r3, [sp, #0]
 800b40a:	2700      	movs	r7, #0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bfcc      	ite	gt
 800b410:	461e      	movgt	r6, r3
 800b412:	2601      	movle	r6, #1
 800b414:	4456      	add	r6, sl
 800b416:	4649      	mov	r1, r9
 800b418:	2201      	movs	r2, #1
 800b41a:	4658      	mov	r0, fp
 800b41c:	f000 fba6 	bl	800bb6c <__lshift>
 800b420:	4621      	mov	r1, r4
 800b422:	4681      	mov	r9, r0
 800b424:	f000 fc0e 	bl	800bc44 <__mcmp>
 800b428:	2800      	cmp	r0, #0
 800b42a:	dcb0      	bgt.n	800b38e <_dtoa_r+0xa5e>
 800b42c:	d102      	bne.n	800b434 <_dtoa_r+0xb04>
 800b42e:	f018 0f01 	tst.w	r8, #1
 800b432:	d1ac      	bne.n	800b38e <_dtoa_r+0xa5e>
 800b434:	4633      	mov	r3, r6
 800b436:	461e      	mov	r6, r3
 800b438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b43c:	2a30      	cmp	r2, #48	@ 0x30
 800b43e:	d0fa      	beq.n	800b436 <_dtoa_r+0xb06>
 800b440:	e5c2      	b.n	800afc8 <_dtoa_r+0x698>
 800b442:	459a      	cmp	sl, r3
 800b444:	d1a4      	bne.n	800b390 <_dtoa_r+0xa60>
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	3301      	adds	r3, #1
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	2331      	movs	r3, #49	@ 0x31
 800b44e:	f88a 3000 	strb.w	r3, [sl]
 800b452:	e5b9      	b.n	800afc8 <_dtoa_r+0x698>
 800b454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b456:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b4b4 <_dtoa_r+0xb84>
 800b45a:	b11b      	cbz	r3, 800b464 <_dtoa_r+0xb34>
 800b45c:	f10a 0308 	add.w	r3, sl, #8
 800b460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	4650      	mov	r0, sl
 800b466:	b019      	add	sp, #100	@ 0x64
 800b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b46e:	2b01      	cmp	r3, #1
 800b470:	f77f ae37 	ble.w	800b0e2 <_dtoa_r+0x7b2>
 800b474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b476:	930a      	str	r3, [sp, #40]	@ 0x28
 800b478:	2001      	movs	r0, #1
 800b47a:	e655      	b.n	800b128 <_dtoa_r+0x7f8>
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f77f aed6 	ble.w	800b230 <_dtoa_r+0x900>
 800b484:	4656      	mov	r6, sl
 800b486:	4621      	mov	r1, r4
 800b488:	4648      	mov	r0, r9
 800b48a:	f7ff f9c1 	bl	800a810 <quorem>
 800b48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	f806 8b01 	strb.w	r8, [r6], #1
 800b498:	eba6 020a 	sub.w	r2, r6, sl
 800b49c:	4293      	cmp	r3, r2
 800b49e:	ddb3      	ble.n	800b408 <_dtoa_r+0xad8>
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	220a      	movs	r2, #10
 800b4a6:	4658      	mov	r0, fp
 800b4a8:	f000 f968 	bl	800b77c <__multadd>
 800b4ac:	4681      	mov	r9, r0
 800b4ae:	e7ea      	b.n	800b486 <_dtoa_r+0xb56>
 800b4b0:	0800e001 	.word	0x0800e001
 800b4b4:	0800df85 	.word	0x0800df85

0800b4b8 <_free_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d041      	beq.n	800b544 <_free_r+0x8c>
 800b4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c4:	1f0c      	subs	r4, r1, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	bfb8      	it	lt
 800b4ca:	18e4      	addlt	r4, r4, r3
 800b4cc:	f000 f8e8 	bl	800b6a0 <__malloc_lock>
 800b4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b548 <_free_r+0x90>)
 800b4d2:	6813      	ldr	r3, [r2, #0]
 800b4d4:	b933      	cbnz	r3, 800b4e4 <_free_r+0x2c>
 800b4d6:	6063      	str	r3, [r4, #4]
 800b4d8:	6014      	str	r4, [r2, #0]
 800b4da:	4628      	mov	r0, r5
 800b4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4e0:	f000 b8e4 	b.w	800b6ac <__malloc_unlock>
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d908      	bls.n	800b4fa <_free_r+0x42>
 800b4e8:	6820      	ldr	r0, [r4, #0]
 800b4ea:	1821      	adds	r1, r4, r0
 800b4ec:	428b      	cmp	r3, r1
 800b4ee:	bf01      	itttt	eq
 800b4f0:	6819      	ldreq	r1, [r3, #0]
 800b4f2:	685b      	ldreq	r3, [r3, #4]
 800b4f4:	1809      	addeq	r1, r1, r0
 800b4f6:	6021      	streq	r1, [r4, #0]
 800b4f8:	e7ed      	b.n	800b4d6 <_free_r+0x1e>
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	b10b      	cbz	r3, 800b504 <_free_r+0x4c>
 800b500:	42a3      	cmp	r3, r4
 800b502:	d9fa      	bls.n	800b4fa <_free_r+0x42>
 800b504:	6811      	ldr	r1, [r2, #0]
 800b506:	1850      	adds	r0, r2, r1
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d10b      	bne.n	800b524 <_free_r+0x6c>
 800b50c:	6820      	ldr	r0, [r4, #0]
 800b50e:	4401      	add	r1, r0
 800b510:	1850      	adds	r0, r2, r1
 800b512:	6011      	str	r1, [r2, #0]
 800b514:	4283      	cmp	r3, r0
 800b516:	d1e0      	bne.n	800b4da <_free_r+0x22>
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	4408      	add	r0, r1
 800b51e:	6053      	str	r3, [r2, #4]
 800b520:	6010      	str	r0, [r2, #0]
 800b522:	e7da      	b.n	800b4da <_free_r+0x22>
 800b524:	d902      	bls.n	800b52c <_free_r+0x74>
 800b526:	230c      	movs	r3, #12
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	e7d6      	b.n	800b4da <_free_r+0x22>
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	1821      	adds	r1, r4, r0
 800b530:	428b      	cmp	r3, r1
 800b532:	bf02      	ittt	eq
 800b534:	6819      	ldreq	r1, [r3, #0]
 800b536:	685b      	ldreq	r3, [r3, #4]
 800b538:	1809      	addeq	r1, r1, r0
 800b53a:	6063      	str	r3, [r4, #4]
 800b53c:	bf08      	it	eq
 800b53e:	6021      	streq	r1, [r4, #0]
 800b540:	6054      	str	r4, [r2, #4]
 800b542:	e7ca      	b.n	800b4da <_free_r+0x22>
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	bf00      	nop
 800b548:	20000428 	.word	0x20000428

0800b54c <malloc>:
 800b54c:	4b02      	ldr	r3, [pc, #8]	@ (800b558 <malloc+0xc>)
 800b54e:	4601      	mov	r1, r0
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	f000 b825 	b.w	800b5a0 <_malloc_r>
 800b556:	bf00      	nop
 800b558:	20000018 	.word	0x20000018

0800b55c <sbrk_aligned>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	4e0f      	ldr	r6, [pc, #60]	@ (800b59c <sbrk_aligned+0x40>)
 800b560:	460c      	mov	r4, r1
 800b562:	4605      	mov	r5, r0
 800b564:	6831      	ldr	r1, [r6, #0]
 800b566:	b911      	cbnz	r1, 800b56e <sbrk_aligned+0x12>
 800b568:	f001 fe18 	bl	800d19c <_sbrk_r>
 800b56c:	6030      	str	r0, [r6, #0]
 800b56e:	4621      	mov	r1, r4
 800b570:	4628      	mov	r0, r5
 800b572:	f001 fe13 	bl	800d19c <_sbrk_r>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d103      	bne.n	800b582 <sbrk_aligned+0x26>
 800b57a:	f04f 34ff 	mov.w	r4, #4294967295
 800b57e:	4620      	mov	r0, r4
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	1cc4      	adds	r4, r0, #3
 800b584:	f024 0403 	bic.w	r4, r4, #3
 800b588:	42a0      	cmp	r0, r4
 800b58a:	d0f8      	beq.n	800b57e <sbrk_aligned+0x22>
 800b58c:	1a21      	subs	r1, r4, r0
 800b58e:	4628      	mov	r0, r5
 800b590:	f001 fe04 	bl	800d19c <_sbrk_r>
 800b594:	3001      	adds	r0, #1
 800b596:	d1f2      	bne.n	800b57e <sbrk_aligned+0x22>
 800b598:	e7ef      	b.n	800b57a <sbrk_aligned+0x1e>
 800b59a:	bf00      	nop
 800b59c:	20000424 	.word	0x20000424

0800b5a0 <_malloc_r>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	1ccd      	adds	r5, r1, #3
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	f025 0503 	bic.w	r5, r5, #3
 800b5ac:	3508      	adds	r5, #8
 800b5ae:	2d0c      	cmp	r5, #12
 800b5b0:	bf38      	it	cc
 800b5b2:	250c      	movcc	r5, #12
 800b5b4:	2d00      	cmp	r5, #0
 800b5b6:	db01      	blt.n	800b5bc <_malloc_r+0x1c>
 800b5b8:	42a9      	cmp	r1, r5
 800b5ba:	d904      	bls.n	800b5c6 <_malloc_r+0x26>
 800b5bc:	230c      	movs	r3, #12
 800b5be:	6033      	str	r3, [r6, #0]
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b69c <_malloc_r+0xfc>
 800b5ca:	f000 f869 	bl	800b6a0 <__malloc_lock>
 800b5ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	bb44      	cbnz	r4, 800b628 <_malloc_r+0x88>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff ffbf 	bl	800b55c <sbrk_aligned>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	d158      	bne.n	800b696 <_malloc_r+0xf6>
 800b5e4:	f8d8 4000 	ldr.w	r4, [r8]
 800b5e8:	4627      	mov	r7, r4
 800b5ea:	2f00      	cmp	r7, #0
 800b5ec:	d143      	bne.n	800b676 <_malloc_r+0xd6>
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	d04b      	beq.n	800b68a <_malloc_r+0xea>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	eb04 0903 	add.w	r9, r4, r3
 800b5fc:	f001 fdce 	bl	800d19c <_sbrk_r>
 800b600:	4581      	cmp	r9, r0
 800b602:	d142      	bne.n	800b68a <_malloc_r+0xea>
 800b604:	6821      	ldr	r1, [r4, #0]
 800b606:	4630      	mov	r0, r6
 800b608:	1a6d      	subs	r5, r5, r1
 800b60a:	4629      	mov	r1, r5
 800b60c:	f7ff ffa6 	bl	800b55c <sbrk_aligned>
 800b610:	3001      	adds	r0, #1
 800b612:	d03a      	beq.n	800b68a <_malloc_r+0xea>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	442b      	add	r3, r5
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	f8d8 3000 	ldr.w	r3, [r8]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	bb62      	cbnz	r2, 800b67c <_malloc_r+0xdc>
 800b622:	f8c8 7000 	str.w	r7, [r8]
 800b626:	e00f      	b.n	800b648 <_malloc_r+0xa8>
 800b628:	6822      	ldr	r2, [r4, #0]
 800b62a:	1b52      	subs	r2, r2, r5
 800b62c:	d420      	bmi.n	800b670 <_malloc_r+0xd0>
 800b62e:	2a0b      	cmp	r2, #11
 800b630:	d917      	bls.n	800b662 <_malloc_r+0xc2>
 800b632:	1961      	adds	r1, r4, r5
 800b634:	42a3      	cmp	r3, r4
 800b636:	6025      	str	r5, [r4, #0]
 800b638:	bf18      	it	ne
 800b63a:	6059      	strne	r1, [r3, #4]
 800b63c:	6863      	ldr	r3, [r4, #4]
 800b63e:	bf08      	it	eq
 800b640:	f8c8 1000 	streq.w	r1, [r8]
 800b644:	5162      	str	r2, [r4, r5]
 800b646:	604b      	str	r3, [r1, #4]
 800b648:	4630      	mov	r0, r6
 800b64a:	f000 f82f 	bl	800b6ac <__malloc_unlock>
 800b64e:	f104 000b 	add.w	r0, r4, #11
 800b652:	1d23      	adds	r3, r4, #4
 800b654:	f020 0007 	bic.w	r0, r0, #7
 800b658:	1ac2      	subs	r2, r0, r3
 800b65a:	bf1c      	itt	ne
 800b65c:	1a1b      	subne	r3, r3, r0
 800b65e:	50a3      	strne	r3, [r4, r2]
 800b660:	e7af      	b.n	800b5c2 <_malloc_r+0x22>
 800b662:	6862      	ldr	r2, [r4, #4]
 800b664:	42a3      	cmp	r3, r4
 800b666:	bf0c      	ite	eq
 800b668:	f8c8 2000 	streq.w	r2, [r8]
 800b66c:	605a      	strne	r2, [r3, #4]
 800b66e:	e7eb      	b.n	800b648 <_malloc_r+0xa8>
 800b670:	4623      	mov	r3, r4
 800b672:	6864      	ldr	r4, [r4, #4]
 800b674:	e7ae      	b.n	800b5d4 <_malloc_r+0x34>
 800b676:	463c      	mov	r4, r7
 800b678:	687f      	ldr	r7, [r7, #4]
 800b67a:	e7b6      	b.n	800b5ea <_malloc_r+0x4a>
 800b67c:	461a      	mov	r2, r3
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	42a3      	cmp	r3, r4
 800b682:	d1fb      	bne.n	800b67c <_malloc_r+0xdc>
 800b684:	2300      	movs	r3, #0
 800b686:	6053      	str	r3, [r2, #4]
 800b688:	e7de      	b.n	800b648 <_malloc_r+0xa8>
 800b68a:	230c      	movs	r3, #12
 800b68c:	4630      	mov	r0, r6
 800b68e:	6033      	str	r3, [r6, #0]
 800b690:	f000 f80c 	bl	800b6ac <__malloc_unlock>
 800b694:	e794      	b.n	800b5c0 <_malloc_r+0x20>
 800b696:	6005      	str	r5, [r0, #0]
 800b698:	e7d6      	b.n	800b648 <_malloc_r+0xa8>
 800b69a:	bf00      	nop
 800b69c:	20000428 	.word	0x20000428

0800b6a0 <__malloc_lock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	@ (800b6a8 <__malloc_lock+0x8>)
 800b6a2:	f7ff b89e 	b.w	800a7e2 <__retarget_lock_acquire_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	20000420 	.word	0x20000420

0800b6ac <__malloc_unlock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	@ (800b6b4 <__malloc_unlock+0x8>)
 800b6ae:	f7ff b899 	b.w	800a7e4 <__retarget_lock_release_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	20000420 	.word	0x20000420

0800b6b8 <_Balloc>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	69c6      	ldr	r6, [r0, #28]
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	b976      	cbnz	r6, 800b6e0 <_Balloc+0x28>
 800b6c2:	2010      	movs	r0, #16
 800b6c4:	f7ff ff42 	bl	800b54c <malloc>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	61e0      	str	r0, [r4, #28]
 800b6cc:	b920      	cbnz	r0, 800b6d8 <_Balloc+0x20>
 800b6ce:	4b18      	ldr	r3, [pc, #96]	@ (800b730 <_Balloc+0x78>)
 800b6d0:	216b      	movs	r1, #107	@ 0x6b
 800b6d2:	4818      	ldr	r0, [pc, #96]	@ (800b734 <_Balloc+0x7c>)
 800b6d4:	f001 fd88 	bl	800d1e8 <__assert_func>
 800b6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6dc:	6006      	str	r6, [r0, #0]
 800b6de:	60c6      	str	r6, [r0, #12]
 800b6e0:	69e6      	ldr	r6, [r4, #28]
 800b6e2:	68f3      	ldr	r3, [r6, #12]
 800b6e4:	b183      	cbz	r3, 800b708 <_Balloc+0x50>
 800b6e6:	69e3      	ldr	r3, [r4, #28]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ee:	b9b8      	cbnz	r0, 800b720 <_Balloc+0x68>
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	fa01 f605 	lsl.w	r6, r1, r5
 800b6f8:	1d72      	adds	r2, r6, #5
 800b6fa:	0092      	lsls	r2, r2, #2
 800b6fc:	f001 fd92 	bl	800d224 <_calloc_r>
 800b700:	b160      	cbz	r0, 800b71c <_Balloc+0x64>
 800b702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b706:	e00e      	b.n	800b726 <_Balloc+0x6e>
 800b708:	2221      	movs	r2, #33	@ 0x21
 800b70a:	2104      	movs	r1, #4
 800b70c:	4620      	mov	r0, r4
 800b70e:	f001 fd89 	bl	800d224 <_calloc_r>
 800b712:	69e3      	ldr	r3, [r4, #28]
 800b714:	60f0      	str	r0, [r6, #12]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e4      	bne.n	800b6e6 <_Balloc+0x2e>
 800b71c:	2000      	movs	r0, #0
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	6802      	ldr	r2, [r0, #0]
 800b722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b726:	2300      	movs	r3, #0
 800b728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b72c:	e7f7      	b.n	800b71e <_Balloc+0x66>
 800b72e:	bf00      	nop
 800b730:	0800df92 	.word	0x0800df92
 800b734:	0800e012 	.word	0x0800e012

0800b738 <_Bfree>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	69c6      	ldr	r6, [r0, #28]
 800b73c:	4605      	mov	r5, r0
 800b73e:	460c      	mov	r4, r1
 800b740:	b976      	cbnz	r6, 800b760 <_Bfree+0x28>
 800b742:	2010      	movs	r0, #16
 800b744:	f7ff ff02 	bl	800b54c <malloc>
 800b748:	4602      	mov	r2, r0
 800b74a:	61e8      	str	r0, [r5, #28]
 800b74c:	b920      	cbnz	r0, 800b758 <_Bfree+0x20>
 800b74e:	4b09      	ldr	r3, [pc, #36]	@ (800b774 <_Bfree+0x3c>)
 800b750:	218f      	movs	r1, #143	@ 0x8f
 800b752:	4809      	ldr	r0, [pc, #36]	@ (800b778 <_Bfree+0x40>)
 800b754:	f001 fd48 	bl	800d1e8 <__assert_func>
 800b758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b75c:	6006      	str	r6, [r0, #0]
 800b75e:	60c6      	str	r6, [r0, #12]
 800b760:	b13c      	cbz	r4, 800b772 <_Bfree+0x3a>
 800b762:	69eb      	ldr	r3, [r5, #28]
 800b764:	6862      	ldr	r2, [r4, #4]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b76c:	6021      	str	r1, [r4, #0]
 800b76e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b772:	bd70      	pop	{r4, r5, r6, pc}
 800b774:	0800df92 	.word	0x0800df92
 800b778:	0800e012 	.word	0x0800e012

0800b77c <__multadd>:
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	f101 0c14 	add.w	ip, r1, #20
 800b784:	4607      	mov	r7, r0
 800b786:	460c      	mov	r4, r1
 800b788:	461e      	mov	r6, r3
 800b78a:	690d      	ldr	r5, [r1, #16]
 800b78c:	2000      	movs	r0, #0
 800b78e:	f8dc 3000 	ldr.w	r3, [ip]
 800b792:	3001      	adds	r0, #1
 800b794:	b299      	uxth	r1, r3
 800b796:	4285      	cmp	r5, r0
 800b798:	fb02 6101 	mla	r1, r2, r1, r6
 800b79c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7a0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b7a4:	b289      	uxth	r1, r1
 800b7a6:	fb02 3306 	mla	r3, r2, r6, r3
 800b7aa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b7b6:	dcea      	bgt.n	800b78e <__multadd+0x12>
 800b7b8:	b30e      	cbz	r6, 800b7fe <__multadd+0x82>
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dc19      	bgt.n	800b7f4 <__multadd+0x78>
 800b7c0:	6861      	ldr	r1, [r4, #4]
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	3101      	adds	r1, #1
 800b7c6:	f7ff ff77 	bl	800b6b8 <_Balloc>
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	b928      	cbnz	r0, 800b7da <__multadd+0x5e>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b804 <__multadd+0x88>)
 800b7d2:	21ba      	movs	r1, #186	@ 0xba
 800b7d4:	480c      	ldr	r0, [pc, #48]	@ (800b808 <__multadd+0x8c>)
 800b7d6:	f001 fd07 	bl	800d1e8 <__assert_func>
 800b7da:	6922      	ldr	r2, [r4, #16]
 800b7dc:	f104 010c 	add.w	r1, r4, #12
 800b7e0:	300c      	adds	r0, #12
 800b7e2:	3202      	adds	r2, #2
 800b7e4:	0092      	lsls	r2, r2, #2
 800b7e6:	f001 fce9 	bl	800d1bc <memcpy>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4644      	mov	r4, r8
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	f7ff ffa2 	bl	800b738 <_Bfree>
 800b7f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7f8:	3501      	adds	r5, #1
 800b7fa:	615e      	str	r6, [r3, #20]
 800b7fc:	6125      	str	r5, [r4, #16]
 800b7fe:	4620      	mov	r0, r4
 800b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b804:	0800e001 	.word	0x0800e001
 800b808:	0800e012 	.word	0x0800e012

0800b80c <__s2b>:
 800b80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b810:	4615      	mov	r5, r2
 800b812:	461f      	mov	r7, r3
 800b814:	2209      	movs	r2, #9
 800b816:	3308      	adds	r3, #8
 800b818:	460c      	mov	r4, r1
 800b81a:	4606      	mov	r6, r0
 800b81c:	2100      	movs	r1, #0
 800b81e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b822:	2201      	movs	r2, #1
 800b824:	429a      	cmp	r2, r3
 800b826:	db09      	blt.n	800b83c <__s2b+0x30>
 800b828:	4630      	mov	r0, r6
 800b82a:	f7ff ff45 	bl	800b6b8 <_Balloc>
 800b82e:	b940      	cbnz	r0, 800b842 <__s2b+0x36>
 800b830:	4602      	mov	r2, r0
 800b832:	4b19      	ldr	r3, [pc, #100]	@ (800b898 <__s2b+0x8c>)
 800b834:	21d3      	movs	r1, #211	@ 0xd3
 800b836:	4819      	ldr	r0, [pc, #100]	@ (800b89c <__s2b+0x90>)
 800b838:	f001 fcd6 	bl	800d1e8 <__assert_func>
 800b83c:	0052      	lsls	r2, r2, #1
 800b83e:	3101      	adds	r1, #1
 800b840:	e7f0      	b.n	800b824 <__s2b+0x18>
 800b842:	9b08      	ldr	r3, [sp, #32]
 800b844:	2d09      	cmp	r5, #9
 800b846:	6143      	str	r3, [r0, #20]
 800b848:	f04f 0301 	mov.w	r3, #1
 800b84c:	6103      	str	r3, [r0, #16]
 800b84e:	dd16      	ble.n	800b87e <__s2b+0x72>
 800b850:	f104 0909 	add.w	r9, r4, #9
 800b854:	442c      	add	r4, r5
 800b856:	46c8      	mov	r8, r9
 800b858:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b85c:	4601      	mov	r1, r0
 800b85e:	220a      	movs	r2, #10
 800b860:	4630      	mov	r0, r6
 800b862:	3b30      	subs	r3, #48	@ 0x30
 800b864:	f7ff ff8a 	bl	800b77c <__multadd>
 800b868:	45a0      	cmp	r8, r4
 800b86a:	d1f5      	bne.n	800b858 <__s2b+0x4c>
 800b86c:	f1a5 0408 	sub.w	r4, r5, #8
 800b870:	444c      	add	r4, r9
 800b872:	1b2d      	subs	r5, r5, r4
 800b874:	1963      	adds	r3, r4, r5
 800b876:	42bb      	cmp	r3, r7
 800b878:	db04      	blt.n	800b884 <__s2b+0x78>
 800b87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b87e:	340a      	adds	r4, #10
 800b880:	2509      	movs	r5, #9
 800b882:	e7f6      	b.n	800b872 <__s2b+0x66>
 800b884:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b888:	4601      	mov	r1, r0
 800b88a:	220a      	movs	r2, #10
 800b88c:	4630      	mov	r0, r6
 800b88e:	3b30      	subs	r3, #48	@ 0x30
 800b890:	f7ff ff74 	bl	800b77c <__multadd>
 800b894:	e7ee      	b.n	800b874 <__s2b+0x68>
 800b896:	bf00      	nop
 800b898:	0800e001 	.word	0x0800e001
 800b89c:	0800e012 	.word	0x0800e012

0800b8a0 <__hi0bits>:
 800b8a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	bf36      	itet	cc
 800b8a8:	0403      	lslcc	r3, r0, #16
 800b8aa:	2000      	movcs	r0, #0
 800b8ac:	2010      	movcc	r0, #16
 800b8ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8b2:	bf3c      	itt	cc
 800b8b4:	021b      	lslcc	r3, r3, #8
 800b8b6:	3008      	addcc	r0, #8
 800b8b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8bc:	bf3c      	itt	cc
 800b8be:	011b      	lslcc	r3, r3, #4
 800b8c0:	3004      	addcc	r0, #4
 800b8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8c6:	bf3c      	itt	cc
 800b8c8:	009b      	lslcc	r3, r3, #2
 800b8ca:	3002      	addcc	r0, #2
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	db05      	blt.n	800b8dc <__hi0bits+0x3c>
 800b8d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b8d4:	f100 0001 	add.w	r0, r0, #1
 800b8d8:	bf08      	it	eq
 800b8da:	2020      	moveq	r0, #32
 800b8dc:	4770      	bx	lr

0800b8de <__lo0bits>:
 800b8de:	6803      	ldr	r3, [r0, #0]
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	f013 0007 	ands.w	r0, r3, #7
 800b8e6:	d00b      	beq.n	800b900 <__lo0bits+0x22>
 800b8e8:	07d9      	lsls	r1, r3, #31
 800b8ea:	d421      	bmi.n	800b930 <__lo0bits+0x52>
 800b8ec:	0798      	lsls	r0, r3, #30
 800b8ee:	bf47      	ittee	mi
 800b8f0:	085b      	lsrmi	r3, r3, #1
 800b8f2:	2001      	movmi	r0, #1
 800b8f4:	089b      	lsrpl	r3, r3, #2
 800b8f6:	2002      	movpl	r0, #2
 800b8f8:	bf4c      	ite	mi
 800b8fa:	6013      	strmi	r3, [r2, #0]
 800b8fc:	6013      	strpl	r3, [r2, #0]
 800b8fe:	4770      	bx	lr
 800b900:	b299      	uxth	r1, r3
 800b902:	b909      	cbnz	r1, 800b908 <__lo0bits+0x2a>
 800b904:	0c1b      	lsrs	r3, r3, #16
 800b906:	2010      	movs	r0, #16
 800b908:	b2d9      	uxtb	r1, r3
 800b90a:	b909      	cbnz	r1, 800b910 <__lo0bits+0x32>
 800b90c:	3008      	adds	r0, #8
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	0719      	lsls	r1, r3, #28
 800b912:	bf04      	itt	eq
 800b914:	091b      	lsreq	r3, r3, #4
 800b916:	3004      	addeq	r0, #4
 800b918:	0799      	lsls	r1, r3, #30
 800b91a:	bf04      	itt	eq
 800b91c:	089b      	lsreq	r3, r3, #2
 800b91e:	3002      	addeq	r0, #2
 800b920:	07d9      	lsls	r1, r3, #31
 800b922:	d403      	bmi.n	800b92c <__lo0bits+0x4e>
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	f100 0001 	add.w	r0, r0, #1
 800b92a:	d003      	beq.n	800b934 <__lo0bits+0x56>
 800b92c:	6013      	str	r3, [r2, #0]
 800b92e:	4770      	bx	lr
 800b930:	2000      	movs	r0, #0
 800b932:	4770      	bx	lr
 800b934:	2020      	movs	r0, #32
 800b936:	4770      	bx	lr

0800b938 <__i2b>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	460c      	mov	r4, r1
 800b93c:	2101      	movs	r1, #1
 800b93e:	f7ff febb 	bl	800b6b8 <_Balloc>
 800b942:	4602      	mov	r2, r0
 800b944:	b928      	cbnz	r0, 800b952 <__i2b+0x1a>
 800b946:	4b05      	ldr	r3, [pc, #20]	@ (800b95c <__i2b+0x24>)
 800b948:	f240 1145 	movw	r1, #325	@ 0x145
 800b94c:	4804      	ldr	r0, [pc, #16]	@ (800b960 <__i2b+0x28>)
 800b94e:	f001 fc4b 	bl	800d1e8 <__assert_func>
 800b952:	2301      	movs	r3, #1
 800b954:	6144      	str	r4, [r0, #20]
 800b956:	6103      	str	r3, [r0, #16]
 800b958:	bd10      	pop	{r4, pc}
 800b95a:	bf00      	nop
 800b95c:	0800e001 	.word	0x0800e001
 800b960:	0800e012 	.word	0x0800e012

0800b964 <__multiply>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	4614      	mov	r4, r2
 800b96a:	690a      	ldr	r2, [r1, #16]
 800b96c:	460f      	mov	r7, r1
 800b96e:	b085      	sub	sp, #20
 800b970:	6923      	ldr	r3, [r4, #16]
 800b972:	429a      	cmp	r2, r3
 800b974:	bfa2      	ittt	ge
 800b976:	4623      	movge	r3, r4
 800b978:	460c      	movge	r4, r1
 800b97a:	461f      	movge	r7, r3
 800b97c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b980:	68a3      	ldr	r3, [r4, #8]
 800b982:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b986:	6861      	ldr	r1, [r4, #4]
 800b988:	eb0a 0609 	add.w	r6, sl, r9
 800b98c:	42b3      	cmp	r3, r6
 800b98e:	bfb8      	it	lt
 800b990:	3101      	addlt	r1, #1
 800b992:	f7ff fe91 	bl	800b6b8 <_Balloc>
 800b996:	b930      	cbnz	r0, 800b9a6 <__multiply+0x42>
 800b998:	4602      	mov	r2, r0
 800b99a:	4b45      	ldr	r3, [pc, #276]	@ (800bab0 <__multiply+0x14c>)
 800b99c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b9a0:	4844      	ldr	r0, [pc, #272]	@ (800bab4 <__multiply+0x150>)
 800b9a2:	f001 fc21 	bl	800d1e8 <__assert_func>
 800b9a6:	f100 0514 	add.w	r5, r0, #20
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	4543      	cmp	r3, r8
 800b9b4:	d321      	bcc.n	800b9fa <__multiply+0x96>
 800b9b6:	f107 0114 	add.w	r1, r7, #20
 800b9ba:	f104 0214 	add.w	r2, r4, #20
 800b9be:	f104 0715 	add.w	r7, r4, #21
 800b9c2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b9c6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b9ca:	9302      	str	r3, [sp, #8]
 800b9cc:	1b13      	subs	r3, r2, r4
 800b9ce:	3b15      	subs	r3, #21
 800b9d0:	f023 0303 	bic.w	r3, r3, #3
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	42ba      	cmp	r2, r7
 800b9d8:	bf38      	it	cc
 800b9da:	2304      	movcc	r3, #4
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	9b02      	ldr	r3, [sp, #8]
 800b9e0:	9103      	str	r1, [sp, #12]
 800b9e2:	428b      	cmp	r3, r1
 800b9e4:	d80c      	bhi.n	800ba00 <__multiply+0x9c>
 800b9e6:	2e00      	cmp	r6, #0
 800b9e8:	dd03      	ble.n	800b9f2 <__multiply+0x8e>
 800b9ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d05b      	beq.n	800baaa <__multiply+0x146>
 800b9f2:	6106      	str	r6, [r0, #16]
 800b9f4:	b005      	add	sp, #20
 800b9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9fa:	f843 2b04 	str.w	r2, [r3], #4
 800b9fe:	e7d8      	b.n	800b9b2 <__multiply+0x4e>
 800ba00:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba04:	f1ba 0f00 	cmp.w	sl, #0
 800ba08:	d024      	beq.n	800ba54 <__multiply+0xf0>
 800ba0a:	f104 0e14 	add.w	lr, r4, #20
 800ba0e:	46a9      	mov	r9, r5
 800ba10:	f04f 0c00 	mov.w	ip, #0
 800ba14:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba18:	f8d9 3000 	ldr.w	r3, [r9]
 800ba1c:	fa1f fb87 	uxth.w	fp, r7
 800ba20:	4572      	cmp	r2, lr
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba2c:	f8d9 7000 	ldr.w	r7, [r9]
 800ba30:	4463      	add	r3, ip
 800ba32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba36:	fb0a c70b 	mla	r7, sl, fp, ip
 800ba3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba48:	f849 3b04 	str.w	r3, [r9], #4
 800ba4c:	d8e2      	bhi.n	800ba14 <__multiply+0xb0>
 800ba4e:	9b01      	ldr	r3, [sp, #4]
 800ba50:	f845 c003 	str.w	ip, [r5, r3]
 800ba54:	9b03      	ldr	r3, [sp, #12]
 800ba56:	3104      	adds	r1, #4
 800ba58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba5c:	f1b9 0f00 	cmp.w	r9, #0
 800ba60:	d021      	beq.n	800baa6 <__multiply+0x142>
 800ba62:	682b      	ldr	r3, [r5, #0]
 800ba64:	f104 0c14 	add.w	ip, r4, #20
 800ba68:	46ae      	mov	lr, r5
 800ba6a:	f04f 0a00 	mov.w	sl, #0
 800ba6e:	f8bc b000 	ldrh.w	fp, [ip]
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ba78:	fb09 770b 	mla	r7, r9, fp, r7
 800ba7c:	4457      	add	r7, sl
 800ba7e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba82:	f84e 3b04 	str.w	r3, [lr], #4
 800ba86:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba8e:	f8be 3000 	ldrh.w	r3, [lr]
 800ba92:	4562      	cmp	r2, ip
 800ba94:	fb09 330a 	mla	r3, r9, sl, r3
 800ba98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baa0:	d8e5      	bhi.n	800ba6e <__multiply+0x10a>
 800baa2:	9f01      	ldr	r7, [sp, #4]
 800baa4:	51eb      	str	r3, [r5, r7]
 800baa6:	3504      	adds	r5, #4
 800baa8:	e799      	b.n	800b9de <__multiply+0x7a>
 800baaa:	3e01      	subs	r6, #1
 800baac:	e79b      	b.n	800b9e6 <__multiply+0x82>
 800baae:	bf00      	nop
 800bab0:	0800e001 	.word	0x0800e001
 800bab4:	0800e012 	.word	0x0800e012

0800bab8 <__pow5mult>:
 800bab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800babc:	4615      	mov	r5, r2
 800babe:	f012 0203 	ands.w	r2, r2, #3
 800bac2:	4607      	mov	r7, r0
 800bac4:	460e      	mov	r6, r1
 800bac6:	d007      	beq.n	800bad8 <__pow5mult+0x20>
 800bac8:	3a01      	subs	r2, #1
 800baca:	4c25      	ldr	r4, [pc, #148]	@ (800bb60 <__pow5mult+0xa8>)
 800bacc:	2300      	movs	r3, #0
 800bace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bad2:	f7ff fe53 	bl	800b77c <__multadd>
 800bad6:	4606      	mov	r6, r0
 800bad8:	10ad      	asrs	r5, r5, #2
 800bada:	d03d      	beq.n	800bb58 <__pow5mult+0xa0>
 800badc:	69fc      	ldr	r4, [r7, #28]
 800bade:	b97c      	cbnz	r4, 800bb00 <__pow5mult+0x48>
 800bae0:	2010      	movs	r0, #16
 800bae2:	f7ff fd33 	bl	800b54c <malloc>
 800bae6:	4602      	mov	r2, r0
 800bae8:	61f8      	str	r0, [r7, #28]
 800baea:	b928      	cbnz	r0, 800baf8 <__pow5mult+0x40>
 800baec:	4b1d      	ldr	r3, [pc, #116]	@ (800bb64 <__pow5mult+0xac>)
 800baee:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800baf2:	481d      	ldr	r0, [pc, #116]	@ (800bb68 <__pow5mult+0xb0>)
 800baf4:	f001 fb78 	bl	800d1e8 <__assert_func>
 800baf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bafc:	6004      	str	r4, [r0, #0]
 800bafe:	60c4      	str	r4, [r0, #12]
 800bb00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb08:	b94c      	cbnz	r4, 800bb1e <__pow5mult+0x66>
 800bb0a:	f240 2171 	movw	r1, #625	@ 0x271
 800bb0e:	4638      	mov	r0, r7
 800bb10:	f7ff ff12 	bl	800b938 <__i2b>
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb1c:	6003      	str	r3, [r0, #0]
 800bb1e:	f04f 0900 	mov.w	r9, #0
 800bb22:	07eb      	lsls	r3, r5, #31
 800bb24:	d50a      	bpl.n	800bb3c <__pow5mult+0x84>
 800bb26:	4631      	mov	r1, r6
 800bb28:	4622      	mov	r2, r4
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	f7ff ff1a 	bl	800b964 <__multiply>
 800bb30:	4680      	mov	r8, r0
 800bb32:	4631      	mov	r1, r6
 800bb34:	4638      	mov	r0, r7
 800bb36:	4646      	mov	r6, r8
 800bb38:	f7ff fdfe 	bl	800b738 <_Bfree>
 800bb3c:	106d      	asrs	r5, r5, #1
 800bb3e:	d00b      	beq.n	800bb58 <__pow5mult+0xa0>
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	b938      	cbnz	r0, 800bb54 <__pow5mult+0x9c>
 800bb44:	4622      	mov	r2, r4
 800bb46:	4621      	mov	r1, r4
 800bb48:	4638      	mov	r0, r7
 800bb4a:	f7ff ff0b 	bl	800b964 <__multiply>
 800bb4e:	6020      	str	r0, [r4, #0]
 800bb50:	f8c0 9000 	str.w	r9, [r0]
 800bb54:	4604      	mov	r4, r0
 800bb56:	e7e4      	b.n	800bb22 <__pow5mult+0x6a>
 800bb58:	4630      	mov	r0, r6
 800bb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5e:	bf00      	nop
 800bb60:	0800e06c 	.word	0x0800e06c
 800bb64:	0800df92 	.word	0x0800df92
 800bb68:	0800e012 	.word	0x0800e012

0800bb6c <__lshift>:
 800bb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb70:	460c      	mov	r4, r1
 800bb72:	4607      	mov	r7, r0
 800bb74:	4691      	mov	r9, r2
 800bb76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb7a:	6923      	ldr	r3, [r4, #16]
 800bb7c:	6849      	ldr	r1, [r1, #4]
 800bb7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	f108 0601 	add.w	r6, r8, #1
 800bb88:	42b3      	cmp	r3, r6
 800bb8a:	db0b      	blt.n	800bba4 <__lshift+0x38>
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f7ff fd93 	bl	800b6b8 <_Balloc>
 800bb92:	4605      	mov	r5, r0
 800bb94:	b948      	cbnz	r0, 800bbaa <__lshift+0x3e>
 800bb96:	4602      	mov	r2, r0
 800bb98:	4b28      	ldr	r3, [pc, #160]	@ (800bc3c <__lshift+0xd0>)
 800bb9a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb9e:	4828      	ldr	r0, [pc, #160]	@ (800bc40 <__lshift+0xd4>)
 800bba0:	f001 fb22 	bl	800d1e8 <__assert_func>
 800bba4:	3101      	adds	r1, #1
 800bba6:	005b      	lsls	r3, r3, #1
 800bba8:	e7ee      	b.n	800bb88 <__lshift+0x1c>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f100 0114 	add.w	r1, r0, #20
 800bbb0:	f100 0210 	add.w	r2, r0, #16
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	4553      	cmp	r3, sl
 800bbb8:	db33      	blt.n	800bc22 <__lshift+0xb6>
 800bbba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbbe:	f104 0314 	add.w	r3, r4, #20
 800bbc2:	6920      	ldr	r0, [r4, #16]
 800bbc4:	f019 091f 	ands.w	r9, r9, #31
 800bbc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbd0:	d02b      	beq.n	800bc2a <__lshift+0xbe>
 800bbd2:	f1c9 0e20 	rsb	lr, r9, #32
 800bbd6:	468a      	mov	sl, r1
 800bbd8:	2200      	movs	r2, #0
 800bbda:	6818      	ldr	r0, [r3, #0]
 800bbdc:	fa00 f009 	lsl.w	r0, r0, r9
 800bbe0:	4310      	orrs	r0, r2
 800bbe2:	f84a 0b04 	str.w	r0, [sl], #4
 800bbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbea:	459c      	cmp	ip, r3
 800bbec:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbf0:	d8f3      	bhi.n	800bbda <__lshift+0x6e>
 800bbf2:	ebac 0304 	sub.w	r3, ip, r4
 800bbf6:	f104 0015 	add.w	r0, r4, #21
 800bbfa:	3b15      	subs	r3, #21
 800bbfc:	f023 0303 	bic.w	r3, r3, #3
 800bc00:	3304      	adds	r3, #4
 800bc02:	4584      	cmp	ip, r0
 800bc04:	bf38      	it	cc
 800bc06:	2304      	movcc	r3, #4
 800bc08:	50ca      	str	r2, [r1, r3]
 800bc0a:	b10a      	cbz	r2, 800bc10 <__lshift+0xa4>
 800bc0c:	f108 0602 	add.w	r6, r8, #2
 800bc10:	3e01      	subs	r6, #1
 800bc12:	4638      	mov	r0, r7
 800bc14:	4621      	mov	r1, r4
 800bc16:	612e      	str	r6, [r5, #16]
 800bc18:	f7ff fd8e 	bl	800b738 <_Bfree>
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc22:	3301      	adds	r3, #1
 800bc24:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc28:	e7c5      	b.n	800bbb6 <__lshift+0x4a>
 800bc2a:	3904      	subs	r1, #4
 800bc2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc30:	459c      	cmp	ip, r3
 800bc32:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc36:	d8f9      	bhi.n	800bc2c <__lshift+0xc0>
 800bc38:	e7ea      	b.n	800bc10 <__lshift+0xa4>
 800bc3a:	bf00      	nop
 800bc3c:	0800e001 	.word	0x0800e001
 800bc40:	0800e012 	.word	0x0800e012

0800bc44 <__mcmp>:
 800bc44:	4603      	mov	r3, r0
 800bc46:	690a      	ldr	r2, [r1, #16]
 800bc48:	6900      	ldr	r0, [r0, #16]
 800bc4a:	1a80      	subs	r0, r0, r2
 800bc4c:	b530      	push	{r4, r5, lr}
 800bc4e:	d10e      	bne.n	800bc6e <__mcmp+0x2a>
 800bc50:	3314      	adds	r3, #20
 800bc52:	3114      	adds	r1, #20
 800bc54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc64:	4295      	cmp	r5, r2
 800bc66:	d003      	beq.n	800bc70 <__mcmp+0x2c>
 800bc68:	d205      	bcs.n	800bc76 <__mcmp+0x32>
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6e:	bd30      	pop	{r4, r5, pc}
 800bc70:	42a3      	cmp	r3, r4
 800bc72:	d3f3      	bcc.n	800bc5c <__mcmp+0x18>
 800bc74:	e7fb      	b.n	800bc6e <__mcmp+0x2a>
 800bc76:	2001      	movs	r0, #1
 800bc78:	e7f9      	b.n	800bc6e <__mcmp+0x2a>
	...

0800bc7c <__mdiff>:
 800bc7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	4689      	mov	r9, r1
 800bc82:	4606      	mov	r6, r0
 800bc84:	4611      	mov	r1, r2
 800bc86:	4614      	mov	r4, r2
 800bc88:	4648      	mov	r0, r9
 800bc8a:	f7ff ffdb 	bl	800bc44 <__mcmp>
 800bc8e:	1e05      	subs	r5, r0, #0
 800bc90:	d112      	bne.n	800bcb8 <__mdiff+0x3c>
 800bc92:	4629      	mov	r1, r5
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff fd0f 	bl	800b6b8 <_Balloc>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	b928      	cbnz	r0, 800bcaa <__mdiff+0x2e>
 800bc9e:	4b41      	ldr	r3, [pc, #260]	@ (800bda4 <__mdiff+0x128>)
 800bca0:	f240 2137 	movw	r1, #567	@ 0x237
 800bca4:	4840      	ldr	r0, [pc, #256]	@ (800bda8 <__mdiff+0x12c>)
 800bca6:	f001 fa9f 	bl	800d1e8 <__assert_func>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	b003      	add	sp, #12
 800bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb8:	bfbc      	itt	lt
 800bcba:	464b      	movlt	r3, r9
 800bcbc:	46a1      	movlt	r9, r4
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	bfb8      	it	lt
 800bcc2:	2501      	movlt	r5, #1
 800bcc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bcc8:	bfb4      	ite	lt
 800bcca:	461c      	movlt	r4, r3
 800bccc:	2500      	movge	r5, #0
 800bcce:	f7ff fcf3 	bl	800b6b8 <_Balloc>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	b918      	cbnz	r0, 800bcde <__mdiff+0x62>
 800bcd6:	4b33      	ldr	r3, [pc, #204]	@ (800bda4 <__mdiff+0x128>)
 800bcd8:	f240 2145 	movw	r1, #581	@ 0x245
 800bcdc:	e7e2      	b.n	800bca4 <__mdiff+0x28>
 800bcde:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bce2:	f104 0e14 	add.w	lr, r4, #20
 800bce6:	6926      	ldr	r6, [r4, #16]
 800bce8:	f100 0b14 	add.w	fp, r0, #20
 800bcec:	60c5      	str	r5, [r0, #12]
 800bcee:	f109 0514 	add.w	r5, r9, #20
 800bcf2:	f109 0310 	add.w	r3, r9, #16
 800bcf6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bcfa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bcfe:	46d9      	mov	r9, fp
 800bd00:	f04f 0c00 	mov.w	ip, #0
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	9b01      	ldr	r3, [sp, #4]
 800bd08:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd0c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd10:	4576      	cmp	r6, lr
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	fa1f f38a 	uxth.w	r3, sl
 800bd18:	4619      	mov	r1, r3
 800bd1a:	b283      	uxth	r3, r0
 800bd1c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bd20:	eba1 0303 	sub.w	r3, r1, r3
 800bd24:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd28:	4463      	add	r3, ip
 800bd2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd38:	f849 3b04 	str.w	r3, [r9], #4
 800bd3c:	d8e3      	bhi.n	800bd06 <__mdiff+0x8a>
 800bd3e:	1b33      	subs	r3, r6, r4
 800bd40:	3415      	adds	r4, #21
 800bd42:	3b15      	subs	r3, #21
 800bd44:	f023 0303 	bic.w	r3, r3, #3
 800bd48:	3304      	adds	r3, #4
 800bd4a:	42a6      	cmp	r6, r4
 800bd4c:	bf38      	it	cc
 800bd4e:	2304      	movcc	r3, #4
 800bd50:	441d      	add	r5, r3
 800bd52:	445b      	add	r3, fp
 800bd54:	462c      	mov	r4, r5
 800bd56:	461e      	mov	r6, r3
 800bd58:	4544      	cmp	r4, r8
 800bd5a:	d30e      	bcc.n	800bd7a <__mdiff+0xfe>
 800bd5c:	f108 0103 	add.w	r1, r8, #3
 800bd60:	1b49      	subs	r1, r1, r5
 800bd62:	3d03      	subs	r5, #3
 800bd64:	f021 0103 	bic.w	r1, r1, #3
 800bd68:	45a8      	cmp	r8, r5
 800bd6a:	bf38      	it	cc
 800bd6c:	2100      	movcc	r1, #0
 800bd6e:	440b      	add	r3, r1
 800bd70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd74:	b199      	cbz	r1, 800bd9e <__mdiff+0x122>
 800bd76:	6117      	str	r7, [r2, #16]
 800bd78:	e79a      	b.n	800bcb0 <__mdiff+0x34>
 800bd7a:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd7e:	46e6      	mov	lr, ip
 800bd80:	fa1f fc81 	uxth.w	ip, r1
 800bd84:	0c08      	lsrs	r0, r1, #16
 800bd86:	4471      	add	r1, lr
 800bd88:	44f4      	add	ip, lr
 800bd8a:	b289      	uxth	r1, r1
 800bd8c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd98:	f846 1b04 	str.w	r1, [r6], #4
 800bd9c:	e7dc      	b.n	800bd58 <__mdiff+0xdc>
 800bd9e:	3f01      	subs	r7, #1
 800bda0:	e7e6      	b.n	800bd70 <__mdiff+0xf4>
 800bda2:	bf00      	nop
 800bda4:	0800e001 	.word	0x0800e001
 800bda8:	0800e012 	.word	0x0800e012

0800bdac <__ulp>:
 800bdac:	b082      	sub	sp, #8
 800bdae:	4b11      	ldr	r3, [pc, #68]	@ (800bdf4 <__ulp+0x48>)
 800bdb0:	ed8d 0b00 	vstr	d0, [sp]
 800bdb4:	9a01      	ldr	r2, [sp, #4]
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	dc08      	bgt.n	800bdd2 <__ulp+0x26>
 800bdc0:	425b      	negs	r3, r3
 800bdc2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bdc6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bdca:	da04      	bge.n	800bdd6 <__ulp+0x2a>
 800bdcc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bdd0:	4113      	asrs	r3, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	e008      	b.n	800bde8 <__ulp+0x3c>
 800bdd6:	f1a2 0314 	sub.w	r3, r2, #20
 800bdda:	2b1e      	cmp	r3, #30
 800bddc:	bfd6      	itet	le
 800bdde:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bde2:	2201      	movgt	r2, #1
 800bde4:	40da      	lsrle	r2, r3
 800bde6:	2300      	movs	r3, #0
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	ec41 0b10 	vmov	d0, r0, r1
 800bdf0:	b002      	add	sp, #8
 800bdf2:	4770      	bx	lr
 800bdf4:	7ff00000 	.word	0x7ff00000

0800bdf8 <__b2d>:
 800bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfc:	6906      	ldr	r6, [r0, #16]
 800bdfe:	f100 0814 	add.w	r8, r0, #20
 800be02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be06:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be0a:	1f37      	subs	r7, r6, #4
 800be0c:	4610      	mov	r0, r2
 800be0e:	f7ff fd47 	bl	800b8a0 <__hi0bits>
 800be12:	f1c0 0320 	rsb	r3, r0, #32
 800be16:	280a      	cmp	r0, #10
 800be18:	600b      	str	r3, [r1, #0]
 800be1a:	491d      	ldr	r1, [pc, #116]	@ (800be90 <__b2d+0x98>)
 800be1c:	dc16      	bgt.n	800be4c <__b2d+0x54>
 800be1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800be22:	45b8      	cmp	r8, r7
 800be24:	f100 0015 	add.w	r0, r0, #21
 800be28:	fa22 f30c 	lsr.w	r3, r2, ip
 800be2c:	fa02 f000 	lsl.w	r0, r2, r0
 800be30:	ea43 0501 	orr.w	r5, r3, r1
 800be34:	bf34      	ite	cc
 800be36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be3a:	2300      	movcs	r3, #0
 800be3c:	fa23 f30c 	lsr.w	r3, r3, ip
 800be40:	4303      	orrs	r3, r0
 800be42:	461c      	mov	r4, r3
 800be44:	ec45 4b10 	vmov	d0, r4, r5
 800be48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4c:	45b8      	cmp	r8, r7
 800be4e:	bf3a      	itte	cc
 800be50:	f1a6 0708 	subcc.w	r7, r6, #8
 800be54:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be58:	2300      	movcs	r3, #0
 800be5a:	380b      	subs	r0, #11
 800be5c:	d014      	beq.n	800be88 <__b2d+0x90>
 800be5e:	f1c0 0120 	rsb	r1, r0, #32
 800be62:	4082      	lsls	r2, r0
 800be64:	4547      	cmp	r7, r8
 800be66:	fa23 f401 	lsr.w	r4, r3, r1
 800be6a:	fa03 f300 	lsl.w	r3, r3, r0
 800be6e:	ea42 0204 	orr.w	r2, r2, r4
 800be72:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800be76:	bf8c      	ite	hi
 800be78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800be7c:	2200      	movls	r2, #0
 800be7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800be82:	40ca      	lsrs	r2, r1
 800be84:	4313      	orrs	r3, r2
 800be86:	e7dc      	b.n	800be42 <__b2d+0x4a>
 800be88:	ea42 0501 	orr.w	r5, r2, r1
 800be8c:	e7d9      	b.n	800be42 <__b2d+0x4a>
 800be8e:	bf00      	nop
 800be90:	3ff00000 	.word	0x3ff00000

0800be94 <__d2b>:
 800be94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be98:	460f      	mov	r7, r1
 800be9a:	2101      	movs	r1, #1
 800be9c:	4616      	mov	r6, r2
 800be9e:	ec59 8b10 	vmov	r8, r9, d0
 800bea2:	f7ff fc09 	bl	800b6b8 <_Balloc>
 800bea6:	4604      	mov	r4, r0
 800bea8:	b930      	cbnz	r0, 800beb8 <__d2b+0x24>
 800beaa:	4602      	mov	r2, r0
 800beac:	4b23      	ldr	r3, [pc, #140]	@ (800bf3c <__d2b+0xa8>)
 800beae:	f240 310f 	movw	r1, #783	@ 0x30f
 800beb2:	4823      	ldr	r0, [pc, #140]	@ (800bf40 <__d2b+0xac>)
 800beb4:	f001 f998 	bl	800d1e8 <__assert_func>
 800beb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bec0:	b10d      	cbz	r5, 800bec6 <__d2b+0x32>
 800bec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	f1b8 0300 	subs.w	r3, r8, #0
 800becc:	d023      	beq.n	800bf16 <__d2b+0x82>
 800bece:	4668      	mov	r0, sp
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	f7ff fd04 	bl	800b8de <__lo0bits>
 800bed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800beda:	b1d0      	cbz	r0, 800bf12 <__d2b+0x7e>
 800bedc:	f1c0 0320 	rsb	r3, r0, #32
 800bee0:	fa02 f303 	lsl.w	r3, r2, r3
 800bee4:	40c2      	lsrs	r2, r0
 800bee6:	430b      	orrs	r3, r1
 800bee8:	9201      	str	r2, [sp, #4]
 800beea:	6163      	str	r3, [r4, #20]
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	61a3      	str	r3, [r4, #24]
 800bef2:	bf0c      	ite	eq
 800bef4:	2201      	moveq	r2, #1
 800bef6:	2202      	movne	r2, #2
 800bef8:	6122      	str	r2, [r4, #16]
 800befa:	b1a5      	cbz	r5, 800bf26 <__d2b+0x92>
 800befc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf00:	4405      	add	r5, r0
 800bf02:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf06:	603d      	str	r5, [r7, #0]
 800bf08:	6030      	str	r0, [r6, #0]
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	b003      	add	sp, #12
 800bf0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf12:	6161      	str	r1, [r4, #20]
 800bf14:	e7ea      	b.n	800beec <__d2b+0x58>
 800bf16:	a801      	add	r0, sp, #4
 800bf18:	f7ff fce1 	bl	800b8de <__lo0bits>
 800bf1c:	9b01      	ldr	r3, [sp, #4]
 800bf1e:	3020      	adds	r0, #32
 800bf20:	2201      	movs	r2, #1
 800bf22:	6163      	str	r3, [r4, #20]
 800bf24:	e7e8      	b.n	800bef8 <__d2b+0x64>
 800bf26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf2e:	6038      	str	r0, [r7, #0]
 800bf30:	6918      	ldr	r0, [r3, #16]
 800bf32:	f7ff fcb5 	bl	800b8a0 <__hi0bits>
 800bf36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf3a:	e7e5      	b.n	800bf08 <__d2b+0x74>
 800bf3c:	0800e001 	.word	0x0800e001
 800bf40:	0800e012 	.word	0x0800e012

0800bf44 <__ratio>:
 800bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	b085      	sub	sp, #20
 800bf4a:	e9cd 1000 	strd	r1, r0, [sp]
 800bf4e:	a902      	add	r1, sp, #8
 800bf50:	f7ff ff52 	bl	800bdf8 <__b2d>
 800bf54:	a903      	add	r1, sp, #12
 800bf56:	9800      	ldr	r0, [sp, #0]
 800bf58:	ec55 4b10 	vmov	r4, r5, d0
 800bf5c:	f7ff ff4c 	bl	800bdf8 <__b2d>
 800bf60:	9b01      	ldr	r3, [sp, #4]
 800bf62:	462f      	mov	r7, r5
 800bf64:	4620      	mov	r0, r4
 800bf66:	6919      	ldr	r1, [r3, #16]
 800bf68:	9b00      	ldr	r3, [sp, #0]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	1ac9      	subs	r1, r1, r3
 800bf6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bf72:	ec5b ab10 	vmov	sl, fp, d0
 800bf76:	1a9b      	subs	r3, r3, r2
 800bf78:	46d9      	mov	r9, fp
 800bf7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bfcd      	iteet	gt
 800bf82:	462a      	movgt	r2, r5
 800bf84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf88:	465a      	movle	r2, fp
 800bf8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf8e:	bfd8      	it	le
 800bf90:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bf94:	4652      	mov	r2, sl
 800bf96:	4639      	mov	r1, r7
 800bf98:	464b      	mov	r3, r9
 800bf9a:	f7f4 fc67 	bl	800086c <__aeabi_ddiv>
 800bf9e:	ec41 0b10 	vmov	d0, r0, r1
 800bfa2:	b005      	add	sp, #20
 800bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfa8 <__copybits>:
 800bfa8:	3901      	subs	r1, #1
 800bfaa:	f102 0314 	add.w	r3, r2, #20
 800bfae:	1149      	asrs	r1, r1, #5
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	3101      	adds	r1, #1
 800bfb4:	6914      	ldr	r4, [r2, #16]
 800bfb6:	1f05      	subs	r5, r0, #4
 800bfb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	d30c      	bcc.n	800bfde <__copybits+0x36>
 800bfc4:	1aa3      	subs	r3, r4, r2
 800bfc6:	3211      	adds	r2, #17
 800bfc8:	3b11      	subs	r3, #17
 800bfca:	f023 0303 	bic.w	r3, r3, #3
 800bfce:	42a2      	cmp	r2, r4
 800bfd0:	bf88      	it	hi
 800bfd2:	2300      	movhi	r3, #0
 800bfd4:	4418      	add	r0, r3
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4288      	cmp	r0, r1
 800bfda:	d305      	bcc.n	800bfe8 <__copybits+0x40>
 800bfdc:	bd70      	pop	{r4, r5, r6, pc}
 800bfde:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfe2:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfe6:	e7eb      	b.n	800bfc0 <__copybits+0x18>
 800bfe8:	f840 3b04 	str.w	r3, [r0], #4
 800bfec:	e7f4      	b.n	800bfd8 <__copybits+0x30>

0800bfee <__any_on>:
 800bfee:	f100 0214 	add.w	r2, r0, #20
 800bff2:	114b      	asrs	r3, r1, #5
 800bff4:	6900      	ldr	r0, [r0, #16]
 800bff6:	4298      	cmp	r0, r3
 800bff8:	b510      	push	{r4, lr}
 800bffa:	db11      	blt.n	800c020 <__any_on+0x32>
 800bffc:	dd0a      	ble.n	800c014 <__any_on+0x26>
 800bffe:	f011 011f 	ands.w	r1, r1, #31
 800c002:	d007      	beq.n	800c014 <__any_on+0x26>
 800c004:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c008:	fa24 f001 	lsr.w	r0, r4, r1
 800c00c:	fa00 f101 	lsl.w	r1, r0, r1
 800c010:	428c      	cmp	r4, r1
 800c012:	d10b      	bne.n	800c02c <__any_on+0x3e>
 800c014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c018:	4293      	cmp	r3, r2
 800c01a:	d803      	bhi.n	800c024 <__any_on+0x36>
 800c01c:	2000      	movs	r0, #0
 800c01e:	bd10      	pop	{r4, pc}
 800c020:	4603      	mov	r3, r0
 800c022:	e7f7      	b.n	800c014 <__any_on+0x26>
 800c024:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c028:	2900      	cmp	r1, #0
 800c02a:	d0f5      	beq.n	800c018 <__any_on+0x2a>
 800c02c:	2001      	movs	r0, #1
 800c02e:	e7f6      	b.n	800c01e <__any_on+0x30>

0800c030 <sulp>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	4604      	mov	r4, r0
 800c034:	460d      	mov	r5, r1
 800c036:	4616      	mov	r6, r2
 800c038:	ec45 4b10 	vmov	d0, r4, r5
 800c03c:	f7ff feb6 	bl	800bdac <__ulp>
 800c040:	ec51 0b10 	vmov	r0, r1, d0
 800c044:	b17e      	cbz	r6, 800c066 <sulp+0x36>
 800c046:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c04a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c04e:	2b00      	cmp	r3, #0
 800c050:	dd09      	ble.n	800c066 <sulp+0x36>
 800c052:	051b      	lsls	r3, r3, #20
 800c054:	2400      	movs	r4, #0
 800c056:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c05a:	4622      	mov	r2, r4
 800c05c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c060:	462b      	mov	r3, r5
 800c062:	f7f4 fad9 	bl	8000618 <__aeabi_dmul>
 800c066:	ec41 0b10 	vmov	d0, r0, r1
 800c06a:	bd70      	pop	{r4, r5, r6, pc}
 800c06c:	0000      	movs	r0, r0
	...

0800c070 <_strtod_l>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	b09f      	sub	sp, #124	@ 0x7c
 800c076:	460c      	mov	r4, r1
 800c078:	f04f 0a00 	mov.w	sl, #0
 800c07c:	f04f 0b00 	mov.w	fp, #0
 800c080:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c082:	2200      	movs	r2, #0
 800c084:	9005      	str	r0, [sp, #20]
 800c086:	921a      	str	r2, [sp, #104]	@ 0x68
 800c088:	460a      	mov	r2, r1
 800c08a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c08c:	7811      	ldrb	r1, [r2, #0]
 800c08e:	292b      	cmp	r1, #43	@ 0x2b
 800c090:	d04a      	beq.n	800c128 <_strtod_l+0xb8>
 800c092:	d838      	bhi.n	800c106 <_strtod_l+0x96>
 800c094:	290d      	cmp	r1, #13
 800c096:	d832      	bhi.n	800c0fe <_strtod_l+0x8e>
 800c098:	2908      	cmp	r1, #8
 800c09a:	d832      	bhi.n	800c102 <_strtod_l+0x92>
 800c09c:	2900      	cmp	r1, #0
 800c09e:	d03b      	beq.n	800c118 <_strtod_l+0xa8>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c0a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c0a6:	782a      	ldrb	r2, [r5, #0]
 800c0a8:	2a30      	cmp	r2, #48	@ 0x30
 800c0aa:	f040 80b3 	bne.w	800c214 <_strtod_l+0x1a4>
 800c0ae:	786a      	ldrb	r2, [r5, #1]
 800c0b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c0b4:	2a58      	cmp	r2, #88	@ 0x58
 800c0b6:	d16e      	bne.n	800c196 <_strtod_l+0x126>
 800c0b8:	9302      	str	r3, [sp, #8]
 800c0ba:	a919      	add	r1, sp, #100	@ 0x64
 800c0bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0be:	4a90      	ldr	r2, [pc, #576]	@ (800c300 <_strtod_l+0x290>)
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	ab1a      	add	r3, sp, #104	@ 0x68
 800c0c4:	9805      	ldr	r0, [sp, #20]
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c0ca:	f001 f925 	bl	800d318 <__gethex>
 800c0ce:	f010 060f 	ands.w	r6, r0, #15
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	d005      	beq.n	800c0e2 <_strtod_l+0x72>
 800c0d6:	2e06      	cmp	r6, #6
 800c0d8:	d128      	bne.n	800c12c <_strtod_l+0xbc>
 800c0da:	3501      	adds	r5, #1
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9519      	str	r5, [sp, #100]	@ 0x64
 800c0e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f040 858e 	bne.w	800cc06 <_strtod_l+0xb96>
 800c0ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0ec:	b1cb      	cbz	r3, 800c122 <_strtod_l+0xb2>
 800c0ee:	4652      	mov	r2, sl
 800c0f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c0f4:	ec43 2b10 	vmov	d0, r2, r3
 800c0f8:	b01f      	add	sp, #124	@ 0x7c
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	2920      	cmp	r1, #32
 800c100:	d1ce      	bne.n	800c0a0 <_strtod_l+0x30>
 800c102:	3201      	adds	r2, #1
 800c104:	e7c1      	b.n	800c08a <_strtod_l+0x1a>
 800c106:	292d      	cmp	r1, #45	@ 0x2d
 800c108:	d1ca      	bne.n	800c0a0 <_strtod_l+0x30>
 800c10a:	2101      	movs	r1, #1
 800c10c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c10e:	1c51      	adds	r1, r2, #1
 800c110:	9119      	str	r1, [sp, #100]	@ 0x64
 800c112:	7852      	ldrb	r2, [r2, #1]
 800c114:	2a00      	cmp	r2, #0
 800c116:	d1c5      	bne.n	800c0a4 <_strtod_l+0x34>
 800c118:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c11a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f040 8570 	bne.w	800cc02 <_strtod_l+0xb92>
 800c122:	4652      	mov	r2, sl
 800c124:	465b      	mov	r3, fp
 800c126:	e7e5      	b.n	800c0f4 <_strtod_l+0x84>
 800c128:	2100      	movs	r1, #0
 800c12a:	e7ef      	b.n	800c10c <_strtod_l+0x9c>
 800c12c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c12e:	b13a      	cbz	r2, 800c140 <_strtod_l+0xd0>
 800c130:	2135      	movs	r1, #53	@ 0x35
 800c132:	a81c      	add	r0, sp, #112	@ 0x70
 800c134:	f7ff ff38 	bl	800bfa8 <__copybits>
 800c138:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c13a:	9805      	ldr	r0, [sp, #20]
 800c13c:	f7ff fafc 	bl	800b738 <_Bfree>
 800c140:	3e01      	subs	r6, #1
 800c142:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c144:	2e04      	cmp	r6, #4
 800c146:	d806      	bhi.n	800c156 <_strtod_l+0xe6>
 800c148:	e8df f006 	tbb	[pc, r6]
 800c14c:	201d0314 	.word	0x201d0314
 800c150:	14          	.byte	0x14
 800c151:	00          	.byte	0x00
 800c152:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c156:	05e1      	lsls	r1, r4, #23
 800c158:	bf48      	it	mi
 800c15a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c15e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c162:	0d1b      	lsrs	r3, r3, #20
 800c164:	051b      	lsls	r3, r3, #20
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1bb      	bne.n	800c0e2 <_strtod_l+0x72>
 800c16a:	f7fe fb0f 	bl	800a78c <__errno>
 800c16e:	2322      	movs	r3, #34	@ 0x22
 800c170:	6003      	str	r3, [r0, #0]
 800c172:	e7b6      	b.n	800c0e2 <_strtod_l+0x72>
 800c174:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c178:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c17c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c180:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c184:	e7e7      	b.n	800c156 <_strtod_l+0xe6>
 800c186:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c308 <_strtod_l+0x298>
 800c18a:	e7e4      	b.n	800c156 <_strtod_l+0xe6>
 800c18c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c190:	f04f 3aff 	mov.w	sl, #4294967295
 800c194:	e7df      	b.n	800c156 <_strtod_l+0xe6>
 800c196:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b30      	cmp	r3, #48	@ 0x30
 800c1a0:	d0f9      	beq.n	800c196 <_strtod_l+0x126>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d09d      	beq.n	800c0e2 <_strtod_l+0x72>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1aa:	220a      	movs	r2, #10
 800c1ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	461f      	mov	r7, r3
 800c1b4:	9308      	str	r3, [sp, #32]
 800c1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c1ba:	7805      	ldrb	r5, [r0, #0]
 800c1bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c1c0:	b2d9      	uxtb	r1, r3
 800c1c2:	2909      	cmp	r1, #9
 800c1c4:	d928      	bls.n	800c218 <_strtod_l+0x1a8>
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	494e      	ldr	r1, [pc, #312]	@ (800c304 <_strtod_l+0x294>)
 800c1ca:	f000 ffd5 	bl	800d178 <strncmp>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d033      	beq.n	800c23a <_strtod_l+0x1ca>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	462a      	mov	r2, r5
 800c1d6:	463d      	mov	r5, r7
 800c1d8:	4681      	mov	r9, r0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2a65      	cmp	r2, #101	@ 0x65
 800c1de:	d001      	beq.n	800c1e4 <_strtod_l+0x174>
 800c1e0:	2a45      	cmp	r2, #69	@ 0x45
 800c1e2:	d114      	bne.n	800c20e <_strtod_l+0x19e>
 800c1e4:	b91d      	cbnz	r5, 800c1ee <_strtod_l+0x17e>
 800c1e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1e8:	4302      	orrs	r2, r0
 800c1ea:	d095      	beq.n	800c118 <_strtod_l+0xa8>
 800c1ec:	2500      	movs	r5, #0
 800c1ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c1f0:	1c62      	adds	r2, r4, #1
 800c1f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1f4:	7862      	ldrb	r2, [r4, #1]
 800c1f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c1f8:	d078      	beq.n	800c2ec <_strtod_l+0x27c>
 800c1fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800c1fc:	d07c      	beq.n	800c2f8 <_strtod_l+0x288>
 800c1fe:	f04f 0c00 	mov.w	ip, #0
 800c202:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c206:	2909      	cmp	r1, #9
 800c208:	f240 8084 	bls.w	800c314 <_strtod_l+0x2a4>
 800c20c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c20e:	f04f 0800 	mov.w	r8, #0
 800c212:	e0a4      	b.n	800c35e <_strtod_l+0x2ee>
 800c214:	2300      	movs	r3, #0
 800c216:	e7c7      	b.n	800c1a8 <_strtod_l+0x138>
 800c218:	2f08      	cmp	r7, #8
 800c21a:	f100 0001 	add.w	r0, r0, #1
 800c21e:	f107 0701 	add.w	r7, r7, #1
 800c222:	bfd5      	itete	le
 800c224:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c226:	9908      	ldrgt	r1, [sp, #32]
 800c228:	fb02 3301 	mlale	r3, r2, r1, r3
 800c22c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c230:	bfd4      	ite	le
 800c232:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c234:	9308      	strgt	r3, [sp, #32]
 800c236:	9019      	str	r0, [sp, #100]	@ 0x64
 800c238:	e7be      	b.n	800c1b8 <_strtod_l+0x148>
 800c23a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c23c:	1c5a      	adds	r2, r3, #1
 800c23e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c240:	785a      	ldrb	r2, [r3, #1]
 800c242:	b37f      	cbz	r7, 800c2a4 <_strtod_l+0x234>
 800c244:	4681      	mov	r9, r0
 800c246:	463d      	mov	r5, r7
 800c248:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c24c:	2b09      	cmp	r3, #9
 800c24e:	d912      	bls.n	800c276 <_strtod_l+0x206>
 800c250:	2301      	movs	r3, #1
 800c252:	e7c3      	b.n	800c1dc <_strtod_l+0x16c>
 800c254:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c256:	3001      	adds	r0, #1
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c25c:	785a      	ldrb	r2, [r3, #1]
 800c25e:	2a30      	cmp	r2, #48	@ 0x30
 800c260:	d0f8      	beq.n	800c254 <_strtod_l+0x1e4>
 800c262:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c266:	2b08      	cmp	r3, #8
 800c268:	f200 84d2 	bhi.w	800cc10 <_strtod_l+0xba0>
 800c26c:	4681      	mov	r9, r0
 800c26e:	2000      	movs	r0, #0
 800c270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c272:	4605      	mov	r5, r0
 800c274:	930c      	str	r3, [sp, #48]	@ 0x30
 800c276:	3a30      	subs	r2, #48	@ 0x30
 800c278:	f100 0301 	add.w	r3, r0, #1
 800c27c:	d02a      	beq.n	800c2d4 <_strtod_l+0x264>
 800c27e:	4499      	add	r9, r3
 800c280:	eb00 0c05 	add.w	ip, r0, r5
 800c284:	462b      	mov	r3, r5
 800c286:	210a      	movs	r1, #10
 800c288:	4563      	cmp	r3, ip
 800c28a:	d10d      	bne.n	800c2a8 <_strtod_l+0x238>
 800c28c:	1c69      	adds	r1, r5, #1
 800c28e:	4401      	add	r1, r0
 800c290:	4428      	add	r0, r5
 800c292:	2808      	cmp	r0, #8
 800c294:	dc16      	bgt.n	800c2c4 <_strtod_l+0x254>
 800c296:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c298:	230a      	movs	r3, #10
 800c29a:	fb03 2300 	mla	r3, r3, r0, r2
 800c29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e018      	b.n	800c2d6 <_strtod_l+0x266>
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	e7da      	b.n	800c25e <_strtod_l+0x1ee>
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	f103 0301 	add.w	r3, r3, #1
 800c2ae:	dc03      	bgt.n	800c2b8 <_strtod_l+0x248>
 800c2b0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c2b2:	434e      	muls	r6, r1
 800c2b4:	960a      	str	r6, [sp, #40]	@ 0x28
 800c2b6:	e7e7      	b.n	800c288 <_strtod_l+0x218>
 800c2b8:	2b10      	cmp	r3, #16
 800c2ba:	bfde      	ittt	le
 800c2bc:	9e08      	ldrle	r6, [sp, #32]
 800c2be:	434e      	mulle	r6, r1
 800c2c0:	9608      	strle	r6, [sp, #32]
 800c2c2:	e7e1      	b.n	800c288 <_strtod_l+0x218>
 800c2c4:	280f      	cmp	r0, #15
 800c2c6:	dceb      	bgt.n	800c2a0 <_strtod_l+0x230>
 800c2c8:	9808      	ldr	r0, [sp, #32]
 800c2ca:	230a      	movs	r3, #10
 800c2cc:	fb03 2300 	mla	r3, r3, r0, r2
 800c2d0:	9308      	str	r3, [sp, #32]
 800c2d2:	e7e5      	b.n	800c2a0 <_strtod_l+0x230>
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c2d8:	460d      	mov	r5, r1
 800c2da:	1c50      	adds	r0, r2, #1
 800c2dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2de:	4618      	mov	r0, r3
 800c2e0:	7852      	ldrb	r2, [r2, #1]
 800c2e2:	e7b1      	b.n	800c248 <_strtod_l+0x1d8>
 800c2e4:	f04f 0900 	mov.w	r9, #0
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e77c      	b.n	800c1e6 <_strtod_l+0x176>
 800c2ec:	f04f 0c00 	mov.w	ip, #0
 800c2f0:	1ca2      	adds	r2, r4, #2
 800c2f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2f4:	78a2      	ldrb	r2, [r4, #2]
 800c2f6:	e784      	b.n	800c202 <_strtod_l+0x192>
 800c2f8:	f04f 0c01 	mov.w	ip, #1
 800c2fc:	e7f8      	b.n	800c2f0 <_strtod_l+0x280>
 800c2fe:	bf00      	nop
 800c300:	0800e180 	.word	0x0800e180
 800c304:	0800e168 	.word	0x0800e168
 800c308:	7ff00000 	.word	0x7ff00000
 800c30c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c30e:	1c51      	adds	r1, r2, #1
 800c310:	9119      	str	r1, [sp, #100]	@ 0x64
 800c312:	7852      	ldrb	r2, [r2, #1]
 800c314:	2a30      	cmp	r2, #48	@ 0x30
 800c316:	d0f9      	beq.n	800c30c <_strtod_l+0x29c>
 800c318:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c31c:	2908      	cmp	r1, #8
 800c31e:	f63f af76 	bhi.w	800c20e <_strtod_l+0x19e>
 800c322:	3a30      	subs	r2, #48	@ 0x30
 800c324:	f04f 080a 	mov.w	r8, #10
 800c328:	920e      	str	r2, [sp, #56]	@ 0x38
 800c32a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c32c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c32e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c330:	1c56      	adds	r6, r2, #1
 800c332:	9619      	str	r6, [sp, #100]	@ 0x64
 800c334:	7852      	ldrb	r2, [r2, #1]
 800c336:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c33a:	f1be 0f09 	cmp.w	lr, #9
 800c33e:	d939      	bls.n	800c3b4 <_strtod_l+0x344>
 800c340:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c342:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c346:	1a76      	subs	r6, r6, r1
 800c348:	2e08      	cmp	r6, #8
 800c34a:	dc03      	bgt.n	800c354 <_strtod_l+0x2e4>
 800c34c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c34e:	4588      	cmp	r8, r1
 800c350:	bfa8      	it	ge
 800c352:	4688      	movge	r8, r1
 800c354:	f1bc 0f00 	cmp.w	ip, #0
 800c358:	d001      	beq.n	800c35e <_strtod_l+0x2ee>
 800c35a:	f1c8 0800 	rsb	r8, r8, #0
 800c35e:	2d00      	cmp	r5, #0
 800c360:	d14e      	bne.n	800c400 <_strtod_l+0x390>
 800c362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c364:	4308      	orrs	r0, r1
 800c366:	f47f aebc 	bne.w	800c0e2 <_strtod_l+0x72>
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f47f aed4 	bne.w	800c118 <_strtod_l+0xa8>
 800c370:	2a69      	cmp	r2, #105	@ 0x69
 800c372:	d028      	beq.n	800c3c6 <_strtod_l+0x356>
 800c374:	dc25      	bgt.n	800c3c2 <_strtod_l+0x352>
 800c376:	2a49      	cmp	r2, #73	@ 0x49
 800c378:	d025      	beq.n	800c3c6 <_strtod_l+0x356>
 800c37a:	2a4e      	cmp	r2, #78	@ 0x4e
 800c37c:	f47f aecc 	bne.w	800c118 <_strtod_l+0xa8>
 800c380:	499b      	ldr	r1, [pc, #620]	@ (800c5f0 <_strtod_l+0x580>)
 800c382:	a819      	add	r0, sp, #100	@ 0x64
 800c384:	f001 f9e8 	bl	800d758 <__match>
 800c388:	2800      	cmp	r0, #0
 800c38a:	f43f aec5 	beq.w	800c118 <_strtod_l+0xa8>
 800c38e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	2b28      	cmp	r3, #40	@ 0x28
 800c394:	d12e      	bne.n	800c3f4 <_strtod_l+0x384>
 800c396:	aa1c      	add	r2, sp, #112	@ 0x70
 800c398:	4996      	ldr	r1, [pc, #600]	@ (800c5f4 <_strtod_l+0x584>)
 800c39a:	a819      	add	r0, sp, #100	@ 0x64
 800c39c:	f001 f9f0 	bl	800d780 <__hexnan>
 800c3a0:	2805      	cmp	r0, #5
 800c3a2:	d127      	bne.n	800c3f4 <_strtod_l+0x384>
 800c3a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c3a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c3aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c3ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c3b2:	e696      	b.n	800c0e2 <_strtod_l+0x72>
 800c3b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3b6:	fb08 2101 	mla	r1, r8, r1, r2
 800c3ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c3be:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3c0:	e7b5      	b.n	800c32e <_strtod_l+0x2be>
 800c3c2:	2a6e      	cmp	r2, #110	@ 0x6e
 800c3c4:	e7da      	b.n	800c37c <_strtod_l+0x30c>
 800c3c6:	498c      	ldr	r1, [pc, #560]	@ (800c5f8 <_strtod_l+0x588>)
 800c3c8:	a819      	add	r0, sp, #100	@ 0x64
 800c3ca:	f001 f9c5 	bl	800d758 <__match>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f43f aea2 	beq.w	800c118 <_strtod_l+0xa8>
 800c3d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3d6:	a819      	add	r0, sp, #100	@ 0x64
 800c3d8:	4988      	ldr	r1, [pc, #544]	@ (800c5fc <_strtod_l+0x58c>)
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800c3de:	f001 f9bb 	bl	800d758 <__match>
 800c3e2:	b910      	cbnz	r0, 800c3ea <_strtod_l+0x37a>
 800c3e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c3ea:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c60c <_strtod_l+0x59c>
 800c3ee:	f04f 0a00 	mov.w	sl, #0
 800c3f2:	e676      	b.n	800c0e2 <_strtod_l+0x72>
 800c3f4:	4882      	ldr	r0, [pc, #520]	@ (800c600 <_strtod_l+0x590>)
 800c3f6:	f000 feef 	bl	800d1d8 <nan>
 800c3fa:	ec5b ab10 	vmov	sl, fp, d0
 800c3fe:	e670      	b.n	800c0e2 <_strtod_l+0x72>
 800c400:	eba8 0309 	sub.w	r3, r8, r9
 800c404:	2f00      	cmp	r7, #0
 800c406:	bf08      	it	eq
 800c408:	462f      	moveq	r7, r5
 800c40a:	2d10      	cmp	r5, #16
 800c40c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c40e:	462c      	mov	r4, r5
 800c410:	9309      	str	r3, [sp, #36]	@ 0x24
 800c412:	bfa8      	it	ge
 800c414:	2410      	movge	r4, #16
 800c416:	f7f4 f885 	bl	8000524 <__aeabi_ui2d>
 800c41a:	2d09      	cmp	r5, #9
 800c41c:	4682      	mov	sl, r0
 800c41e:	468b      	mov	fp, r1
 800c420:	dc13      	bgt.n	800c44a <_strtod_l+0x3da>
 800c422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c424:	2b00      	cmp	r3, #0
 800c426:	f43f ae5c 	beq.w	800c0e2 <_strtod_l+0x72>
 800c42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42c:	dd78      	ble.n	800c520 <_strtod_l+0x4b0>
 800c42e:	2b16      	cmp	r3, #22
 800c430:	dc5f      	bgt.n	800c4f2 <_strtod_l+0x482>
 800c432:	4974      	ldr	r1, [pc, #464]	@ (800c604 <_strtod_l+0x594>)
 800c434:	4652      	mov	r2, sl
 800c436:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c43a:	465b      	mov	r3, fp
 800c43c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c440:	f7f4 f8ea 	bl	8000618 <__aeabi_dmul>
 800c444:	4682      	mov	sl, r0
 800c446:	468b      	mov	fp, r1
 800c448:	e64b      	b.n	800c0e2 <_strtod_l+0x72>
 800c44a:	4b6e      	ldr	r3, [pc, #440]	@ (800c604 <_strtod_l+0x594>)
 800c44c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c450:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c454:	f7f4 f8e0 	bl	8000618 <__aeabi_dmul>
 800c458:	4682      	mov	sl, r0
 800c45a:	468b      	mov	fp, r1
 800c45c:	9808      	ldr	r0, [sp, #32]
 800c45e:	f7f4 f861 	bl	8000524 <__aeabi_ui2d>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4650      	mov	r0, sl
 800c468:	4659      	mov	r1, fp
 800c46a:	f7f3 ff1f 	bl	80002ac <__adddf3>
 800c46e:	2d0f      	cmp	r5, #15
 800c470:	4682      	mov	sl, r0
 800c472:	468b      	mov	fp, r1
 800c474:	ddd5      	ble.n	800c422 <_strtod_l+0x3b2>
 800c476:	1b2c      	subs	r4, r5, r4
 800c478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c47a:	441c      	add	r4, r3
 800c47c:	2c00      	cmp	r4, #0
 800c47e:	f340 8096 	ble.w	800c5ae <_strtod_l+0x53e>
 800c482:	f014 030f 	ands.w	r3, r4, #15
 800c486:	d00a      	beq.n	800c49e <_strtod_l+0x42e>
 800c488:	495e      	ldr	r1, [pc, #376]	@ (800c604 <_strtod_l+0x594>)
 800c48a:	4652      	mov	r2, sl
 800c48c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c490:	465b      	mov	r3, fp
 800c492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c496:	f7f4 f8bf 	bl	8000618 <__aeabi_dmul>
 800c49a:	4682      	mov	sl, r0
 800c49c:	468b      	mov	fp, r1
 800c49e:	f034 040f 	bics.w	r4, r4, #15
 800c4a2:	d073      	beq.n	800c58c <_strtod_l+0x51c>
 800c4a4:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c4a8:	dd48      	ble.n	800c53c <_strtod_l+0x4cc>
 800c4aa:	2400      	movs	r4, #0
 800c4ac:	46a0      	mov	r8, r4
 800c4ae:	46a1      	mov	r9, r4
 800c4b0:	940a      	str	r4, [sp, #40]	@ 0x28
 800c4b2:	2322      	movs	r3, #34	@ 0x22
 800c4b4:	9a05      	ldr	r2, [sp, #20]
 800c4b6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c60c <_strtod_l+0x59c>
 800c4ba:	f04f 0a00 	mov.w	sl, #0
 800c4be:	6013      	str	r3, [r2, #0]
 800c4c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f43f ae0d 	beq.w	800c0e2 <_strtod_l+0x72>
 800c4c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4ca:	9805      	ldr	r0, [sp, #20]
 800c4cc:	f7ff f934 	bl	800b738 <_Bfree>
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	9805      	ldr	r0, [sp, #20]
 800c4d4:	f7ff f930 	bl	800b738 <_Bfree>
 800c4d8:	4641      	mov	r1, r8
 800c4da:	9805      	ldr	r0, [sp, #20]
 800c4dc:	f7ff f92c 	bl	800b738 <_Bfree>
 800c4e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4e2:	9805      	ldr	r0, [sp, #20]
 800c4e4:	f7ff f928 	bl	800b738 <_Bfree>
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	9805      	ldr	r0, [sp, #20]
 800c4ec:	f7ff f924 	bl	800b738 <_Bfree>
 800c4f0:	e5f7      	b.n	800c0e2 <_strtod_l+0x72>
 800c4f2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	dbbc      	blt.n	800c476 <_strtod_l+0x406>
 800c4fc:	f1c5 050f 	rsb	r5, r5, #15
 800c500:	4c40      	ldr	r4, [pc, #256]	@ (800c604 <_strtod_l+0x594>)
 800c502:	4652      	mov	r2, sl
 800c504:	465b      	mov	r3, fp
 800c506:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c50a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c50e:	f7f4 f883 	bl	8000618 <__aeabi_dmul>
 800c512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c514:	1b5d      	subs	r5, r3, r5
 800c516:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c51a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c51e:	e78f      	b.n	800c440 <_strtod_l+0x3d0>
 800c520:	3316      	adds	r3, #22
 800c522:	dba8      	blt.n	800c476 <_strtod_l+0x406>
 800c524:	eba9 0808 	sub.w	r8, r9, r8
 800c528:	4b36      	ldr	r3, [pc, #216]	@ (800c604 <_strtod_l+0x594>)
 800c52a:	4650      	mov	r0, sl
 800c52c:	4659      	mov	r1, fp
 800c52e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c532:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c536:	f7f4 f999 	bl	800086c <__aeabi_ddiv>
 800c53a:	e783      	b.n	800c444 <_strtod_l+0x3d4>
 800c53c:	4b32      	ldr	r3, [pc, #200]	@ (800c608 <_strtod_l+0x598>)
 800c53e:	1124      	asrs	r4, r4, #4
 800c540:	4650      	mov	r0, sl
 800c542:	4659      	mov	r1, fp
 800c544:	9308      	str	r3, [sp, #32]
 800c546:	2300      	movs	r3, #0
 800c548:	461e      	mov	r6, r3
 800c54a:	2c01      	cmp	r4, #1
 800c54c:	dc21      	bgt.n	800c592 <_strtod_l+0x522>
 800c54e:	b10b      	cbz	r3, 800c554 <_strtod_l+0x4e4>
 800c550:	4682      	mov	sl, r0
 800c552:	468b      	mov	fp, r1
 800c554:	492c      	ldr	r1, [pc, #176]	@ (800c608 <_strtod_l+0x598>)
 800c556:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c55a:	4652      	mov	r2, sl
 800c55c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c560:	465b      	mov	r3, fp
 800c562:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c566:	f7f4 f857 	bl	8000618 <__aeabi_dmul>
 800c56a:	4b28      	ldr	r3, [pc, #160]	@ (800c60c <_strtod_l+0x59c>)
 800c56c:	460a      	mov	r2, r1
 800c56e:	4682      	mov	sl, r0
 800c570:	400b      	ands	r3, r1
 800c572:	4927      	ldr	r1, [pc, #156]	@ (800c610 <_strtod_l+0x5a0>)
 800c574:	428b      	cmp	r3, r1
 800c576:	d898      	bhi.n	800c4aa <_strtod_l+0x43a>
 800c578:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c57c:	428b      	cmp	r3, r1
 800c57e:	bf86      	itte	hi
 800c580:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c614 <_strtod_l+0x5a4>
 800c584:	f04f 3aff 	movhi.w	sl, #4294967295
 800c588:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c58c:	2300      	movs	r3, #0
 800c58e:	9308      	str	r3, [sp, #32]
 800c590:	e07a      	b.n	800c688 <_strtod_l+0x618>
 800c592:	07e2      	lsls	r2, r4, #31
 800c594:	d505      	bpl.n	800c5a2 <_strtod_l+0x532>
 800c596:	9b08      	ldr	r3, [sp, #32]
 800c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59c:	f7f4 f83c 	bl	8000618 <__aeabi_dmul>
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	9a08      	ldr	r2, [sp, #32]
 800c5a4:	3601      	adds	r6, #1
 800c5a6:	1064      	asrs	r4, r4, #1
 800c5a8:	3208      	adds	r2, #8
 800c5aa:	9208      	str	r2, [sp, #32]
 800c5ac:	e7cd      	b.n	800c54a <_strtod_l+0x4da>
 800c5ae:	d0ed      	beq.n	800c58c <_strtod_l+0x51c>
 800c5b0:	4264      	negs	r4, r4
 800c5b2:	f014 020f 	ands.w	r2, r4, #15
 800c5b6:	d00a      	beq.n	800c5ce <_strtod_l+0x55e>
 800c5b8:	4b12      	ldr	r3, [pc, #72]	@ (800c604 <_strtod_l+0x594>)
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	4659      	mov	r1, fp
 800c5be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f4 f951 	bl	800086c <__aeabi_ddiv>
 800c5ca:	4682      	mov	sl, r0
 800c5cc:	468b      	mov	fp, r1
 800c5ce:	1124      	asrs	r4, r4, #4
 800c5d0:	d0dc      	beq.n	800c58c <_strtod_l+0x51c>
 800c5d2:	2c1f      	cmp	r4, #31
 800c5d4:	dd20      	ble.n	800c618 <_strtod_l+0x5a8>
 800c5d6:	2400      	movs	r4, #0
 800c5d8:	46a0      	mov	r8, r4
 800c5da:	46a1      	mov	r9, r4
 800c5dc:	940a      	str	r4, [sp, #40]	@ 0x28
 800c5de:	2322      	movs	r3, #34	@ 0x22
 800c5e0:	9a05      	ldr	r2, [sp, #20]
 800c5e2:	f04f 0a00 	mov.w	sl, #0
 800c5e6:	f04f 0b00 	mov.w	fp, #0
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	e768      	b.n	800c4c0 <_strtod_l+0x450>
 800c5ee:	bf00      	nop
 800c5f0:	0800df59 	.word	0x0800df59
 800c5f4:	0800e16c 	.word	0x0800e16c
 800c5f8:	0800df51 	.word	0x0800df51
 800c5fc:	0800df88 	.word	0x0800df88
 800c600:	0800e315 	.word	0x0800e315
 800c604:	0800e0a0 	.word	0x0800e0a0
 800c608:	0800e078 	.word	0x0800e078
 800c60c:	7ff00000 	.word	0x7ff00000
 800c610:	7ca00000 	.word	0x7ca00000
 800c614:	7fefffff 	.word	0x7fefffff
 800c618:	f014 0310 	ands.w	r3, r4, #16
 800c61c:	4650      	mov	r0, sl
 800c61e:	4659      	mov	r1, fp
 800c620:	4ea9      	ldr	r6, [pc, #676]	@ (800c8c8 <_strtod_l+0x858>)
 800c622:	bf18      	it	ne
 800c624:	236a      	movne	r3, #106	@ 0x6a
 800c626:	9308      	str	r3, [sp, #32]
 800c628:	2300      	movs	r3, #0
 800c62a:	07e2      	lsls	r2, r4, #31
 800c62c:	d504      	bpl.n	800c638 <_strtod_l+0x5c8>
 800c62e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c632:	f7f3 fff1 	bl	8000618 <__aeabi_dmul>
 800c636:	2301      	movs	r3, #1
 800c638:	1064      	asrs	r4, r4, #1
 800c63a:	f106 0608 	add.w	r6, r6, #8
 800c63e:	d1f4      	bne.n	800c62a <_strtod_l+0x5ba>
 800c640:	b10b      	cbz	r3, 800c646 <_strtod_l+0x5d6>
 800c642:	4682      	mov	sl, r0
 800c644:	468b      	mov	fp, r1
 800c646:	9b08      	ldr	r3, [sp, #32]
 800c648:	b1b3      	cbz	r3, 800c678 <_strtod_l+0x608>
 800c64a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c64e:	4659      	mov	r1, fp
 800c650:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c654:	2b00      	cmp	r3, #0
 800c656:	dd0f      	ble.n	800c678 <_strtod_l+0x608>
 800c658:	2b1f      	cmp	r3, #31
 800c65a:	dd55      	ble.n	800c708 <_strtod_l+0x698>
 800c65c:	2b34      	cmp	r3, #52	@ 0x34
 800c65e:	f04f 0a00 	mov.w	sl, #0
 800c662:	bfdb      	ittet	le
 800c664:	f04f 33ff 	movle.w	r3, #4294967295
 800c668:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c66c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c670:	4093      	lslle	r3, r2
 800c672:	bfd8      	it	le
 800c674:	ea03 0b01 	andle.w	fp, r3, r1
 800c678:	2200      	movs	r2, #0
 800c67a:	2300      	movs	r3, #0
 800c67c:	4650      	mov	r0, sl
 800c67e:	4659      	mov	r1, fp
 800c680:	f7f4 fa32 	bl	8000ae8 <__aeabi_dcmpeq>
 800c684:	2800      	cmp	r0, #0
 800c686:	d1a6      	bne.n	800c5d6 <_strtod_l+0x566>
 800c688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68a:	463a      	mov	r2, r7
 800c68c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	462b      	mov	r3, r5
 800c692:	9805      	ldr	r0, [sp, #20]
 800c694:	f7ff f8ba 	bl	800b80c <__s2b>
 800c698:	900a      	str	r0, [sp, #40]	@ 0x28
 800c69a:	2800      	cmp	r0, #0
 800c69c:	f43f af05 	beq.w	800c4aa <_strtod_l+0x43a>
 800c6a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a2:	eba9 0308 	sub.w	r3, r9, r8
 800c6a6:	2400      	movs	r4, #0
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	46a0      	mov	r8, r4
 800c6ac:	bfa8      	it	ge
 800c6ae:	2300      	movge	r3, #0
 800c6b0:	9312      	str	r3, [sp, #72]	@ 0x48
 800c6b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c6b6:	9316      	str	r3, [sp, #88]	@ 0x58
 800c6b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ba:	9805      	ldr	r0, [sp, #20]
 800c6bc:	6859      	ldr	r1, [r3, #4]
 800c6be:	f7fe fffb 	bl	800b6b8 <_Balloc>
 800c6c2:	4681      	mov	r9, r0
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	f43f aef4 	beq.w	800c4b2 <_strtod_l+0x442>
 800c6ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6cc:	300c      	adds	r0, #12
 800c6ce:	691a      	ldr	r2, [r3, #16]
 800c6d0:	f103 010c 	add.w	r1, r3, #12
 800c6d4:	3202      	adds	r2, #2
 800c6d6:	0092      	lsls	r2, r2, #2
 800c6d8:	f000 fd70 	bl	800d1bc <memcpy>
 800c6dc:	aa1c      	add	r2, sp, #112	@ 0x70
 800c6de:	a91b      	add	r1, sp, #108	@ 0x6c
 800c6e0:	9805      	ldr	r0, [sp, #20]
 800c6e2:	ec4b ab10 	vmov	d0, sl, fp
 800c6e6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c6ea:	f7ff fbd3 	bl	800be94 <__d2b>
 800c6ee:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f43f aede 	beq.w	800c4b2 <_strtod_l+0x442>
 800c6f6:	2101      	movs	r1, #1
 800c6f8:	9805      	ldr	r0, [sp, #20]
 800c6fa:	f7ff f91d 	bl	800b938 <__i2b>
 800c6fe:	4680      	mov	r8, r0
 800c700:	b948      	cbnz	r0, 800c716 <_strtod_l+0x6a6>
 800c702:	f04f 0800 	mov.w	r8, #0
 800c706:	e6d4      	b.n	800c4b2 <_strtod_l+0x442>
 800c708:	f04f 32ff 	mov.w	r2, #4294967295
 800c70c:	fa02 f303 	lsl.w	r3, r2, r3
 800c710:	ea03 0a0a 	and.w	sl, r3, sl
 800c714:	e7b0      	b.n	800c678 <_strtod_l+0x608>
 800c716:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c718:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c71a:	2d00      	cmp	r5, #0
 800c71c:	bfa9      	itett	ge
 800c71e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c720:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c722:	18ef      	addge	r7, r5, r3
 800c724:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c726:	bfb8      	it	lt
 800c728:	1b5e      	sublt	r6, r3, r5
 800c72a:	9b08      	ldr	r3, [sp, #32]
 800c72c:	bfb8      	it	lt
 800c72e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c730:	1aed      	subs	r5, r5, r3
 800c732:	4b66      	ldr	r3, [pc, #408]	@ (800c8cc <_strtod_l+0x85c>)
 800c734:	4415      	add	r5, r2
 800c736:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c73a:	3d01      	subs	r5, #1
 800c73c:	429d      	cmp	r5, r3
 800c73e:	da4f      	bge.n	800c7e0 <_strtod_l+0x770>
 800c740:	1b5b      	subs	r3, r3, r5
 800c742:	2101      	movs	r1, #1
 800c744:	2b1f      	cmp	r3, #31
 800c746:	eba2 0203 	sub.w	r2, r2, r3
 800c74a:	dc3d      	bgt.n	800c7c8 <_strtod_l+0x758>
 800c74c:	fa01 f303 	lsl.w	r3, r1, r3
 800c750:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c752:	2300      	movs	r3, #0
 800c754:	9310      	str	r3, [sp, #64]	@ 0x40
 800c756:	18bd      	adds	r5, r7, r2
 800c758:	9b08      	ldr	r3, [sp, #32]
 800c75a:	4416      	add	r6, r2
 800c75c:	42af      	cmp	r7, r5
 800c75e:	441e      	add	r6, r3
 800c760:	463b      	mov	r3, r7
 800c762:	bfa8      	it	ge
 800c764:	462b      	movge	r3, r5
 800c766:	42b3      	cmp	r3, r6
 800c768:	bfa8      	it	ge
 800c76a:	4633      	movge	r3, r6
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfc2      	ittt	gt
 800c770:	1aed      	subgt	r5, r5, r3
 800c772:	1af6      	subgt	r6, r6, r3
 800c774:	1aff      	subgt	r7, r7, r3
 800c776:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dd16      	ble.n	800c7aa <_strtod_l+0x73a>
 800c77c:	4641      	mov	r1, r8
 800c77e:	461a      	mov	r2, r3
 800c780:	9805      	ldr	r0, [sp, #20]
 800c782:	f7ff f999 	bl	800bab8 <__pow5mult>
 800c786:	4680      	mov	r8, r0
 800c788:	2800      	cmp	r0, #0
 800c78a:	d0ba      	beq.n	800c702 <_strtod_l+0x692>
 800c78c:	4601      	mov	r1, r0
 800c78e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c790:	9805      	ldr	r0, [sp, #20]
 800c792:	f7ff f8e7 	bl	800b964 <__multiply>
 800c796:	900e      	str	r0, [sp, #56]	@ 0x38
 800c798:	2800      	cmp	r0, #0
 800c79a:	f43f ae8a 	beq.w	800c4b2 <_strtod_l+0x442>
 800c79e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7a0:	9805      	ldr	r0, [sp, #20]
 800c7a2:	f7fe ffc9 	bl	800b738 <_Bfree>
 800c7a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7aa:	2d00      	cmp	r5, #0
 800c7ac:	dc1d      	bgt.n	800c7ea <_strtod_l+0x77a>
 800c7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dd23      	ble.n	800c7fc <_strtod_l+0x78c>
 800c7b4:	4649      	mov	r1, r9
 800c7b6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c7b8:	9805      	ldr	r0, [sp, #20]
 800c7ba:	f7ff f97d 	bl	800bab8 <__pow5mult>
 800c7be:	4681      	mov	r9, r0
 800c7c0:	b9e0      	cbnz	r0, 800c7fc <_strtod_l+0x78c>
 800c7c2:	f04f 0900 	mov.w	r9, #0
 800c7c6:	e674      	b.n	800c4b2 <_strtod_l+0x442>
 800c7c8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c7cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c7ce:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c7d2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c7d6:	35e2      	adds	r5, #226	@ 0xe2
 800c7d8:	fa01 f305 	lsl.w	r3, r1, r5
 800c7dc:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7de:	e7ba      	b.n	800c756 <_strtod_l+0x6e6>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7e8:	e7b5      	b.n	800c756 <_strtod_l+0x6e6>
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7ee:	9805      	ldr	r0, [sp, #20]
 800c7f0:	f7ff f9bc 	bl	800bb6c <__lshift>
 800c7f4:	901a      	str	r0, [sp, #104]	@ 0x68
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d1d9      	bne.n	800c7ae <_strtod_l+0x73e>
 800c7fa:	e65a      	b.n	800c4b2 <_strtod_l+0x442>
 800c7fc:	2e00      	cmp	r6, #0
 800c7fe:	dd07      	ble.n	800c810 <_strtod_l+0x7a0>
 800c800:	4649      	mov	r1, r9
 800c802:	4632      	mov	r2, r6
 800c804:	9805      	ldr	r0, [sp, #20]
 800c806:	f7ff f9b1 	bl	800bb6c <__lshift>
 800c80a:	4681      	mov	r9, r0
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d0d8      	beq.n	800c7c2 <_strtod_l+0x752>
 800c810:	2f00      	cmp	r7, #0
 800c812:	dd08      	ble.n	800c826 <_strtod_l+0x7b6>
 800c814:	4641      	mov	r1, r8
 800c816:	463a      	mov	r2, r7
 800c818:	9805      	ldr	r0, [sp, #20]
 800c81a:	f7ff f9a7 	bl	800bb6c <__lshift>
 800c81e:	4680      	mov	r8, r0
 800c820:	2800      	cmp	r0, #0
 800c822:	f43f ae46 	beq.w	800c4b2 <_strtod_l+0x442>
 800c826:	464a      	mov	r2, r9
 800c828:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c82a:	9805      	ldr	r0, [sp, #20]
 800c82c:	f7ff fa26 	bl	800bc7c <__mdiff>
 800c830:	4604      	mov	r4, r0
 800c832:	2800      	cmp	r0, #0
 800c834:	f43f ae3d 	beq.w	800c4b2 <_strtod_l+0x442>
 800c838:	68c3      	ldr	r3, [r0, #12]
 800c83a:	4641      	mov	r1, r8
 800c83c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c83e:	2300      	movs	r3, #0
 800c840:	60c3      	str	r3, [r0, #12]
 800c842:	f7ff f9ff 	bl	800bc44 <__mcmp>
 800c846:	2800      	cmp	r0, #0
 800c848:	da46      	bge.n	800c8d8 <_strtod_l+0x868>
 800c84a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c84c:	ea53 030a 	orrs.w	r3, r3, sl
 800c850:	d16c      	bne.n	800c92c <_strtod_l+0x8bc>
 800c852:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c856:	2b00      	cmp	r3, #0
 800c858:	d168      	bne.n	800c92c <_strtod_l+0x8bc>
 800c85a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c85e:	0d1b      	lsrs	r3, r3, #20
 800c860:	051b      	lsls	r3, r3, #20
 800c862:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c866:	d961      	bls.n	800c92c <_strtod_l+0x8bc>
 800c868:	6963      	ldr	r3, [r4, #20]
 800c86a:	b913      	cbnz	r3, 800c872 <_strtod_l+0x802>
 800c86c:	6923      	ldr	r3, [r4, #16]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	dd5c      	ble.n	800c92c <_strtod_l+0x8bc>
 800c872:	4621      	mov	r1, r4
 800c874:	2201      	movs	r2, #1
 800c876:	9805      	ldr	r0, [sp, #20]
 800c878:	f7ff f978 	bl	800bb6c <__lshift>
 800c87c:	4641      	mov	r1, r8
 800c87e:	4604      	mov	r4, r0
 800c880:	f7ff f9e0 	bl	800bc44 <__mcmp>
 800c884:	2800      	cmp	r0, #0
 800c886:	dd51      	ble.n	800c92c <_strtod_l+0x8bc>
 800c888:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c88c:	9a08      	ldr	r2, [sp, #32]
 800c88e:	0d1b      	lsrs	r3, r3, #20
 800c890:	051b      	lsls	r3, r3, #20
 800c892:	2a00      	cmp	r2, #0
 800c894:	d06b      	beq.n	800c96e <_strtod_l+0x8fe>
 800c896:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c89a:	d868      	bhi.n	800c96e <_strtod_l+0x8fe>
 800c89c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c8a0:	f67f ae9d 	bls.w	800c5de <_strtod_l+0x56e>
 800c8a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d0 <_strtod_l+0x860>)
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	4659      	mov	r1, fp
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f7f3 feb4 	bl	8000618 <__aeabi_dmul>
 800c8b0:	4b08      	ldr	r3, [pc, #32]	@ (800c8d4 <_strtod_l+0x864>)
 800c8b2:	4682      	mov	sl, r0
 800c8b4:	468b      	mov	fp, r1
 800c8b6:	400b      	ands	r3, r1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f47f ae05 	bne.w	800c4c8 <_strtod_l+0x458>
 800c8be:	2322      	movs	r3, #34	@ 0x22
 800c8c0:	9a05      	ldr	r2, [sp, #20]
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	e600      	b.n	800c4c8 <_strtod_l+0x458>
 800c8c6:	bf00      	nop
 800c8c8:	0800e198 	.word	0x0800e198
 800c8cc:	fffffc02 	.word	0xfffffc02
 800c8d0:	39500000 	.word	0x39500000
 800c8d4:	7ff00000 	.word	0x7ff00000
 800c8d8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c8dc:	d165      	bne.n	800c9aa <_strtod_l+0x93a>
 800c8de:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c8e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8e4:	b35a      	cbz	r2, 800c93e <_strtod_l+0x8ce>
 800c8e6:	4a9e      	ldr	r2, [pc, #632]	@ (800cb60 <_strtod_l+0xaf0>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d12b      	bne.n	800c944 <_strtod_l+0x8d4>
 800c8ec:	9b08      	ldr	r3, [sp, #32]
 800c8ee:	4651      	mov	r1, sl
 800c8f0:	b303      	cbz	r3, 800c934 <_strtod_l+0x8c4>
 800c8f2:	465a      	mov	r2, fp
 800c8f4:	4b9b      	ldr	r3, [pc, #620]	@ (800cb64 <_strtod_l+0xaf4>)
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c900:	d81b      	bhi.n	800c93a <_strtod_l+0x8ca>
 800c902:	0d1b      	lsrs	r3, r3, #20
 800c904:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c908:	fa02 f303 	lsl.w	r3, r2, r3
 800c90c:	4299      	cmp	r1, r3
 800c90e:	d119      	bne.n	800c944 <_strtod_l+0x8d4>
 800c910:	4b95      	ldr	r3, [pc, #596]	@ (800cb68 <_strtod_l+0xaf8>)
 800c912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c914:	429a      	cmp	r2, r3
 800c916:	d102      	bne.n	800c91e <_strtod_l+0x8ae>
 800c918:	3101      	adds	r1, #1
 800c91a:	f43f adca 	beq.w	800c4b2 <_strtod_l+0x442>
 800c91e:	4b91      	ldr	r3, [pc, #580]	@ (800cb64 <_strtod_l+0xaf4>)
 800c920:	f04f 0a00 	mov.w	sl, #0
 800c924:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c926:	401a      	ands	r2, r3
 800c928:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c92c:	9b08      	ldr	r3, [sp, #32]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1b8      	bne.n	800c8a4 <_strtod_l+0x834>
 800c932:	e5c9      	b.n	800c4c8 <_strtod_l+0x458>
 800c934:	f04f 33ff 	mov.w	r3, #4294967295
 800c938:	e7e8      	b.n	800c90c <_strtod_l+0x89c>
 800c93a:	4613      	mov	r3, r2
 800c93c:	e7e6      	b.n	800c90c <_strtod_l+0x89c>
 800c93e:	ea53 030a 	orrs.w	r3, r3, sl
 800c942:	d0a1      	beq.n	800c888 <_strtod_l+0x818>
 800c944:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c946:	b1db      	cbz	r3, 800c980 <_strtod_l+0x910>
 800c948:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c94a:	4213      	tst	r3, r2
 800c94c:	d0ee      	beq.n	800c92c <_strtod_l+0x8bc>
 800c94e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c950:	4650      	mov	r0, sl
 800c952:	9a08      	ldr	r2, [sp, #32]
 800c954:	4659      	mov	r1, fp
 800c956:	b1bb      	cbz	r3, 800c988 <_strtod_l+0x918>
 800c958:	f7ff fb6a 	bl	800c030 <sulp>
 800c95c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c960:	ec53 2b10 	vmov	r2, r3, d0
 800c964:	f7f3 fca2 	bl	80002ac <__adddf3>
 800c968:	4682      	mov	sl, r0
 800c96a:	468b      	mov	fp, r1
 800c96c:	e7de      	b.n	800c92c <_strtod_l+0x8bc>
 800c96e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c972:	f04f 3aff 	mov.w	sl, #4294967295
 800c976:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c97a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c97e:	e7d5      	b.n	800c92c <_strtod_l+0x8bc>
 800c980:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c982:	ea13 0f0a 	tst.w	r3, sl
 800c986:	e7e1      	b.n	800c94c <_strtod_l+0x8dc>
 800c988:	f7ff fb52 	bl	800c030 <sulp>
 800c98c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c990:	ec53 2b10 	vmov	r2, r3, d0
 800c994:	f7f3 fc88 	bl	80002a8 <__aeabi_dsub>
 800c998:	2200      	movs	r2, #0
 800c99a:	2300      	movs	r3, #0
 800c99c:	4682      	mov	sl, r0
 800c99e:	468b      	mov	fp, r1
 800c9a0:	f7f4 f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d0c1      	beq.n	800c92c <_strtod_l+0x8bc>
 800c9a8:	e619      	b.n	800c5de <_strtod_l+0x56e>
 800c9aa:	4641      	mov	r1, r8
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7ff fac9 	bl	800bf44 <__ratio>
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c9b8:	ec57 6b10 	vmov	r6, r7, d0
 800c9bc:	4630      	mov	r0, r6
 800c9be:	4639      	mov	r1, r7
 800c9c0:	f7f4 f8a6 	bl	8000b10 <__aeabi_dcmple>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d06f      	beq.n	800caa8 <_strtod_l+0xa38>
 800c9c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d17a      	bne.n	800cac4 <_strtod_l+0xa54>
 800c9ce:	f1ba 0f00 	cmp.w	sl, #0
 800c9d2:	d158      	bne.n	800ca86 <_strtod_l+0xa16>
 800c9d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d15a      	bne.n	800ca94 <_strtod_l+0xa24>
 800c9de:	2200      	movs	r2, #0
 800c9e0:	4b62      	ldr	r3, [pc, #392]	@ (800cb6c <_strtod_l+0xafc>)
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7f4 f889 	bl	8000afc <__aeabi_dcmplt>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d159      	bne.n	800caa2 <_strtod_l+0xa32>
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	4639      	mov	r1, r7
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	4b5e      	ldr	r3, [pc, #376]	@ (800cb70 <_strtod_l+0xb00>)
 800c9f6:	f7f3 fe0f 	bl	8000618 <__aeabi_dmul>
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca02:	9606      	str	r6, [sp, #24]
 800ca04:	9307      	str	r3, [sp, #28]
 800ca06:	4d57      	ldr	r5, [pc, #348]	@ (800cb64 <_strtod_l+0xaf4>)
 800ca08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca12:	401d      	ands	r5, r3
 800ca14:	4b57      	ldr	r3, [pc, #348]	@ (800cb74 <_strtod_l+0xb04>)
 800ca16:	429d      	cmp	r5, r3
 800ca18:	f040 80b0 	bne.w	800cb7c <_strtod_l+0xb0c>
 800ca1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca1e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ca22:	ec4b ab10 	vmov	d0, sl, fp
 800ca26:	f7ff f9c1 	bl	800bdac <__ulp>
 800ca2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca2e:	ec51 0b10 	vmov	r0, r1, d0
 800ca32:	f7f3 fdf1 	bl	8000618 <__aeabi_dmul>
 800ca36:	4652      	mov	r2, sl
 800ca38:	465b      	mov	r3, fp
 800ca3a:	f7f3 fc37 	bl	80002ac <__adddf3>
 800ca3e:	460b      	mov	r3, r1
 800ca40:	4948      	ldr	r1, [pc, #288]	@ (800cb64 <_strtod_l+0xaf4>)
 800ca42:	4682      	mov	sl, r0
 800ca44:	4a4c      	ldr	r2, [pc, #304]	@ (800cb78 <_strtod_l+0xb08>)
 800ca46:	4019      	ands	r1, r3
 800ca48:	4291      	cmp	r1, r2
 800ca4a:	d942      	bls.n	800cad2 <_strtod_l+0xa62>
 800ca4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca4e:	4b46      	ldr	r3, [pc, #280]	@ (800cb68 <_strtod_l+0xaf8>)
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d103      	bne.n	800ca5c <_strtod_l+0x9ec>
 800ca54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca56:	3301      	adds	r3, #1
 800ca58:	f43f ad2b 	beq.w	800c4b2 <_strtod_l+0x442>
 800ca5c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800cb68 <_strtod_l+0xaf8>
 800ca60:	f04f 3aff 	mov.w	sl, #4294967295
 800ca64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca66:	9805      	ldr	r0, [sp, #20]
 800ca68:	f7fe fe66 	bl	800b738 <_Bfree>
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	9805      	ldr	r0, [sp, #20]
 800ca70:	f7fe fe62 	bl	800b738 <_Bfree>
 800ca74:	4641      	mov	r1, r8
 800ca76:	9805      	ldr	r0, [sp, #20]
 800ca78:	f7fe fe5e 	bl	800b738 <_Bfree>
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	9805      	ldr	r0, [sp, #20]
 800ca80:	f7fe fe5a 	bl	800b738 <_Bfree>
 800ca84:	e618      	b.n	800c6b8 <_strtod_l+0x648>
 800ca86:	f1ba 0f01 	cmp.w	sl, #1
 800ca8a:	d103      	bne.n	800ca94 <_strtod_l+0xa24>
 800ca8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f43f ada5 	beq.w	800c5de <_strtod_l+0x56e>
 800ca94:	2600      	movs	r6, #0
 800ca96:	4f35      	ldr	r7, [pc, #212]	@ (800cb6c <_strtod_l+0xafc>)
 800ca98:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800cb40 <_strtod_l+0xad0>
 800ca9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800caa0:	e7b1      	b.n	800ca06 <_strtod_l+0x996>
 800caa2:	2600      	movs	r6, #0
 800caa4:	4f32      	ldr	r7, [pc, #200]	@ (800cb70 <_strtod_l+0xb00>)
 800caa6:	e7aa      	b.n	800c9fe <_strtod_l+0x98e>
 800caa8:	4b31      	ldr	r3, [pc, #196]	@ (800cb70 <_strtod_l+0xb00>)
 800caaa:	4630      	mov	r0, r6
 800caac:	4639      	mov	r1, r7
 800caae:	2200      	movs	r2, #0
 800cab0:	f7f3 fdb2 	bl	8000618 <__aeabi_dmul>
 800cab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cab6:	4606      	mov	r6, r0
 800cab8:	460f      	mov	r7, r1
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d09f      	beq.n	800c9fe <_strtod_l+0x98e>
 800cabe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cac2:	e7a0      	b.n	800ca06 <_strtod_l+0x996>
 800cac4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800cb48 <_strtod_l+0xad8>
 800cac8:	ec57 6b17 	vmov	r6, r7, d7
 800cacc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cad0:	e799      	b.n	800ca06 <_strtod_l+0x996>
 800cad2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cad6:	9b08      	ldr	r3, [sp, #32]
 800cad8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1c1      	bne.n	800ca64 <_strtod_l+0x9f4>
 800cae0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cae4:	0d1b      	lsrs	r3, r3, #20
 800cae6:	051b      	lsls	r3, r3, #20
 800cae8:	429d      	cmp	r5, r3
 800caea:	d1bb      	bne.n	800ca64 <_strtod_l+0x9f4>
 800caec:	4630      	mov	r0, r6
 800caee:	4639      	mov	r1, r7
 800caf0:	f7f4 f8f2 	bl	8000cd8 <__aeabi_d2lz>
 800caf4:	f7f3 fd62 	bl	80005bc <__aeabi_l2d>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4630      	mov	r0, r6
 800cafe:	4639      	mov	r1, r7
 800cb00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb04:	f7f3 fbd0 	bl	80002a8 <__aeabi_dsub>
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	ea46 060a 	orr.w	r6, r6, sl
 800cb10:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb16:	431e      	orrs	r6, r3
 800cb18:	d06d      	beq.n	800cbf6 <_strtod_l+0xb86>
 800cb1a:	a30d      	add	r3, pc, #52	@ (adr r3, 800cb50 <_strtod_l+0xae0>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 ffec 	bl	8000afc <__aeabi_dcmplt>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f47f accf 	bne.w	800c4c8 <_strtod_l+0x458>
 800cb2a:	a30b      	add	r3, pc, #44	@ (adr r3, 800cb58 <_strtod_l+0xae8>)
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb34:	f7f4 f800 	bl	8000b38 <__aeabi_dcmpgt>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d093      	beq.n	800ca64 <_strtod_l+0x9f4>
 800cb3c:	e4c4      	b.n	800c4c8 <_strtod_l+0x458>
 800cb3e:	bf00      	nop
 800cb40:	00000000 	.word	0x00000000
 800cb44:	bff00000 	.word	0xbff00000
 800cb48:	00000000 	.word	0x00000000
 800cb4c:	3ff00000 	.word	0x3ff00000
 800cb50:	94a03595 	.word	0x94a03595
 800cb54:	3fdfffff 	.word	0x3fdfffff
 800cb58:	35afe535 	.word	0x35afe535
 800cb5c:	3fe00000 	.word	0x3fe00000
 800cb60:	000fffff 	.word	0x000fffff
 800cb64:	7ff00000 	.word	0x7ff00000
 800cb68:	7fefffff 	.word	0x7fefffff
 800cb6c:	3ff00000 	.word	0x3ff00000
 800cb70:	3fe00000 	.word	0x3fe00000
 800cb74:	7fe00000 	.word	0x7fe00000
 800cb78:	7c9fffff 	.word	0x7c9fffff
 800cb7c:	9b08      	ldr	r3, [sp, #32]
 800cb7e:	b323      	cbz	r3, 800cbca <_strtod_l+0xb5a>
 800cb80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cb84:	d821      	bhi.n	800cbca <_strtod_l+0xb5a>
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	a327      	add	r3, pc, #156	@ (adr r3, 800cc28 <_strtod_l+0xbb8>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f7f3 ffbe 	bl	8000b10 <__aeabi_dcmple>
 800cb94:	b1a0      	cbz	r0, 800cbc0 <_strtod_l+0xb50>
 800cb96:	4639      	mov	r1, r7
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7f4 f815 	bl	8000bc8 <__aeabi_d2uiz>
 800cb9e:	2801      	cmp	r0, #1
 800cba0:	bf38      	it	cc
 800cba2:	2001      	movcc	r0, #1
 800cba4:	f7f3 fcbe 	bl	8000524 <__aeabi_ui2d>
 800cba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460f      	mov	r7, r1
 800cbae:	b9fb      	cbnz	r3, 800cbf0 <_strtod_l+0xb80>
 800cbb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cbb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800cbb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800cbb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cbbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cbc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cbc6:	1b5b      	subs	r3, r3, r5
 800cbc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800cbca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cbce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cbd2:	f7ff f8eb 	bl	800bdac <__ulp>
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	4659      	mov	r1, fp
 800cbda:	ec53 2b10 	vmov	r2, r3, d0
 800cbde:	f7f3 fd1b 	bl	8000618 <__aeabi_dmul>
 800cbe2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cbe6:	f7f3 fb61 	bl	80002ac <__adddf3>
 800cbea:	4682      	mov	sl, r0
 800cbec:	468b      	mov	fp, r1
 800cbee:	e772      	b.n	800cad6 <_strtod_l+0xa66>
 800cbf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cbf4:	e7e0      	b.n	800cbb8 <_strtod_l+0xb48>
 800cbf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc30 <_strtod_l+0xbc0>)
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	f7f3 ff7e 	bl	8000afc <__aeabi_dcmplt>
 800cc00:	e79a      	b.n	800cb38 <_strtod_l+0xac8>
 800cc02:	2300      	movs	r3, #0
 800cc04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc08:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc0a:	6013      	str	r3, [r2, #0]
 800cc0c:	f7ff ba6d 	b.w	800c0ea <_strtod_l+0x7a>
 800cc10:	2a65      	cmp	r2, #101	@ 0x65
 800cc12:	f43f ab67 	beq.w	800c2e4 <_strtod_l+0x274>
 800cc16:	2a45      	cmp	r2, #69	@ 0x45
 800cc18:	f43f ab64 	beq.w	800c2e4 <_strtod_l+0x274>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	f7ff bba0 	b.w	800c362 <_strtod_l+0x2f2>
 800cc22:	bf00      	nop
 800cc24:	f3af 8000 	nop.w
 800cc28:	ffc00000 	.word	0xffc00000
 800cc2c:	41dfffff 	.word	0x41dfffff
 800cc30:	94a03595 	.word	0x94a03595
 800cc34:	3fcfffff 	.word	0x3fcfffff

0800cc38 <_strtod_r>:
 800cc38:	4b01      	ldr	r3, [pc, #4]	@ (800cc40 <_strtod_r+0x8>)
 800cc3a:	f7ff ba19 	b.w	800c070 <_strtod_l>
 800cc3e:	bf00      	nop
 800cc40:	20000068 	.word	0x20000068

0800cc44 <_strtol_l.constprop.0>:
 800cc44:	2b24      	cmp	r3, #36	@ 0x24
 800cc46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc4a:	4686      	mov	lr, r0
 800cc4c:	4690      	mov	r8, r2
 800cc4e:	d801      	bhi.n	800cc54 <_strtol_l.constprop.0+0x10>
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d106      	bne.n	800cc62 <_strtol_l.constprop.0+0x1e>
 800cc54:	f7fd fd9a 	bl	800a78c <__errno>
 800cc58:	2316      	movs	r3, #22
 800cc5a:	6003      	str	r3, [r0, #0]
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc62:	460d      	mov	r5, r1
 800cc64:	4833      	ldr	r0, [pc, #204]	@ (800cd34 <_strtol_l.constprop.0+0xf0>)
 800cc66:	462a      	mov	r2, r5
 800cc68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc6c:	5d06      	ldrb	r6, [r0, r4]
 800cc6e:	f016 0608 	ands.w	r6, r6, #8
 800cc72:	d1f8      	bne.n	800cc66 <_strtol_l.constprop.0+0x22>
 800cc74:	2c2d      	cmp	r4, #45	@ 0x2d
 800cc76:	d12d      	bne.n	800ccd4 <_strtol_l.constprop.0+0x90>
 800cc78:	782c      	ldrb	r4, [r5, #0]
 800cc7a:	2601      	movs	r6, #1
 800cc7c:	1c95      	adds	r5, r2, #2
 800cc7e:	f033 0210 	bics.w	r2, r3, #16
 800cc82:	d109      	bne.n	800cc98 <_strtol_l.constprop.0+0x54>
 800cc84:	2c30      	cmp	r4, #48	@ 0x30
 800cc86:	d12a      	bne.n	800ccde <_strtol_l.constprop.0+0x9a>
 800cc88:	782a      	ldrb	r2, [r5, #0]
 800cc8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cc8e:	2a58      	cmp	r2, #88	@ 0x58
 800cc90:	d125      	bne.n	800ccde <_strtol_l.constprop.0+0x9a>
 800cc92:	786c      	ldrb	r4, [r5, #1]
 800cc94:	2310      	movs	r3, #16
 800cc96:	3502      	adds	r5, #2
 800cc98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cca2:	4610      	mov	r0, r2
 800cca4:	fbbc f9f3 	udiv	r9, ip, r3
 800cca8:	fb03 ca19 	mls	sl, r3, r9, ip
 800ccac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ccb0:	2f09      	cmp	r7, #9
 800ccb2:	d81b      	bhi.n	800ccec <_strtol_l.constprop.0+0xa8>
 800ccb4:	463c      	mov	r4, r7
 800ccb6:	42a3      	cmp	r3, r4
 800ccb8:	dd27      	ble.n	800cd0a <_strtol_l.constprop.0+0xc6>
 800ccba:	1c57      	adds	r7, r2, #1
 800ccbc:	d007      	beq.n	800ccce <_strtol_l.constprop.0+0x8a>
 800ccbe:	4581      	cmp	r9, r0
 800ccc0:	d320      	bcc.n	800cd04 <_strtol_l.constprop.0+0xc0>
 800ccc2:	d101      	bne.n	800ccc8 <_strtol_l.constprop.0+0x84>
 800ccc4:	45a2      	cmp	sl, r4
 800ccc6:	db1d      	blt.n	800cd04 <_strtol_l.constprop.0+0xc0>
 800ccc8:	fb00 4003 	mla	r0, r0, r3, r4
 800cccc:	2201      	movs	r2, #1
 800ccce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccd2:	e7eb      	b.n	800ccac <_strtol_l.constprop.0+0x68>
 800ccd4:	2c2b      	cmp	r4, #43	@ 0x2b
 800ccd6:	bf04      	itt	eq
 800ccd8:	782c      	ldrbeq	r4, [r5, #0]
 800ccda:	1c95      	addeq	r5, r2, #2
 800ccdc:	e7cf      	b.n	800cc7e <_strtol_l.constprop.0+0x3a>
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1da      	bne.n	800cc98 <_strtol_l.constprop.0+0x54>
 800cce2:	2c30      	cmp	r4, #48	@ 0x30
 800cce4:	bf0c      	ite	eq
 800cce6:	2308      	moveq	r3, #8
 800cce8:	230a      	movne	r3, #10
 800ccea:	e7d5      	b.n	800cc98 <_strtol_l.constprop.0+0x54>
 800ccec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ccf0:	2f19      	cmp	r7, #25
 800ccf2:	d801      	bhi.n	800ccf8 <_strtol_l.constprop.0+0xb4>
 800ccf4:	3c37      	subs	r4, #55	@ 0x37
 800ccf6:	e7de      	b.n	800ccb6 <_strtol_l.constprop.0+0x72>
 800ccf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ccfc:	2f19      	cmp	r7, #25
 800ccfe:	d804      	bhi.n	800cd0a <_strtol_l.constprop.0+0xc6>
 800cd00:	3c57      	subs	r4, #87	@ 0x57
 800cd02:	e7d8      	b.n	800ccb6 <_strtol_l.constprop.0+0x72>
 800cd04:	f04f 32ff 	mov.w	r2, #4294967295
 800cd08:	e7e1      	b.n	800ccce <_strtol_l.constprop.0+0x8a>
 800cd0a:	1c53      	adds	r3, r2, #1
 800cd0c:	d108      	bne.n	800cd20 <_strtol_l.constprop.0+0xdc>
 800cd0e:	2322      	movs	r3, #34	@ 0x22
 800cd10:	4660      	mov	r0, ip
 800cd12:	f8ce 3000 	str.w	r3, [lr]
 800cd16:	f1b8 0f00 	cmp.w	r8, #0
 800cd1a:	d0a0      	beq.n	800cc5e <_strtol_l.constprop.0+0x1a>
 800cd1c:	1e69      	subs	r1, r5, #1
 800cd1e:	e006      	b.n	800cd2e <_strtol_l.constprop.0+0xea>
 800cd20:	b106      	cbz	r6, 800cd24 <_strtol_l.constprop.0+0xe0>
 800cd22:	4240      	negs	r0, r0
 800cd24:	f1b8 0f00 	cmp.w	r8, #0
 800cd28:	d099      	beq.n	800cc5e <_strtol_l.constprop.0+0x1a>
 800cd2a:	2a00      	cmp	r2, #0
 800cd2c:	d1f6      	bne.n	800cd1c <_strtol_l.constprop.0+0xd8>
 800cd2e:	f8c8 1000 	str.w	r1, [r8]
 800cd32:	e794      	b.n	800cc5e <_strtol_l.constprop.0+0x1a>
 800cd34:	0800e1c1 	.word	0x0800e1c1

0800cd38 <_strtol_r>:
 800cd38:	f7ff bf84 	b.w	800cc44 <_strtol_l.constprop.0>

0800cd3c <__ssputs_r>:
 800cd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd40:	461f      	mov	r7, r3
 800cd42:	688e      	ldr	r6, [r1, #8]
 800cd44:	4682      	mov	sl, r0
 800cd46:	460c      	mov	r4, r1
 800cd48:	42be      	cmp	r6, r7
 800cd4a:	4690      	mov	r8, r2
 800cd4c:	680b      	ldr	r3, [r1, #0]
 800cd4e:	d82d      	bhi.n	800cdac <__ssputs_r+0x70>
 800cd50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd58:	d026      	beq.n	800cda8 <__ssputs_r+0x6c>
 800cd5a:	6965      	ldr	r5, [r4, #20]
 800cd5c:	6909      	ldr	r1, [r1, #16]
 800cd5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd62:	eba3 0901 	sub.w	r9, r3, r1
 800cd66:	1c7b      	adds	r3, r7, #1
 800cd68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd6c:	444b      	add	r3, r9
 800cd6e:	106d      	asrs	r5, r5, #1
 800cd70:	429d      	cmp	r5, r3
 800cd72:	bf38      	it	cc
 800cd74:	461d      	movcc	r5, r3
 800cd76:	0553      	lsls	r3, r2, #21
 800cd78:	d527      	bpl.n	800cdca <__ssputs_r+0x8e>
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7fe fc10 	bl	800b5a0 <_malloc_r>
 800cd80:	4606      	mov	r6, r0
 800cd82:	b360      	cbz	r0, 800cdde <__ssputs_r+0xa2>
 800cd84:	464a      	mov	r2, r9
 800cd86:	6921      	ldr	r1, [r4, #16]
 800cd88:	f000 fa18 	bl	800d1bc <memcpy>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd96:	81a3      	strh	r3, [r4, #12]
 800cd98:	6126      	str	r6, [r4, #16]
 800cd9a:	444e      	add	r6, r9
 800cd9c:	6165      	str	r5, [r4, #20]
 800cd9e:	eba5 0509 	sub.w	r5, r5, r9
 800cda2:	6026      	str	r6, [r4, #0]
 800cda4:	463e      	mov	r6, r7
 800cda6:	60a5      	str	r5, [r4, #8]
 800cda8:	42be      	cmp	r6, r7
 800cdaa:	d900      	bls.n	800cdae <__ssputs_r+0x72>
 800cdac:	463e      	mov	r6, r7
 800cdae:	4632      	mov	r2, r6
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	f000 f9c6 	bl	800d144 <memmove>
 800cdb8:	68a3      	ldr	r3, [r4, #8]
 800cdba:	2000      	movs	r0, #0
 800cdbc:	1b9b      	subs	r3, r3, r6
 800cdbe:	60a3      	str	r3, [r4, #8]
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	4433      	add	r3, r6
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdca:	462a      	mov	r2, r5
 800cdcc:	f000 fd85 	bl	800d8da <_realloc_r>
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d1e0      	bne.n	800cd98 <__ssputs_r+0x5c>
 800cdd6:	6921      	ldr	r1, [r4, #16]
 800cdd8:	4650      	mov	r0, sl
 800cdda:	f7fe fb6d 	bl	800b4b8 <_free_r>
 800cdde:	230c      	movs	r3, #12
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	f8ca 3000 	str.w	r3, [sl]
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdee:	81a3      	strh	r3, [r4, #12]
 800cdf0:	e7e9      	b.n	800cdc6 <__ssputs_r+0x8a>
	...

0800cdf4 <_svfiprintf_r>:
 800cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	4698      	mov	r8, r3
 800cdfa:	898b      	ldrh	r3, [r1, #12]
 800cdfc:	b09d      	sub	sp, #116	@ 0x74
 800cdfe:	4607      	mov	r7, r0
 800ce00:	061b      	lsls	r3, r3, #24
 800ce02:	460d      	mov	r5, r1
 800ce04:	4614      	mov	r4, r2
 800ce06:	d510      	bpl.n	800ce2a <_svfiprintf_r+0x36>
 800ce08:	690b      	ldr	r3, [r1, #16]
 800ce0a:	b973      	cbnz	r3, 800ce2a <_svfiprintf_r+0x36>
 800ce0c:	2140      	movs	r1, #64	@ 0x40
 800ce0e:	f7fe fbc7 	bl	800b5a0 <_malloc_r>
 800ce12:	6028      	str	r0, [r5, #0]
 800ce14:	6128      	str	r0, [r5, #16]
 800ce16:	b930      	cbnz	r0, 800ce26 <_svfiprintf_r+0x32>
 800ce18:	230c      	movs	r3, #12
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	b01d      	add	sp, #116	@ 0x74
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce26:	2340      	movs	r3, #64	@ 0x40
 800ce28:	616b      	str	r3, [r5, #20]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce30:	f04f 0901 	mov.w	r9, #1
 800ce34:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800cfd8 <_svfiprintf_r+0x1e4>
 800ce38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce3a:	2320      	movs	r3, #32
 800ce3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce40:	2330      	movs	r3, #48	@ 0x30
 800ce42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce46:	4623      	mov	r3, r4
 800ce48:	469a      	mov	sl, r3
 800ce4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce4e:	b10a      	cbz	r2, 800ce54 <_svfiprintf_r+0x60>
 800ce50:	2a25      	cmp	r2, #37	@ 0x25
 800ce52:	d1f9      	bne.n	800ce48 <_svfiprintf_r+0x54>
 800ce54:	ebba 0b04 	subs.w	fp, sl, r4
 800ce58:	d00b      	beq.n	800ce72 <_svfiprintf_r+0x7e>
 800ce5a:	465b      	mov	r3, fp
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4629      	mov	r1, r5
 800ce60:	4638      	mov	r0, r7
 800ce62:	f7ff ff6b 	bl	800cd3c <__ssputs_r>
 800ce66:	3001      	adds	r0, #1
 800ce68:	f000 80a7 	beq.w	800cfba <_svfiprintf_r+0x1c6>
 800ce6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce6e:	445a      	add	r2, fp
 800ce70:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce72:	f89a 3000 	ldrb.w	r3, [sl]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 809f 	beq.w	800cfba <_svfiprintf_r+0x1c6>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	f10a 0a01 	add.w	sl, sl, #1
 800ce86:	9304      	str	r3, [sp, #16]
 800ce88:	9307      	str	r3, [sp, #28]
 800ce8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce94:	4654      	mov	r4, sl
 800ce96:	2205      	movs	r2, #5
 800ce98:	484f      	ldr	r0, [pc, #316]	@ (800cfd8 <_svfiprintf_r+0x1e4>)
 800ce9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9e:	f7fd fca2 	bl	800a7e6 <memchr>
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	b9d8      	cbnz	r0, 800cede <_svfiprintf_r+0xea>
 800cea6:	06d0      	lsls	r0, r2, #27
 800cea8:	bf44      	itt	mi
 800ceaa:	2320      	movmi	r3, #32
 800ceac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceb0:	0711      	lsls	r1, r2, #28
 800ceb2:	bf44      	itt	mi
 800ceb4:	232b      	movmi	r3, #43	@ 0x2b
 800ceb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceba:	f89a 3000 	ldrb.w	r3, [sl]
 800cebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cec0:	d015      	beq.n	800ceee <_svfiprintf_r+0xfa>
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	4654      	mov	r4, sl
 800cec6:	2000      	movs	r0, #0
 800cec8:	f04f 0c0a 	mov.w	ip, #10
 800cecc:	4621      	mov	r1, r4
 800cece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced2:	3b30      	subs	r3, #48	@ 0x30
 800ced4:	2b09      	cmp	r3, #9
 800ced6:	d94b      	bls.n	800cf70 <_svfiprintf_r+0x17c>
 800ced8:	b1b0      	cbz	r0, 800cf08 <_svfiprintf_r+0x114>
 800ceda:	9207      	str	r2, [sp, #28]
 800cedc:	e014      	b.n	800cf08 <_svfiprintf_r+0x114>
 800cede:	eba0 0308 	sub.w	r3, r0, r8
 800cee2:	46a2      	mov	sl, r4
 800cee4:	fa09 f303 	lsl.w	r3, r9, r3
 800cee8:	4313      	orrs	r3, r2
 800ceea:	9304      	str	r3, [sp, #16]
 800ceec:	e7d2      	b.n	800ce94 <_svfiprintf_r+0xa0>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	1d19      	adds	r1, r3, #4
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	9103      	str	r1, [sp, #12]
 800cef8:	bfbb      	ittet	lt
 800cefa:	425b      	neglt	r3, r3
 800cefc:	f042 0202 	orrlt.w	r2, r2, #2
 800cf00:	9307      	strge	r3, [sp, #28]
 800cf02:	9307      	strlt	r3, [sp, #28]
 800cf04:	bfb8      	it	lt
 800cf06:	9204      	strlt	r2, [sp, #16]
 800cf08:	7823      	ldrb	r3, [r4, #0]
 800cf0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf0c:	d10a      	bne.n	800cf24 <_svfiprintf_r+0x130>
 800cf0e:	7863      	ldrb	r3, [r4, #1]
 800cf10:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf12:	d132      	bne.n	800cf7a <_svfiprintf_r+0x186>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	3402      	adds	r4, #2
 800cf18:	1d1a      	adds	r2, r3, #4
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf20:	9203      	str	r2, [sp, #12]
 800cf22:	9305      	str	r3, [sp, #20]
 800cf24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cfe8 <_svfiprintf_r+0x1f4>
 800cf28:	2203      	movs	r2, #3
 800cf2a:	7821      	ldrb	r1, [r4, #0]
 800cf2c:	4650      	mov	r0, sl
 800cf2e:	f7fd fc5a 	bl	800a7e6 <memchr>
 800cf32:	b138      	cbz	r0, 800cf44 <_svfiprintf_r+0x150>
 800cf34:	eba0 000a 	sub.w	r0, r0, sl
 800cf38:	2240      	movs	r2, #64	@ 0x40
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	3401      	adds	r4, #1
 800cf3e:	4082      	lsls	r2, r0
 800cf40:	4313      	orrs	r3, r2
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf48:	2206      	movs	r2, #6
 800cf4a:	4824      	ldr	r0, [pc, #144]	@ (800cfdc <_svfiprintf_r+0x1e8>)
 800cf4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf50:	f7fd fc49 	bl	800a7e6 <memchr>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d036      	beq.n	800cfc6 <_svfiprintf_r+0x1d2>
 800cf58:	4b21      	ldr	r3, [pc, #132]	@ (800cfe0 <_svfiprintf_r+0x1ec>)
 800cf5a:	bb1b      	cbnz	r3, 800cfa4 <_svfiprintf_r+0x1b0>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	3307      	adds	r3, #7
 800cf60:	f023 0307 	bic.w	r3, r3, #7
 800cf64:	3308      	adds	r3, #8
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf6a:	4433      	add	r3, r6
 800cf6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf6e:	e76a      	b.n	800ce46 <_svfiprintf_r+0x52>
 800cf70:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf74:	460c      	mov	r4, r1
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7a8      	b.n	800cecc <_svfiprintf_r+0xd8>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	3401      	adds	r4, #1
 800cf7e:	f04f 0c0a 	mov.w	ip, #10
 800cf82:	4619      	mov	r1, r3
 800cf84:	9305      	str	r3, [sp, #20]
 800cf86:	4620      	mov	r0, r4
 800cf88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf8c:	3a30      	subs	r2, #48	@ 0x30
 800cf8e:	2a09      	cmp	r2, #9
 800cf90:	d903      	bls.n	800cf9a <_svfiprintf_r+0x1a6>
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0c6      	beq.n	800cf24 <_svfiprintf_r+0x130>
 800cf96:	9105      	str	r1, [sp, #20]
 800cf98:	e7c4      	b.n	800cf24 <_svfiprintf_r+0x130>
 800cf9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e7f0      	b.n	800cf86 <_svfiprintf_r+0x192>
 800cfa4:	ab03      	add	r3, sp, #12
 800cfa6:	462a      	mov	r2, r5
 800cfa8:	a904      	add	r1, sp, #16
 800cfaa:	4638      	mov	r0, r7
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	4b0d      	ldr	r3, [pc, #52]	@ (800cfe4 <_svfiprintf_r+0x1f0>)
 800cfb0:	f7fc fca6 	bl	8009900 <_printf_float>
 800cfb4:	1c42      	adds	r2, r0, #1
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	d1d6      	bne.n	800cf68 <_svfiprintf_r+0x174>
 800cfba:	89ab      	ldrh	r3, [r5, #12]
 800cfbc:	065b      	lsls	r3, r3, #25
 800cfbe:	f53f af2d 	bmi.w	800ce1c <_svfiprintf_r+0x28>
 800cfc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfc4:	e72c      	b.n	800ce20 <_svfiprintf_r+0x2c>
 800cfc6:	ab03      	add	r3, sp, #12
 800cfc8:	462a      	mov	r2, r5
 800cfca:	a904      	add	r1, sp, #16
 800cfcc:	4638      	mov	r0, r7
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	4b04      	ldr	r3, [pc, #16]	@ (800cfe4 <_svfiprintf_r+0x1f0>)
 800cfd2:	f7fc ff31 	bl	8009e38 <_printf_i>
 800cfd6:	e7ed      	b.n	800cfb4 <_svfiprintf_r+0x1c0>
 800cfd8:	0800e2c1 	.word	0x0800e2c1
 800cfdc:	0800e2cb 	.word	0x0800e2cb
 800cfe0:	08009901 	.word	0x08009901
 800cfe4:	0800cd3d 	.word	0x0800cd3d
 800cfe8:	0800e2c7 	.word	0x0800e2c7

0800cfec <__sflush_r>:
 800cfec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff4:	0716      	lsls	r6, r2, #28
 800cff6:	4605      	mov	r5, r0
 800cff8:	460c      	mov	r4, r1
 800cffa:	d454      	bmi.n	800d0a6 <__sflush_r+0xba>
 800cffc:	684b      	ldr	r3, [r1, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	dc02      	bgt.n	800d008 <__sflush_r+0x1c>
 800d002:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d004:	2b00      	cmp	r3, #0
 800d006:	dd48      	ble.n	800d09a <__sflush_r+0xae>
 800d008:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d00a:	2e00      	cmp	r6, #0
 800d00c:	d045      	beq.n	800d09a <__sflush_r+0xae>
 800d00e:	2300      	movs	r3, #0
 800d010:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d014:	682f      	ldr	r7, [r5, #0]
 800d016:	6a21      	ldr	r1, [r4, #32]
 800d018:	602b      	str	r3, [r5, #0]
 800d01a:	d030      	beq.n	800d07e <__sflush_r+0x92>
 800d01c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d01e:	89a3      	ldrh	r3, [r4, #12]
 800d020:	0759      	lsls	r1, r3, #29
 800d022:	d505      	bpl.n	800d030 <__sflush_r+0x44>
 800d024:	6863      	ldr	r3, [r4, #4]
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d02a:	b10b      	cbz	r3, 800d030 <__sflush_r+0x44>
 800d02c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d02e:	1ad2      	subs	r2, r2, r3
 800d030:	2300      	movs	r3, #0
 800d032:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d034:	6a21      	ldr	r1, [r4, #32]
 800d036:	4628      	mov	r0, r5
 800d038:	47b0      	blx	r6
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	d106      	bne.n	800d04e <__sflush_r+0x62>
 800d040:	6829      	ldr	r1, [r5, #0]
 800d042:	291d      	cmp	r1, #29
 800d044:	d82b      	bhi.n	800d09e <__sflush_r+0xb2>
 800d046:	4a2a      	ldr	r2, [pc, #168]	@ (800d0f0 <__sflush_r+0x104>)
 800d048:	410a      	asrs	r2, r1
 800d04a:	07d6      	lsls	r6, r2, #31
 800d04c:	d427      	bmi.n	800d09e <__sflush_r+0xb2>
 800d04e:	2200      	movs	r2, #0
 800d050:	04d9      	lsls	r1, r3, #19
 800d052:	6062      	str	r2, [r4, #4]
 800d054:	6922      	ldr	r2, [r4, #16]
 800d056:	6022      	str	r2, [r4, #0]
 800d058:	d504      	bpl.n	800d064 <__sflush_r+0x78>
 800d05a:	1c42      	adds	r2, r0, #1
 800d05c:	d101      	bne.n	800d062 <__sflush_r+0x76>
 800d05e:	682b      	ldr	r3, [r5, #0]
 800d060:	b903      	cbnz	r3, 800d064 <__sflush_r+0x78>
 800d062:	6560      	str	r0, [r4, #84]	@ 0x54
 800d064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d066:	602f      	str	r7, [r5, #0]
 800d068:	b1b9      	cbz	r1, 800d09a <__sflush_r+0xae>
 800d06a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d06e:	4299      	cmp	r1, r3
 800d070:	d002      	beq.n	800d078 <__sflush_r+0x8c>
 800d072:	4628      	mov	r0, r5
 800d074:	f7fe fa20 	bl	800b4b8 <_free_r>
 800d078:	2300      	movs	r3, #0
 800d07a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d07c:	e00d      	b.n	800d09a <__sflush_r+0xae>
 800d07e:	2301      	movs	r3, #1
 800d080:	4628      	mov	r0, r5
 800d082:	47b0      	blx	r6
 800d084:	4602      	mov	r2, r0
 800d086:	1c50      	adds	r0, r2, #1
 800d088:	d1c9      	bne.n	800d01e <__sflush_r+0x32>
 800d08a:	682b      	ldr	r3, [r5, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d0c6      	beq.n	800d01e <__sflush_r+0x32>
 800d090:	2b1d      	cmp	r3, #29
 800d092:	d001      	beq.n	800d098 <__sflush_r+0xac>
 800d094:	2b16      	cmp	r3, #22
 800d096:	d11d      	bne.n	800d0d4 <__sflush_r+0xe8>
 800d098:	602f      	str	r7, [r5, #0]
 800d09a:	2000      	movs	r0, #0
 800d09c:	e021      	b.n	800d0e2 <__sflush_r+0xf6>
 800d09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0a2:	b21b      	sxth	r3, r3
 800d0a4:	e01a      	b.n	800d0dc <__sflush_r+0xf0>
 800d0a6:	690f      	ldr	r7, [r1, #16]
 800d0a8:	2f00      	cmp	r7, #0
 800d0aa:	d0f6      	beq.n	800d09a <__sflush_r+0xae>
 800d0ac:	0793      	lsls	r3, r2, #30
 800d0ae:	680e      	ldr	r6, [r1, #0]
 800d0b0:	600f      	str	r7, [r1, #0]
 800d0b2:	bf0c      	ite	eq
 800d0b4:	694b      	ldreq	r3, [r1, #20]
 800d0b6:	2300      	movne	r3, #0
 800d0b8:	eba6 0807 	sub.w	r8, r6, r7
 800d0bc:	608b      	str	r3, [r1, #8]
 800d0be:	f1b8 0f00 	cmp.w	r8, #0
 800d0c2:	ddea      	ble.n	800d09a <__sflush_r+0xae>
 800d0c4:	4643      	mov	r3, r8
 800d0c6:	463a      	mov	r2, r7
 800d0c8:	6a21      	ldr	r1, [r4, #32]
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0ce:	47b0      	blx	r6
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	dc08      	bgt.n	800d0e6 <__sflush_r+0xfa>
 800d0d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	81a3      	strh	r3, [r4, #12]
 800d0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e6:	4407      	add	r7, r0
 800d0e8:	eba8 0800 	sub.w	r8, r8, r0
 800d0ec:	e7e7      	b.n	800d0be <__sflush_r+0xd2>
 800d0ee:	bf00      	nop
 800d0f0:	dfbffffe 	.word	0xdfbffffe

0800d0f4 <_fflush_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	690b      	ldr	r3, [r1, #16]
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	b913      	cbnz	r3, 800d104 <_fflush_r+0x10>
 800d0fe:	2500      	movs	r5, #0
 800d100:	4628      	mov	r0, r5
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	b118      	cbz	r0, 800d10e <_fflush_r+0x1a>
 800d106:	6a03      	ldr	r3, [r0, #32]
 800d108:	b90b      	cbnz	r3, 800d10e <_fflush_r+0x1a>
 800d10a:	f7fd fa53 	bl	800a5b4 <__sinit>
 800d10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d0f3      	beq.n	800d0fe <_fflush_r+0xa>
 800d116:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d118:	07d0      	lsls	r0, r2, #31
 800d11a:	d404      	bmi.n	800d126 <_fflush_r+0x32>
 800d11c:	0599      	lsls	r1, r3, #22
 800d11e:	d402      	bmi.n	800d126 <_fflush_r+0x32>
 800d120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d122:	f7fd fb5e 	bl	800a7e2 <__retarget_lock_acquire_recursive>
 800d126:	4628      	mov	r0, r5
 800d128:	4621      	mov	r1, r4
 800d12a:	f7ff ff5f 	bl	800cfec <__sflush_r>
 800d12e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d130:	4605      	mov	r5, r0
 800d132:	07da      	lsls	r2, r3, #31
 800d134:	d4e4      	bmi.n	800d100 <_fflush_r+0xc>
 800d136:	89a3      	ldrh	r3, [r4, #12]
 800d138:	059b      	lsls	r3, r3, #22
 800d13a:	d4e1      	bmi.n	800d100 <_fflush_r+0xc>
 800d13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d13e:	f7fd fb51 	bl	800a7e4 <__retarget_lock_release_recursive>
 800d142:	e7dd      	b.n	800d100 <_fflush_r+0xc>

0800d144 <memmove>:
 800d144:	4288      	cmp	r0, r1
 800d146:	b510      	push	{r4, lr}
 800d148:	eb01 0402 	add.w	r4, r1, r2
 800d14c:	d902      	bls.n	800d154 <memmove+0x10>
 800d14e:	4284      	cmp	r4, r0
 800d150:	4623      	mov	r3, r4
 800d152:	d807      	bhi.n	800d164 <memmove+0x20>
 800d154:	1e43      	subs	r3, r0, #1
 800d156:	42a1      	cmp	r1, r4
 800d158:	d008      	beq.n	800d16c <memmove+0x28>
 800d15a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d15e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d162:	e7f8      	b.n	800d156 <memmove+0x12>
 800d164:	4402      	add	r2, r0
 800d166:	4601      	mov	r1, r0
 800d168:	428a      	cmp	r2, r1
 800d16a:	d100      	bne.n	800d16e <memmove+0x2a>
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d176:	e7f7      	b.n	800d168 <memmove+0x24>

0800d178 <strncmp>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	b16a      	cbz	r2, 800d198 <strncmp+0x20>
 800d17c:	3901      	subs	r1, #1
 800d17e:	1884      	adds	r4, r0, r2
 800d180:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d184:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d188:	429a      	cmp	r2, r3
 800d18a:	d103      	bne.n	800d194 <strncmp+0x1c>
 800d18c:	42a0      	cmp	r0, r4
 800d18e:	d001      	beq.n	800d194 <strncmp+0x1c>
 800d190:	2a00      	cmp	r2, #0
 800d192:	d1f5      	bne.n	800d180 <strncmp+0x8>
 800d194:	1ad0      	subs	r0, r2, r3
 800d196:	bd10      	pop	{r4, pc}
 800d198:	4610      	mov	r0, r2
 800d19a:	e7fc      	b.n	800d196 <strncmp+0x1e>

0800d19c <_sbrk_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4d05      	ldr	r5, [pc, #20]	@ (800d1b8 <_sbrk_r+0x1c>)
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f4 fa02 	bl	80015b0 <_sbrk>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_sbrk_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_sbrk_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	2000041c 	.word	0x2000041c

0800d1bc <memcpy>:
 800d1bc:	440a      	add	r2, r1
 800d1be:	1e43      	subs	r3, r0, #1
 800d1c0:	4291      	cmp	r1, r2
 800d1c2:	d100      	bne.n	800d1c6 <memcpy+0xa>
 800d1c4:	4770      	bx	lr
 800d1c6:	b510      	push	{r4, lr}
 800d1c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1cc:	4291      	cmp	r1, r2
 800d1ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1d2:	d1f9      	bne.n	800d1c8 <memcpy+0xc>
 800d1d4:	bd10      	pop	{r4, pc}
	...

0800d1d8 <nan>:
 800d1d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d1e0 <nan+0x8>
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	00000000 	.word	0x00000000
 800d1e4:	7ff80000 	.word	0x7ff80000

0800d1e8 <__assert_func>:
 800d1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1ea:	4614      	mov	r4, r2
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	4b09      	ldr	r3, [pc, #36]	@ (800d214 <__assert_func+0x2c>)
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68d8      	ldr	r0, [r3, #12]
 800d1f6:	b954      	cbnz	r4, 800d20e <__assert_func+0x26>
 800d1f8:	4b07      	ldr	r3, [pc, #28]	@ (800d218 <__assert_func+0x30>)
 800d1fa:	461c      	mov	r4, r3
 800d1fc:	9100      	str	r1, [sp, #0]
 800d1fe:	4907      	ldr	r1, [pc, #28]	@ (800d21c <__assert_func+0x34>)
 800d200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d204:	462b      	mov	r3, r5
 800d206:	f000 fba3 	bl	800d950 <fiprintf>
 800d20a:	f000 fbb3 	bl	800d974 <abort>
 800d20e:	4b04      	ldr	r3, [pc, #16]	@ (800d220 <__assert_func+0x38>)
 800d210:	e7f4      	b.n	800d1fc <__assert_func+0x14>
 800d212:	bf00      	nop
 800d214:	20000018 	.word	0x20000018
 800d218:	0800e315 	.word	0x0800e315
 800d21c:	0800e2e7 	.word	0x0800e2e7
 800d220:	0800e2da 	.word	0x0800e2da

0800d224 <_calloc_r>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	fba1 5402 	umull	r5, r4, r1, r2
 800d22a:	b93c      	cbnz	r4, 800d23c <_calloc_r+0x18>
 800d22c:	4629      	mov	r1, r5
 800d22e:	f7fe f9b7 	bl	800b5a0 <_malloc_r>
 800d232:	4606      	mov	r6, r0
 800d234:	b928      	cbnz	r0, 800d242 <_calloc_r+0x1e>
 800d236:	2600      	movs	r6, #0
 800d238:	4630      	mov	r0, r6
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	220c      	movs	r2, #12
 800d23e:	6002      	str	r2, [r0, #0]
 800d240:	e7f9      	b.n	800d236 <_calloc_r+0x12>
 800d242:	462a      	mov	r2, r5
 800d244:	4621      	mov	r1, r4
 800d246:	f7fd fa4e 	bl	800a6e6 <memset>
 800d24a:	e7f5      	b.n	800d238 <_calloc_r+0x14>

0800d24c <rshift>:
 800d24c:	6903      	ldr	r3, [r0, #16]
 800d24e:	114a      	asrs	r2, r1, #5
 800d250:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d258:	f100 0414 	add.w	r4, r0, #20
 800d25c:	dd45      	ble.n	800d2ea <rshift+0x9e>
 800d25e:	f011 011f 	ands.w	r1, r1, #31
 800d262:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d266:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d26a:	d10c      	bne.n	800d286 <rshift+0x3a>
 800d26c:	f100 0710 	add.w	r7, r0, #16
 800d270:	4629      	mov	r1, r5
 800d272:	42b1      	cmp	r1, r6
 800d274:	d334      	bcc.n	800d2e0 <rshift+0x94>
 800d276:	1a9b      	subs	r3, r3, r2
 800d278:	1eea      	subs	r2, r5, #3
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4296      	cmp	r6, r2
 800d27e:	bf38      	it	cc
 800d280:	2300      	movcc	r3, #0
 800d282:	4423      	add	r3, r4
 800d284:	e015      	b.n	800d2b2 <rshift+0x66>
 800d286:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d28a:	f1c1 0820 	rsb	r8, r1, #32
 800d28e:	f105 0e04 	add.w	lr, r5, #4
 800d292:	46a1      	mov	r9, r4
 800d294:	40cf      	lsrs	r7, r1
 800d296:	4576      	cmp	r6, lr
 800d298:	46f4      	mov	ip, lr
 800d29a:	d815      	bhi.n	800d2c8 <rshift+0x7c>
 800d29c:	1a9a      	subs	r2, r3, r2
 800d29e:	3501      	adds	r5, #1
 800d2a0:	0092      	lsls	r2, r2, #2
 800d2a2:	3a04      	subs	r2, #4
 800d2a4:	42ae      	cmp	r6, r5
 800d2a6:	bf38      	it	cc
 800d2a8:	2200      	movcc	r2, #0
 800d2aa:	18a3      	adds	r3, r4, r2
 800d2ac:	50a7      	str	r7, [r4, r2]
 800d2ae:	b107      	cbz	r7, 800d2b2 <rshift+0x66>
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	1b1a      	subs	r2, r3, r4
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2ba:	bf08      	it	eq
 800d2bc:	2300      	moveq	r3, #0
 800d2be:	6102      	str	r2, [r0, #16]
 800d2c0:	bf08      	it	eq
 800d2c2:	6143      	streq	r3, [r0, #20]
 800d2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2c8:	f8dc c000 	ldr.w	ip, [ip]
 800d2cc:	fa0c fc08 	lsl.w	ip, ip, r8
 800d2d0:	ea4c 0707 	orr.w	r7, ip, r7
 800d2d4:	f849 7b04 	str.w	r7, [r9], #4
 800d2d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2dc:	40cf      	lsrs	r7, r1
 800d2de:	e7da      	b.n	800d296 <rshift+0x4a>
 800d2e0:	f851 cb04 	ldr.w	ip, [r1], #4
 800d2e4:	f847 cf04 	str.w	ip, [r7, #4]!
 800d2e8:	e7c3      	b.n	800d272 <rshift+0x26>
 800d2ea:	4623      	mov	r3, r4
 800d2ec:	e7e1      	b.n	800d2b2 <rshift+0x66>

0800d2ee <__hexdig_fun>:
 800d2ee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d2f2:	2b09      	cmp	r3, #9
 800d2f4:	d802      	bhi.n	800d2fc <__hexdig_fun+0xe>
 800d2f6:	3820      	subs	r0, #32
 800d2f8:	b2c0      	uxtb	r0, r0
 800d2fa:	4770      	bx	lr
 800d2fc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d300:	2b05      	cmp	r3, #5
 800d302:	d801      	bhi.n	800d308 <__hexdig_fun+0x1a>
 800d304:	3847      	subs	r0, #71	@ 0x47
 800d306:	e7f7      	b.n	800d2f8 <__hexdig_fun+0xa>
 800d308:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d30c:	2b05      	cmp	r3, #5
 800d30e:	d801      	bhi.n	800d314 <__hexdig_fun+0x26>
 800d310:	3827      	subs	r0, #39	@ 0x27
 800d312:	e7f1      	b.n	800d2f8 <__hexdig_fun+0xa>
 800d314:	2000      	movs	r0, #0
 800d316:	4770      	bx	lr

0800d318 <__gethex>:
 800d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	b085      	sub	sp, #20
 800d31e:	468a      	mov	sl, r1
 800d320:	4690      	mov	r8, r2
 800d322:	9302      	str	r3, [sp, #8]
 800d324:	680b      	ldr	r3, [r1, #0]
 800d326:	9001      	str	r0, [sp, #4]
 800d328:	1c9c      	adds	r4, r3, #2
 800d32a:	46a1      	mov	r9, r4
 800d32c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d330:	2830      	cmp	r0, #48	@ 0x30
 800d332:	d0fa      	beq.n	800d32a <__gethex+0x12>
 800d334:	eba9 0303 	sub.w	r3, r9, r3
 800d338:	f1a3 0b02 	sub.w	fp, r3, #2
 800d33c:	f7ff ffd7 	bl	800d2ee <__hexdig_fun>
 800d340:	4605      	mov	r5, r0
 800d342:	2800      	cmp	r0, #0
 800d344:	d166      	bne.n	800d414 <__gethex+0xfc>
 800d346:	2201      	movs	r2, #1
 800d348:	499e      	ldr	r1, [pc, #632]	@ (800d5c4 <__gethex+0x2ac>)
 800d34a:	4648      	mov	r0, r9
 800d34c:	f7ff ff14 	bl	800d178 <strncmp>
 800d350:	4607      	mov	r7, r0
 800d352:	2800      	cmp	r0, #0
 800d354:	d165      	bne.n	800d422 <__gethex+0x10a>
 800d356:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d35a:	4626      	mov	r6, r4
 800d35c:	f7ff ffc7 	bl	800d2ee <__hexdig_fun>
 800d360:	2800      	cmp	r0, #0
 800d362:	d060      	beq.n	800d426 <__gethex+0x10e>
 800d364:	4623      	mov	r3, r4
 800d366:	7818      	ldrb	r0, [r3, #0]
 800d368:	4699      	mov	r9, r3
 800d36a:	3301      	adds	r3, #1
 800d36c:	2830      	cmp	r0, #48	@ 0x30
 800d36e:	d0fa      	beq.n	800d366 <__gethex+0x4e>
 800d370:	f7ff ffbd 	bl	800d2ee <__hexdig_fun>
 800d374:	fab0 f580 	clz	r5, r0
 800d378:	f04f 0b01 	mov.w	fp, #1
 800d37c:	096d      	lsrs	r5, r5, #5
 800d37e:	464a      	mov	r2, r9
 800d380:	4616      	mov	r6, r2
 800d382:	3201      	adds	r2, #1
 800d384:	7830      	ldrb	r0, [r6, #0]
 800d386:	f7ff ffb2 	bl	800d2ee <__hexdig_fun>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d1f8      	bne.n	800d380 <__gethex+0x68>
 800d38e:	2201      	movs	r2, #1
 800d390:	498c      	ldr	r1, [pc, #560]	@ (800d5c4 <__gethex+0x2ac>)
 800d392:	4630      	mov	r0, r6
 800d394:	f7ff fef0 	bl	800d178 <strncmp>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d13e      	bne.n	800d41a <__gethex+0x102>
 800d39c:	b944      	cbnz	r4, 800d3b0 <__gethex+0x98>
 800d39e:	1c74      	adds	r4, r6, #1
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	4616      	mov	r6, r2
 800d3a4:	3201      	adds	r2, #1
 800d3a6:	7830      	ldrb	r0, [r6, #0]
 800d3a8:	f7ff ffa1 	bl	800d2ee <__hexdig_fun>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d1f8      	bne.n	800d3a2 <__gethex+0x8a>
 800d3b0:	1ba4      	subs	r4, r4, r6
 800d3b2:	00a7      	lsls	r7, r4, #2
 800d3b4:	7833      	ldrb	r3, [r6, #0]
 800d3b6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d3ba:	2b50      	cmp	r3, #80	@ 0x50
 800d3bc:	d13d      	bne.n	800d43a <__gethex+0x122>
 800d3be:	7873      	ldrb	r3, [r6, #1]
 800d3c0:	2b2b      	cmp	r3, #43	@ 0x2b
 800d3c2:	d032      	beq.n	800d42a <__gethex+0x112>
 800d3c4:	2b2d      	cmp	r3, #45	@ 0x2d
 800d3c6:	d033      	beq.n	800d430 <__gethex+0x118>
 800d3c8:	1c71      	adds	r1, r6, #1
 800d3ca:	2400      	movs	r4, #0
 800d3cc:	7808      	ldrb	r0, [r1, #0]
 800d3ce:	f7ff ff8e 	bl	800d2ee <__hexdig_fun>
 800d3d2:	1e43      	subs	r3, r0, #1
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b18      	cmp	r3, #24
 800d3d8:	d82f      	bhi.n	800d43a <__gethex+0x122>
 800d3da:	f1a0 0210 	sub.w	r2, r0, #16
 800d3de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d3e2:	f7ff ff84 	bl	800d2ee <__hexdig_fun>
 800d3e6:	f100 3cff 	add.w	ip, r0, #4294967295
 800d3ea:	230a      	movs	r3, #10
 800d3ec:	fa5f fc8c 	uxtb.w	ip, ip
 800d3f0:	f1bc 0f18 	cmp.w	ip, #24
 800d3f4:	d91e      	bls.n	800d434 <__gethex+0x11c>
 800d3f6:	b104      	cbz	r4, 800d3fa <__gethex+0xe2>
 800d3f8:	4252      	negs	r2, r2
 800d3fa:	4417      	add	r7, r2
 800d3fc:	f8ca 1000 	str.w	r1, [sl]
 800d400:	b1ed      	cbz	r5, 800d43e <__gethex+0x126>
 800d402:	f1bb 0f00 	cmp.w	fp, #0
 800d406:	bf0c      	ite	eq
 800d408:	2506      	moveq	r5, #6
 800d40a:	2500      	movne	r5, #0
 800d40c:	4628      	mov	r0, r5
 800d40e:	b005      	add	sp, #20
 800d410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d414:	2500      	movs	r5, #0
 800d416:	462c      	mov	r4, r5
 800d418:	e7b1      	b.n	800d37e <__gethex+0x66>
 800d41a:	2c00      	cmp	r4, #0
 800d41c:	d1c8      	bne.n	800d3b0 <__gethex+0x98>
 800d41e:	4627      	mov	r7, r4
 800d420:	e7c8      	b.n	800d3b4 <__gethex+0x9c>
 800d422:	464e      	mov	r6, r9
 800d424:	462f      	mov	r7, r5
 800d426:	2501      	movs	r5, #1
 800d428:	e7c4      	b.n	800d3b4 <__gethex+0x9c>
 800d42a:	2400      	movs	r4, #0
 800d42c:	1cb1      	adds	r1, r6, #2
 800d42e:	e7cd      	b.n	800d3cc <__gethex+0xb4>
 800d430:	2401      	movs	r4, #1
 800d432:	e7fb      	b.n	800d42c <__gethex+0x114>
 800d434:	fb03 0002 	mla	r0, r3, r2, r0
 800d438:	e7cf      	b.n	800d3da <__gethex+0xc2>
 800d43a:	4631      	mov	r1, r6
 800d43c:	e7de      	b.n	800d3fc <__gethex+0xe4>
 800d43e:	eba6 0309 	sub.w	r3, r6, r9
 800d442:	4629      	mov	r1, r5
 800d444:	3b01      	subs	r3, #1
 800d446:	2b07      	cmp	r3, #7
 800d448:	dc0a      	bgt.n	800d460 <__gethex+0x148>
 800d44a:	9801      	ldr	r0, [sp, #4]
 800d44c:	f7fe f934 	bl	800b6b8 <_Balloc>
 800d450:	4604      	mov	r4, r0
 800d452:	b940      	cbnz	r0, 800d466 <__gethex+0x14e>
 800d454:	4b5c      	ldr	r3, [pc, #368]	@ (800d5c8 <__gethex+0x2b0>)
 800d456:	4602      	mov	r2, r0
 800d458:	21e4      	movs	r1, #228	@ 0xe4
 800d45a:	485c      	ldr	r0, [pc, #368]	@ (800d5cc <__gethex+0x2b4>)
 800d45c:	f7ff fec4 	bl	800d1e8 <__assert_func>
 800d460:	3101      	adds	r1, #1
 800d462:	105b      	asrs	r3, r3, #1
 800d464:	e7ef      	b.n	800d446 <__gethex+0x12e>
 800d466:	f100 0a14 	add.w	sl, r0, #20
 800d46a:	2300      	movs	r3, #0
 800d46c:	4655      	mov	r5, sl
 800d46e:	469b      	mov	fp, r3
 800d470:	45b1      	cmp	r9, r6
 800d472:	d337      	bcc.n	800d4e4 <__gethex+0x1cc>
 800d474:	f845 bb04 	str.w	fp, [r5], #4
 800d478:	eba5 050a 	sub.w	r5, r5, sl
 800d47c:	4658      	mov	r0, fp
 800d47e:	10ad      	asrs	r5, r5, #2
 800d480:	6125      	str	r5, [r4, #16]
 800d482:	016d      	lsls	r5, r5, #5
 800d484:	f7fe fa0c 	bl	800b8a0 <__hi0bits>
 800d488:	f8d8 6000 	ldr.w	r6, [r8]
 800d48c:	1a2d      	subs	r5, r5, r0
 800d48e:	42b5      	cmp	r5, r6
 800d490:	dd54      	ble.n	800d53c <__gethex+0x224>
 800d492:	1bad      	subs	r5, r5, r6
 800d494:	4620      	mov	r0, r4
 800d496:	4629      	mov	r1, r5
 800d498:	f7fe fda9 	bl	800bfee <__any_on>
 800d49c:	4681      	mov	r9, r0
 800d49e:	b178      	cbz	r0, 800d4c0 <__gethex+0x1a8>
 800d4a0:	1e6b      	subs	r3, r5, #1
 800d4a2:	f04f 0901 	mov.w	r9, #1
 800d4a6:	1159      	asrs	r1, r3, #5
 800d4a8:	f003 021f 	and.w	r2, r3, #31
 800d4ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d4b0:	fa09 f202 	lsl.w	r2, r9, r2
 800d4b4:	420a      	tst	r2, r1
 800d4b6:	d003      	beq.n	800d4c0 <__gethex+0x1a8>
 800d4b8:	454b      	cmp	r3, r9
 800d4ba:	dc36      	bgt.n	800d52a <__gethex+0x212>
 800d4bc:	f04f 0902 	mov.w	r9, #2
 800d4c0:	442f      	add	r7, r5
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7ff fec1 	bl	800d24c <rshift>
 800d4ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4ce:	42bb      	cmp	r3, r7
 800d4d0:	da42      	bge.n	800d558 <__gethex+0x240>
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	9801      	ldr	r0, [sp, #4]
 800d4d6:	f7fe f92f 	bl	800b738 <_Bfree>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4de:	25a3      	movs	r5, #163	@ 0xa3
 800d4e0:	6013      	str	r3, [r2, #0]
 800d4e2:	e793      	b.n	800d40c <__gethex+0xf4>
 800d4e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d4e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800d4ea:	d012      	beq.n	800d512 <__gethex+0x1fa>
 800d4ec:	2b20      	cmp	r3, #32
 800d4ee:	d104      	bne.n	800d4fa <__gethex+0x1e2>
 800d4f0:	f845 bb04 	str.w	fp, [r5], #4
 800d4f4:	f04f 0b00 	mov.w	fp, #0
 800d4f8:	465b      	mov	r3, fp
 800d4fa:	7830      	ldrb	r0, [r6, #0]
 800d4fc:	9303      	str	r3, [sp, #12]
 800d4fe:	f7ff fef6 	bl	800d2ee <__hexdig_fun>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	f000 000f 	and.w	r0, r0, #15
 800d508:	4098      	lsls	r0, r3
 800d50a:	3304      	adds	r3, #4
 800d50c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d510:	e7ae      	b.n	800d470 <__gethex+0x158>
 800d512:	45b1      	cmp	r9, r6
 800d514:	d8ea      	bhi.n	800d4ec <__gethex+0x1d4>
 800d516:	2201      	movs	r2, #1
 800d518:	492a      	ldr	r1, [pc, #168]	@ (800d5c4 <__gethex+0x2ac>)
 800d51a:	4630      	mov	r0, r6
 800d51c:	9303      	str	r3, [sp, #12]
 800d51e:	f7ff fe2b 	bl	800d178 <strncmp>
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	2800      	cmp	r0, #0
 800d526:	d1e1      	bne.n	800d4ec <__gethex+0x1d4>
 800d528:	e7a2      	b.n	800d470 <__gethex+0x158>
 800d52a:	1ea9      	subs	r1, r5, #2
 800d52c:	4620      	mov	r0, r4
 800d52e:	f7fe fd5e 	bl	800bfee <__any_on>
 800d532:	2800      	cmp	r0, #0
 800d534:	d0c2      	beq.n	800d4bc <__gethex+0x1a4>
 800d536:	f04f 0903 	mov.w	r9, #3
 800d53a:	e7c1      	b.n	800d4c0 <__gethex+0x1a8>
 800d53c:	da09      	bge.n	800d552 <__gethex+0x23a>
 800d53e:	1b75      	subs	r5, r6, r5
 800d540:	4621      	mov	r1, r4
 800d542:	9801      	ldr	r0, [sp, #4]
 800d544:	462a      	mov	r2, r5
 800d546:	1b7f      	subs	r7, r7, r5
 800d548:	f7fe fb10 	bl	800bb6c <__lshift>
 800d54c:	4604      	mov	r4, r0
 800d54e:	f100 0a14 	add.w	sl, r0, #20
 800d552:	f04f 0900 	mov.w	r9, #0
 800d556:	e7b8      	b.n	800d4ca <__gethex+0x1b2>
 800d558:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d55c:	42bd      	cmp	r5, r7
 800d55e:	dd6f      	ble.n	800d640 <__gethex+0x328>
 800d560:	1bed      	subs	r5, r5, r7
 800d562:	42ae      	cmp	r6, r5
 800d564:	dc34      	bgt.n	800d5d0 <__gethex+0x2b8>
 800d566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d022      	beq.n	800d5b4 <__gethex+0x29c>
 800d56e:	2b03      	cmp	r3, #3
 800d570:	d024      	beq.n	800d5bc <__gethex+0x2a4>
 800d572:	2b01      	cmp	r3, #1
 800d574:	d115      	bne.n	800d5a2 <__gethex+0x28a>
 800d576:	42ae      	cmp	r6, r5
 800d578:	d113      	bne.n	800d5a2 <__gethex+0x28a>
 800d57a:	2e01      	cmp	r6, #1
 800d57c:	d10b      	bne.n	800d596 <__gethex+0x27e>
 800d57e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d582:	2562      	movs	r5, #98	@ 0x62
 800d584:	9a02      	ldr	r2, [sp, #8]
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	2301      	movs	r3, #1
 800d58a:	6123      	str	r3, [r4, #16]
 800d58c:	f8ca 3000 	str.w	r3, [sl]
 800d590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d592:	601c      	str	r4, [r3, #0]
 800d594:	e73a      	b.n	800d40c <__gethex+0xf4>
 800d596:	1e71      	subs	r1, r6, #1
 800d598:	4620      	mov	r0, r4
 800d59a:	f7fe fd28 	bl	800bfee <__any_on>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d1ed      	bne.n	800d57e <__gethex+0x266>
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	9801      	ldr	r0, [sp, #4]
 800d5a6:	f7fe f8c7 	bl	800b738 <_Bfree>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5ae:	2550      	movs	r5, #80	@ 0x50
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	e72b      	b.n	800d40c <__gethex+0xf4>
 800d5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1f3      	bne.n	800d5a2 <__gethex+0x28a>
 800d5ba:	e7e0      	b.n	800d57e <__gethex+0x266>
 800d5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1dd      	bne.n	800d57e <__gethex+0x266>
 800d5c2:	e7ee      	b.n	800d5a2 <__gethex+0x28a>
 800d5c4:	0800e168 	.word	0x0800e168
 800d5c8:	0800e001 	.word	0x0800e001
 800d5cc:	0800e316 	.word	0x0800e316
 800d5d0:	1e6f      	subs	r7, r5, #1
 800d5d2:	f1b9 0f00 	cmp.w	r9, #0
 800d5d6:	d130      	bne.n	800d63a <__gethex+0x322>
 800d5d8:	b127      	cbz	r7, 800d5e4 <__gethex+0x2cc>
 800d5da:	4639      	mov	r1, r7
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f7fe fd06 	bl	800bfee <__any_on>
 800d5e2:	4681      	mov	r9, r0
 800d5e4:	117a      	asrs	r2, r7, #5
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	f007 071f 	and.w	r7, r7, #31
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	40bb      	lsls	r3, r7
 800d5f6:	1b76      	subs	r6, r6, r5
 800d5f8:	2502      	movs	r5, #2
 800d5fa:	4213      	tst	r3, r2
 800d5fc:	bf18      	it	ne
 800d5fe:	f049 0902 	orrne.w	r9, r9, #2
 800d602:	f7ff fe23 	bl	800d24c <rshift>
 800d606:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d60a:	f1b9 0f00 	cmp.w	r9, #0
 800d60e:	d047      	beq.n	800d6a0 <__gethex+0x388>
 800d610:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d614:	2b02      	cmp	r3, #2
 800d616:	d015      	beq.n	800d644 <__gethex+0x32c>
 800d618:	2b03      	cmp	r3, #3
 800d61a:	d017      	beq.n	800d64c <__gethex+0x334>
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d109      	bne.n	800d634 <__gethex+0x31c>
 800d620:	f019 0f02 	tst.w	r9, #2
 800d624:	d006      	beq.n	800d634 <__gethex+0x31c>
 800d626:	f8da 3000 	ldr.w	r3, [sl]
 800d62a:	ea49 0903 	orr.w	r9, r9, r3
 800d62e:	f019 0f01 	tst.w	r9, #1
 800d632:	d10e      	bne.n	800d652 <__gethex+0x33a>
 800d634:	f045 0510 	orr.w	r5, r5, #16
 800d638:	e032      	b.n	800d6a0 <__gethex+0x388>
 800d63a:	f04f 0901 	mov.w	r9, #1
 800d63e:	e7d1      	b.n	800d5e4 <__gethex+0x2cc>
 800d640:	2501      	movs	r5, #1
 800d642:	e7e2      	b.n	800d60a <__gethex+0x2f2>
 800d644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d646:	f1c3 0301 	rsb	r3, r3, #1
 800d64a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d0f0      	beq.n	800d634 <__gethex+0x31c>
 800d652:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d656:	f104 0314 	add.w	r3, r4, #20
 800d65a:	f04f 0c00 	mov.w	ip, #0
 800d65e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d662:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d666:	4618      	mov	r0, r3
 800d668:	f853 2b04 	ldr.w	r2, [r3], #4
 800d66c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d670:	d01b      	beq.n	800d6aa <__gethex+0x392>
 800d672:	3201      	adds	r2, #1
 800d674:	6002      	str	r2, [r0, #0]
 800d676:	2d02      	cmp	r5, #2
 800d678:	f104 0314 	add.w	r3, r4, #20
 800d67c:	d13c      	bne.n	800d6f8 <__gethex+0x3e0>
 800d67e:	f8d8 2000 	ldr.w	r2, [r8]
 800d682:	3a01      	subs	r2, #1
 800d684:	42b2      	cmp	r2, r6
 800d686:	d109      	bne.n	800d69c <__gethex+0x384>
 800d688:	1171      	asrs	r1, r6, #5
 800d68a:	2201      	movs	r2, #1
 800d68c:	f006 061f 	and.w	r6, r6, #31
 800d690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d694:	fa02 f606 	lsl.w	r6, r2, r6
 800d698:	421e      	tst	r6, r3
 800d69a:	d13a      	bne.n	800d712 <__gethex+0x3fa>
 800d69c:	f045 0520 	orr.w	r5, r5, #32
 800d6a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a2:	601c      	str	r4, [r3, #0]
 800d6a4:	9b02      	ldr	r3, [sp, #8]
 800d6a6:	601f      	str	r7, [r3, #0]
 800d6a8:	e6b0      	b.n	800d40c <__gethex+0xf4>
 800d6aa:	4299      	cmp	r1, r3
 800d6ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800d6b0:	d8d9      	bhi.n	800d666 <__gethex+0x34e>
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	459b      	cmp	fp, r3
 800d6b6:	db17      	blt.n	800d6e8 <__gethex+0x3d0>
 800d6b8:	6861      	ldr	r1, [r4, #4]
 800d6ba:	9801      	ldr	r0, [sp, #4]
 800d6bc:	3101      	adds	r1, #1
 800d6be:	f7fd fffb 	bl	800b6b8 <_Balloc>
 800d6c2:	4681      	mov	r9, r0
 800d6c4:	b918      	cbnz	r0, 800d6ce <__gethex+0x3b6>
 800d6c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d730 <__gethex+0x418>)
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	2184      	movs	r1, #132	@ 0x84
 800d6cc:	e6c5      	b.n	800d45a <__gethex+0x142>
 800d6ce:	6922      	ldr	r2, [r4, #16]
 800d6d0:	f104 010c 	add.w	r1, r4, #12
 800d6d4:	300c      	adds	r0, #12
 800d6d6:	3202      	adds	r2, #2
 800d6d8:	0092      	lsls	r2, r2, #2
 800d6da:	f7ff fd6f 	bl	800d1bc <memcpy>
 800d6de:	4621      	mov	r1, r4
 800d6e0:	464c      	mov	r4, r9
 800d6e2:	9801      	ldr	r0, [sp, #4]
 800d6e4:	f7fe f828 	bl	800b738 <_Bfree>
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6f0:	6122      	str	r2, [r4, #16]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	615a      	str	r2, [r3, #20]
 800d6f6:	e7be      	b.n	800d676 <__gethex+0x35e>
 800d6f8:	6922      	ldr	r2, [r4, #16]
 800d6fa:	455a      	cmp	r2, fp
 800d6fc:	dd0b      	ble.n	800d716 <__gethex+0x3fe>
 800d6fe:	2101      	movs	r1, #1
 800d700:	4620      	mov	r0, r4
 800d702:	f7ff fda3 	bl	800d24c <rshift>
 800d706:	3701      	adds	r7, #1
 800d708:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d70c:	42bb      	cmp	r3, r7
 800d70e:	f6ff aee0 	blt.w	800d4d2 <__gethex+0x1ba>
 800d712:	2501      	movs	r5, #1
 800d714:	e7c2      	b.n	800d69c <__gethex+0x384>
 800d716:	f016 061f 	ands.w	r6, r6, #31
 800d71a:	d0fa      	beq.n	800d712 <__gethex+0x3fa>
 800d71c:	4453      	add	r3, sl
 800d71e:	f1c6 0620 	rsb	r6, r6, #32
 800d722:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d726:	f7fe f8bb 	bl	800b8a0 <__hi0bits>
 800d72a:	42b0      	cmp	r0, r6
 800d72c:	dbe7      	blt.n	800d6fe <__gethex+0x3e6>
 800d72e:	e7f0      	b.n	800d712 <__gethex+0x3fa>
 800d730:	0800e001 	.word	0x0800e001

0800d734 <L_shift>:
 800d734:	f1c2 0208 	rsb	r2, r2, #8
 800d738:	0092      	lsls	r2, r2, #2
 800d73a:	b570      	push	{r4, r5, r6, lr}
 800d73c:	f1c2 0620 	rsb	r6, r2, #32
 800d740:	6843      	ldr	r3, [r0, #4]
 800d742:	6804      	ldr	r4, [r0, #0]
 800d744:	fa03 f506 	lsl.w	r5, r3, r6
 800d748:	40d3      	lsrs	r3, r2
 800d74a:	432c      	orrs	r4, r5
 800d74c:	6004      	str	r4, [r0, #0]
 800d74e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d752:	4288      	cmp	r0, r1
 800d754:	d3f4      	bcc.n	800d740 <L_shift+0xc>
 800d756:	bd70      	pop	{r4, r5, r6, pc}

0800d758 <__match>:
 800d758:	6803      	ldr	r3, [r0, #0]
 800d75a:	3301      	adds	r3, #1
 800d75c:	b530      	push	{r4, r5, lr}
 800d75e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d762:	b914      	cbnz	r4, 800d76a <__match+0x12>
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	2001      	movs	r0, #1
 800d768:	bd30      	pop	{r4, r5, pc}
 800d76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d76e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d772:	2d19      	cmp	r5, #25
 800d774:	bf98      	it	ls
 800d776:	3220      	addls	r2, #32
 800d778:	42a2      	cmp	r2, r4
 800d77a:	d0f0      	beq.n	800d75e <__match+0x6>
 800d77c:	2000      	movs	r0, #0
 800d77e:	e7f3      	b.n	800d768 <__match+0x10>

0800d780 <__hexnan>:
 800d780:	680b      	ldr	r3, [r1, #0]
 800d782:	6801      	ldr	r1, [r0, #0]
 800d784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d788:	115e      	asrs	r6, r3, #5
 800d78a:	f013 031f 	ands.w	r3, r3, #31
 800d78e:	f04f 0500 	mov.w	r5, #0
 800d792:	b087      	sub	sp, #28
 800d794:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d798:	4682      	mov	sl, r0
 800d79a:	4690      	mov	r8, r2
 800d79c:	46ab      	mov	fp, r5
 800d79e:	bf18      	it	ne
 800d7a0:	3604      	addne	r6, #4
 800d7a2:	9301      	str	r3, [sp, #4]
 800d7a4:	9502      	str	r5, [sp, #8]
 800d7a6:	1f37      	subs	r7, r6, #4
 800d7a8:	f846 5c04 	str.w	r5, [r6, #-4]
 800d7ac:	46b9      	mov	r9, r7
 800d7ae:	463c      	mov	r4, r7
 800d7b0:	1c4b      	adds	r3, r1, #1
 800d7b2:	784a      	ldrb	r2, [r1, #1]
 800d7b4:	9303      	str	r3, [sp, #12]
 800d7b6:	b342      	cbz	r2, 800d80a <__hexnan+0x8a>
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	9105      	str	r1, [sp, #20]
 800d7bc:	9204      	str	r2, [sp, #16]
 800d7be:	f7ff fd96 	bl	800d2ee <__hexdig_fun>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d151      	bne.n	800d86a <__hexnan+0xea>
 800d7c6:	9a04      	ldr	r2, [sp, #16]
 800d7c8:	9905      	ldr	r1, [sp, #20]
 800d7ca:	2a20      	cmp	r2, #32
 800d7cc:	d818      	bhi.n	800d800 <__hexnan+0x80>
 800d7ce:	9b02      	ldr	r3, [sp, #8]
 800d7d0:	459b      	cmp	fp, r3
 800d7d2:	dd13      	ble.n	800d7fc <__hexnan+0x7c>
 800d7d4:	454c      	cmp	r4, r9
 800d7d6:	d206      	bcs.n	800d7e6 <__hexnan+0x66>
 800d7d8:	2d07      	cmp	r5, #7
 800d7da:	dc04      	bgt.n	800d7e6 <__hexnan+0x66>
 800d7dc:	462a      	mov	r2, r5
 800d7de:	4649      	mov	r1, r9
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7ff ffa7 	bl	800d734 <L_shift>
 800d7e6:	4544      	cmp	r4, r8
 800d7e8:	d951      	bls.n	800d88e <__hexnan+0x10e>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f1a4 0904 	sub.w	r9, r4, #4
 800d7f0:	f8cd b008 	str.w	fp, [sp, #8]
 800d7f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7f8:	461d      	mov	r5, r3
 800d7fa:	464c      	mov	r4, r9
 800d7fc:	9903      	ldr	r1, [sp, #12]
 800d7fe:	e7d7      	b.n	800d7b0 <__hexnan+0x30>
 800d800:	2a29      	cmp	r2, #41	@ 0x29
 800d802:	d156      	bne.n	800d8b2 <__hexnan+0x132>
 800d804:	3102      	adds	r1, #2
 800d806:	f8ca 1000 	str.w	r1, [sl]
 800d80a:	f1bb 0f00 	cmp.w	fp, #0
 800d80e:	d050      	beq.n	800d8b2 <__hexnan+0x132>
 800d810:	454c      	cmp	r4, r9
 800d812:	d206      	bcs.n	800d822 <__hexnan+0xa2>
 800d814:	2d07      	cmp	r5, #7
 800d816:	dc04      	bgt.n	800d822 <__hexnan+0xa2>
 800d818:	462a      	mov	r2, r5
 800d81a:	4649      	mov	r1, r9
 800d81c:	4620      	mov	r0, r4
 800d81e:	f7ff ff89 	bl	800d734 <L_shift>
 800d822:	4544      	cmp	r4, r8
 800d824:	d935      	bls.n	800d892 <__hexnan+0x112>
 800d826:	f1a8 0204 	sub.w	r2, r8, #4
 800d82a:	4623      	mov	r3, r4
 800d82c:	f853 1b04 	ldr.w	r1, [r3], #4
 800d830:	429f      	cmp	r7, r3
 800d832:	f842 1f04 	str.w	r1, [r2, #4]!
 800d836:	d2f9      	bcs.n	800d82c <__hexnan+0xac>
 800d838:	1b3b      	subs	r3, r7, r4
 800d83a:	3e03      	subs	r6, #3
 800d83c:	3401      	adds	r4, #1
 800d83e:	2200      	movs	r2, #0
 800d840:	f023 0303 	bic.w	r3, r3, #3
 800d844:	3304      	adds	r3, #4
 800d846:	42b4      	cmp	r4, r6
 800d848:	bf88      	it	hi
 800d84a:	2304      	movhi	r3, #4
 800d84c:	4443      	add	r3, r8
 800d84e:	f843 2b04 	str.w	r2, [r3], #4
 800d852:	429f      	cmp	r7, r3
 800d854:	d2fb      	bcs.n	800d84e <__hexnan+0xce>
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	b91b      	cbnz	r3, 800d862 <__hexnan+0xe2>
 800d85a:	4547      	cmp	r7, r8
 800d85c:	d127      	bne.n	800d8ae <__hexnan+0x12e>
 800d85e:	2301      	movs	r3, #1
 800d860:	603b      	str	r3, [r7, #0]
 800d862:	2005      	movs	r0, #5
 800d864:	b007      	add	sp, #28
 800d866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86a:	3501      	adds	r5, #1
 800d86c:	f10b 0b01 	add.w	fp, fp, #1
 800d870:	2d08      	cmp	r5, #8
 800d872:	dd05      	ble.n	800d880 <__hexnan+0x100>
 800d874:	4544      	cmp	r4, r8
 800d876:	d9c1      	bls.n	800d7fc <__hexnan+0x7c>
 800d878:	2300      	movs	r3, #0
 800d87a:	3c04      	subs	r4, #4
 800d87c:	2501      	movs	r5, #1
 800d87e:	6023      	str	r3, [r4, #0]
 800d880:	6822      	ldr	r2, [r4, #0]
 800d882:	f000 000f 	and.w	r0, r0, #15
 800d886:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d88a:	6020      	str	r0, [r4, #0]
 800d88c:	e7b6      	b.n	800d7fc <__hexnan+0x7c>
 800d88e:	2508      	movs	r5, #8
 800d890:	e7b4      	b.n	800d7fc <__hexnan+0x7c>
 800d892:	9b01      	ldr	r3, [sp, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d0de      	beq.n	800d856 <__hexnan+0xd6>
 800d898:	f1c3 0320 	rsb	r3, r3, #32
 800d89c:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a0:	40da      	lsrs	r2, r3
 800d8a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d8ac:	e7d3      	b.n	800d856 <__hexnan+0xd6>
 800d8ae:	3f04      	subs	r7, #4
 800d8b0:	e7d1      	b.n	800d856 <__hexnan+0xd6>
 800d8b2:	2004      	movs	r0, #4
 800d8b4:	e7d6      	b.n	800d864 <__hexnan+0xe4>

0800d8b6 <__ascii_mbtowc>:
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	b901      	cbnz	r1, 800d8bc <__ascii_mbtowc+0x6>
 800d8ba:	a901      	add	r1, sp, #4
 800d8bc:	b142      	cbz	r2, 800d8d0 <__ascii_mbtowc+0x1a>
 800d8be:	b14b      	cbz	r3, 800d8d4 <__ascii_mbtowc+0x1e>
 800d8c0:	7813      	ldrb	r3, [r2, #0]
 800d8c2:	600b      	str	r3, [r1, #0]
 800d8c4:	7812      	ldrb	r2, [r2, #0]
 800d8c6:	1e10      	subs	r0, r2, #0
 800d8c8:	bf18      	it	ne
 800d8ca:	2001      	movne	r0, #1
 800d8cc:	b002      	add	sp, #8
 800d8ce:	4770      	bx	lr
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	e7fb      	b.n	800d8cc <__ascii_mbtowc+0x16>
 800d8d4:	f06f 0001 	mvn.w	r0, #1
 800d8d8:	e7f8      	b.n	800d8cc <__ascii_mbtowc+0x16>

0800d8da <_realloc_r>:
 800d8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8de:	4680      	mov	r8, r0
 800d8e0:	4615      	mov	r5, r2
 800d8e2:	460c      	mov	r4, r1
 800d8e4:	b921      	cbnz	r1, 800d8f0 <_realloc_r+0x16>
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ec:	f7fd be58 	b.w	800b5a0 <_malloc_r>
 800d8f0:	b92a      	cbnz	r2, 800d8fe <_realloc_r+0x24>
 800d8f2:	f7fd fde1 	bl	800b4b8 <_free_r>
 800d8f6:	2400      	movs	r4, #0
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fe:	f000 f840 	bl	800d982 <_malloc_usable_size_r>
 800d902:	4285      	cmp	r5, r0
 800d904:	4606      	mov	r6, r0
 800d906:	d802      	bhi.n	800d90e <_realloc_r+0x34>
 800d908:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d90c:	d8f4      	bhi.n	800d8f8 <_realloc_r+0x1e>
 800d90e:	4629      	mov	r1, r5
 800d910:	4640      	mov	r0, r8
 800d912:	f7fd fe45 	bl	800b5a0 <_malloc_r>
 800d916:	4607      	mov	r7, r0
 800d918:	2800      	cmp	r0, #0
 800d91a:	d0ec      	beq.n	800d8f6 <_realloc_r+0x1c>
 800d91c:	42b5      	cmp	r5, r6
 800d91e:	462a      	mov	r2, r5
 800d920:	4621      	mov	r1, r4
 800d922:	bf28      	it	cs
 800d924:	4632      	movcs	r2, r6
 800d926:	f7ff fc49 	bl	800d1bc <memcpy>
 800d92a:	4621      	mov	r1, r4
 800d92c:	4640      	mov	r0, r8
 800d92e:	463c      	mov	r4, r7
 800d930:	f7fd fdc2 	bl	800b4b8 <_free_r>
 800d934:	e7e0      	b.n	800d8f8 <_realloc_r+0x1e>

0800d936 <__ascii_wctomb>:
 800d936:	4603      	mov	r3, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	b141      	cbz	r1, 800d94e <__ascii_wctomb+0x18>
 800d93c:	2aff      	cmp	r2, #255	@ 0xff
 800d93e:	d904      	bls.n	800d94a <__ascii_wctomb+0x14>
 800d940:	228a      	movs	r2, #138	@ 0x8a
 800d942:	f04f 30ff 	mov.w	r0, #4294967295
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	4770      	bx	lr
 800d94a:	2001      	movs	r0, #1
 800d94c:	700a      	strb	r2, [r1, #0]
 800d94e:	4770      	bx	lr

0800d950 <fiprintf>:
 800d950:	b40e      	push	{r1, r2, r3}
 800d952:	b503      	push	{r0, r1, lr}
 800d954:	ab03      	add	r3, sp, #12
 800d956:	4601      	mov	r1, r0
 800d958:	4805      	ldr	r0, [pc, #20]	@ (800d970 <fiprintf+0x20>)
 800d95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d95e:	6800      	ldr	r0, [r0, #0]
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	f000 f83f 	bl	800d9e4 <_vfiprintf_r>
 800d966:	b002      	add	sp, #8
 800d968:	f85d eb04 	ldr.w	lr, [sp], #4
 800d96c:	b003      	add	sp, #12
 800d96e:	4770      	bx	lr
 800d970:	20000018 	.word	0x20000018

0800d974 <abort>:
 800d974:	2006      	movs	r0, #6
 800d976:	b508      	push	{r3, lr}
 800d978:	f000 fa08 	bl	800dd8c <raise>
 800d97c:	2001      	movs	r0, #1
 800d97e:	f7f3 fd9f 	bl	80014c0 <_exit>

0800d982 <_malloc_usable_size_r>:
 800d982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d986:	1f18      	subs	r0, r3, #4
 800d988:	2b00      	cmp	r3, #0
 800d98a:	bfbc      	itt	lt
 800d98c:	580b      	ldrlt	r3, [r1, r0]
 800d98e:	18c0      	addlt	r0, r0, r3
 800d990:	4770      	bx	lr

0800d992 <__sfputc_r>:
 800d992:	6893      	ldr	r3, [r2, #8]
 800d994:	3b01      	subs	r3, #1
 800d996:	2b00      	cmp	r3, #0
 800d998:	6093      	str	r3, [r2, #8]
 800d99a:	b410      	push	{r4}
 800d99c:	da08      	bge.n	800d9b0 <__sfputc_r+0x1e>
 800d99e:	6994      	ldr	r4, [r2, #24]
 800d9a0:	42a3      	cmp	r3, r4
 800d9a2:	db01      	blt.n	800d9a8 <__sfputc_r+0x16>
 800d9a4:	290a      	cmp	r1, #10
 800d9a6:	d103      	bne.n	800d9b0 <__sfputc_r+0x1e>
 800d9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ac:	f000 b932 	b.w	800dc14 <__swbuf_r>
 800d9b0:	6813      	ldr	r3, [r2, #0]
 800d9b2:	1c58      	adds	r0, r3, #1
 800d9b4:	6010      	str	r0, [r2, #0]
 800d9b6:	4608      	mov	r0, r1
 800d9b8:	7019      	strb	r1, [r3, #0]
 800d9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <__sfputs_r>:
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	460f      	mov	r7, r1
 800d9c6:	4614      	mov	r4, r2
 800d9c8:	18d5      	adds	r5, r2, r3
 800d9ca:	42ac      	cmp	r4, r5
 800d9cc:	d101      	bne.n	800d9d2 <__sfputs_r+0x12>
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	e007      	b.n	800d9e2 <__sfputs_r+0x22>
 800d9d2:	463a      	mov	r2, r7
 800d9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d8:	4630      	mov	r0, r6
 800d9da:	f7ff ffda 	bl	800d992 <__sfputc_r>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d1f3      	bne.n	800d9ca <__sfputs_r+0xa>
 800d9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9e4 <_vfiprintf_r>:
 800d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e8:	460d      	mov	r5, r1
 800d9ea:	b09d      	sub	sp, #116	@ 0x74
 800d9ec:	4614      	mov	r4, r2
 800d9ee:	4698      	mov	r8, r3
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	b118      	cbz	r0, 800d9fc <_vfiprintf_r+0x18>
 800d9f4:	6a03      	ldr	r3, [r0, #32]
 800d9f6:	b90b      	cbnz	r3, 800d9fc <_vfiprintf_r+0x18>
 800d9f8:	f7fc fddc 	bl	800a5b4 <__sinit>
 800d9fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9fe:	07d9      	lsls	r1, r3, #31
 800da00:	d405      	bmi.n	800da0e <_vfiprintf_r+0x2a>
 800da02:	89ab      	ldrh	r3, [r5, #12]
 800da04:	059a      	lsls	r2, r3, #22
 800da06:	d402      	bmi.n	800da0e <_vfiprintf_r+0x2a>
 800da08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da0a:	f7fc feea 	bl	800a7e2 <__retarget_lock_acquire_recursive>
 800da0e:	89ab      	ldrh	r3, [r5, #12]
 800da10:	071b      	lsls	r3, r3, #28
 800da12:	d501      	bpl.n	800da18 <_vfiprintf_r+0x34>
 800da14:	692b      	ldr	r3, [r5, #16]
 800da16:	b99b      	cbnz	r3, 800da40 <_vfiprintf_r+0x5c>
 800da18:	4629      	mov	r1, r5
 800da1a:	4630      	mov	r0, r6
 800da1c:	f000 f938 	bl	800dc90 <__swsetup_r>
 800da20:	b170      	cbz	r0, 800da40 <_vfiprintf_r+0x5c>
 800da22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da24:	07dc      	lsls	r4, r3, #31
 800da26:	d504      	bpl.n	800da32 <_vfiprintf_r+0x4e>
 800da28:	f04f 30ff 	mov.w	r0, #4294967295
 800da2c:	b01d      	add	sp, #116	@ 0x74
 800da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da32:	89ab      	ldrh	r3, [r5, #12]
 800da34:	0598      	lsls	r0, r3, #22
 800da36:	d4f7      	bmi.n	800da28 <_vfiprintf_r+0x44>
 800da38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da3a:	f7fc fed3 	bl	800a7e4 <__retarget_lock_release_recursive>
 800da3e:	e7f3      	b.n	800da28 <_vfiprintf_r+0x44>
 800da40:	2300      	movs	r3, #0
 800da42:	f8cd 800c 	str.w	r8, [sp, #12]
 800da46:	f04f 0901 	mov.w	r9, #1
 800da4a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800dc00 <_vfiprintf_r+0x21c>
 800da4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da50:	2320      	movs	r3, #32
 800da52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da56:	2330      	movs	r3, #48	@ 0x30
 800da58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da5c:	4623      	mov	r3, r4
 800da5e:	469a      	mov	sl, r3
 800da60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da64:	b10a      	cbz	r2, 800da6a <_vfiprintf_r+0x86>
 800da66:	2a25      	cmp	r2, #37	@ 0x25
 800da68:	d1f9      	bne.n	800da5e <_vfiprintf_r+0x7a>
 800da6a:	ebba 0b04 	subs.w	fp, sl, r4
 800da6e:	d00b      	beq.n	800da88 <_vfiprintf_r+0xa4>
 800da70:	465b      	mov	r3, fp
 800da72:	4622      	mov	r2, r4
 800da74:	4629      	mov	r1, r5
 800da76:	4630      	mov	r0, r6
 800da78:	f7ff ffa2 	bl	800d9c0 <__sfputs_r>
 800da7c:	3001      	adds	r0, #1
 800da7e:	f000 80a7 	beq.w	800dbd0 <_vfiprintf_r+0x1ec>
 800da82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da84:	445a      	add	r2, fp
 800da86:	9209      	str	r2, [sp, #36]	@ 0x24
 800da88:	f89a 3000 	ldrb.w	r3, [sl]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f000 809f 	beq.w	800dbd0 <_vfiprintf_r+0x1ec>
 800da92:	2300      	movs	r3, #0
 800da94:	f04f 32ff 	mov.w	r2, #4294967295
 800da98:	f10a 0a01 	add.w	sl, sl, #1
 800da9c:	9304      	str	r3, [sp, #16]
 800da9e:	9307      	str	r3, [sp, #28]
 800daa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800daa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800daa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daaa:	4654      	mov	r4, sl
 800daac:	2205      	movs	r2, #5
 800daae:	4854      	ldr	r0, [pc, #336]	@ (800dc00 <_vfiprintf_r+0x21c>)
 800dab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab4:	f7fc fe97 	bl	800a7e6 <memchr>
 800dab8:	9a04      	ldr	r2, [sp, #16]
 800daba:	b9d8      	cbnz	r0, 800daf4 <_vfiprintf_r+0x110>
 800dabc:	06d1      	lsls	r1, r2, #27
 800dabe:	bf44      	itt	mi
 800dac0:	2320      	movmi	r3, #32
 800dac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dac6:	0713      	lsls	r3, r2, #28
 800dac8:	bf44      	itt	mi
 800daca:	232b      	movmi	r3, #43	@ 0x2b
 800dacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dad0:	f89a 3000 	ldrb.w	r3, [sl]
 800dad4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dad6:	d015      	beq.n	800db04 <_vfiprintf_r+0x120>
 800dad8:	9a07      	ldr	r2, [sp, #28]
 800dada:	4654      	mov	r4, sl
 800dadc:	2000      	movs	r0, #0
 800dade:	f04f 0c0a 	mov.w	ip, #10
 800dae2:	4621      	mov	r1, r4
 800dae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dae8:	3b30      	subs	r3, #48	@ 0x30
 800daea:	2b09      	cmp	r3, #9
 800daec:	d94b      	bls.n	800db86 <_vfiprintf_r+0x1a2>
 800daee:	b1b0      	cbz	r0, 800db1e <_vfiprintf_r+0x13a>
 800daf0:	9207      	str	r2, [sp, #28]
 800daf2:	e014      	b.n	800db1e <_vfiprintf_r+0x13a>
 800daf4:	eba0 0308 	sub.w	r3, r0, r8
 800daf8:	46a2      	mov	sl, r4
 800dafa:	fa09 f303 	lsl.w	r3, r9, r3
 800dafe:	4313      	orrs	r3, r2
 800db00:	9304      	str	r3, [sp, #16]
 800db02:	e7d2      	b.n	800daaa <_vfiprintf_r+0xc6>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	1d19      	adds	r1, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	9103      	str	r1, [sp, #12]
 800db0e:	bfbb      	ittet	lt
 800db10:	425b      	neglt	r3, r3
 800db12:	f042 0202 	orrlt.w	r2, r2, #2
 800db16:	9307      	strge	r3, [sp, #28]
 800db18:	9307      	strlt	r3, [sp, #28]
 800db1a:	bfb8      	it	lt
 800db1c:	9204      	strlt	r2, [sp, #16]
 800db1e:	7823      	ldrb	r3, [r4, #0]
 800db20:	2b2e      	cmp	r3, #46	@ 0x2e
 800db22:	d10a      	bne.n	800db3a <_vfiprintf_r+0x156>
 800db24:	7863      	ldrb	r3, [r4, #1]
 800db26:	2b2a      	cmp	r3, #42	@ 0x2a
 800db28:	d132      	bne.n	800db90 <_vfiprintf_r+0x1ac>
 800db2a:	9b03      	ldr	r3, [sp, #12]
 800db2c:	3402      	adds	r4, #2
 800db2e:	1d1a      	adds	r2, r3, #4
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db36:	9203      	str	r2, [sp, #12]
 800db38:	9305      	str	r3, [sp, #20]
 800db3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc10 <_vfiprintf_r+0x22c>
 800db3e:	2203      	movs	r2, #3
 800db40:	7821      	ldrb	r1, [r4, #0]
 800db42:	4650      	mov	r0, sl
 800db44:	f7fc fe4f 	bl	800a7e6 <memchr>
 800db48:	b138      	cbz	r0, 800db5a <_vfiprintf_r+0x176>
 800db4a:	eba0 000a 	sub.w	r0, r0, sl
 800db4e:	2240      	movs	r2, #64	@ 0x40
 800db50:	9b04      	ldr	r3, [sp, #16]
 800db52:	3401      	adds	r4, #1
 800db54:	4082      	lsls	r2, r0
 800db56:	4313      	orrs	r3, r2
 800db58:	9304      	str	r3, [sp, #16]
 800db5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5e:	2206      	movs	r2, #6
 800db60:	4828      	ldr	r0, [pc, #160]	@ (800dc04 <_vfiprintf_r+0x220>)
 800db62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db66:	f7fc fe3e 	bl	800a7e6 <memchr>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d03f      	beq.n	800dbee <_vfiprintf_r+0x20a>
 800db6e:	4b26      	ldr	r3, [pc, #152]	@ (800dc08 <_vfiprintf_r+0x224>)
 800db70:	bb1b      	cbnz	r3, 800dbba <_vfiprintf_r+0x1d6>
 800db72:	9b03      	ldr	r3, [sp, #12]
 800db74:	3307      	adds	r3, #7
 800db76:	f023 0307 	bic.w	r3, r3, #7
 800db7a:	3308      	adds	r3, #8
 800db7c:	9303      	str	r3, [sp, #12]
 800db7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db80:	443b      	add	r3, r7
 800db82:	9309      	str	r3, [sp, #36]	@ 0x24
 800db84:	e76a      	b.n	800da5c <_vfiprintf_r+0x78>
 800db86:	fb0c 3202 	mla	r2, ip, r2, r3
 800db8a:	460c      	mov	r4, r1
 800db8c:	2001      	movs	r0, #1
 800db8e:	e7a8      	b.n	800dae2 <_vfiprintf_r+0xfe>
 800db90:	2300      	movs	r3, #0
 800db92:	3401      	adds	r4, #1
 800db94:	f04f 0c0a 	mov.w	ip, #10
 800db98:	4619      	mov	r1, r3
 800db9a:	9305      	str	r3, [sp, #20]
 800db9c:	4620      	mov	r0, r4
 800db9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba2:	3a30      	subs	r2, #48	@ 0x30
 800dba4:	2a09      	cmp	r2, #9
 800dba6:	d903      	bls.n	800dbb0 <_vfiprintf_r+0x1cc>
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d0c6      	beq.n	800db3a <_vfiprintf_r+0x156>
 800dbac:	9105      	str	r1, [sp, #20]
 800dbae:	e7c4      	b.n	800db3a <_vfiprintf_r+0x156>
 800dbb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e7f0      	b.n	800db9c <_vfiprintf_r+0x1b8>
 800dbba:	ab03      	add	r3, sp, #12
 800dbbc:	462a      	mov	r2, r5
 800dbbe:	a904      	add	r1, sp, #16
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	4b11      	ldr	r3, [pc, #68]	@ (800dc0c <_vfiprintf_r+0x228>)
 800dbc6:	f7fb fe9b 	bl	8009900 <_printf_float>
 800dbca:	4607      	mov	r7, r0
 800dbcc:	1c78      	adds	r0, r7, #1
 800dbce:	d1d6      	bne.n	800db7e <_vfiprintf_r+0x19a>
 800dbd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbd2:	07d9      	lsls	r1, r3, #31
 800dbd4:	d405      	bmi.n	800dbe2 <_vfiprintf_r+0x1fe>
 800dbd6:	89ab      	ldrh	r3, [r5, #12]
 800dbd8:	059a      	lsls	r2, r3, #22
 800dbda:	d402      	bmi.n	800dbe2 <_vfiprintf_r+0x1fe>
 800dbdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbde:	f7fc fe01 	bl	800a7e4 <__retarget_lock_release_recursive>
 800dbe2:	89ab      	ldrh	r3, [r5, #12]
 800dbe4:	065b      	lsls	r3, r3, #25
 800dbe6:	f53f af1f 	bmi.w	800da28 <_vfiprintf_r+0x44>
 800dbea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbec:	e71e      	b.n	800da2c <_vfiprintf_r+0x48>
 800dbee:	ab03      	add	r3, sp, #12
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	a904      	add	r1, sp, #16
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	4b04      	ldr	r3, [pc, #16]	@ (800dc0c <_vfiprintf_r+0x228>)
 800dbfa:	f7fc f91d 	bl	8009e38 <_printf_i>
 800dbfe:	e7e4      	b.n	800dbca <_vfiprintf_r+0x1e6>
 800dc00:	0800e2c1 	.word	0x0800e2c1
 800dc04:	0800e2cb 	.word	0x0800e2cb
 800dc08:	08009901 	.word	0x08009901
 800dc0c:	0800d9c1 	.word	0x0800d9c1
 800dc10:	0800e2c7 	.word	0x0800e2c7

0800dc14 <__swbuf_r>:
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc16:	460e      	mov	r6, r1
 800dc18:	4614      	mov	r4, r2
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	b118      	cbz	r0, 800dc26 <__swbuf_r+0x12>
 800dc1e:	6a03      	ldr	r3, [r0, #32]
 800dc20:	b90b      	cbnz	r3, 800dc26 <__swbuf_r+0x12>
 800dc22:	f7fc fcc7 	bl	800a5b4 <__sinit>
 800dc26:	69a3      	ldr	r3, [r4, #24]
 800dc28:	60a3      	str	r3, [r4, #8]
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	071a      	lsls	r2, r3, #28
 800dc2e:	d501      	bpl.n	800dc34 <__swbuf_r+0x20>
 800dc30:	6923      	ldr	r3, [r4, #16]
 800dc32:	b943      	cbnz	r3, 800dc46 <__swbuf_r+0x32>
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f000 f82a 	bl	800dc90 <__swsetup_r>
 800dc3c:	b118      	cbz	r0, 800dc46 <__swbuf_r+0x32>
 800dc3e:	f04f 37ff 	mov.w	r7, #4294967295
 800dc42:	4638      	mov	r0, r7
 800dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	b2f6      	uxtb	r6, r6
 800dc4a:	6922      	ldr	r2, [r4, #16]
 800dc4c:	4637      	mov	r7, r6
 800dc4e:	1a98      	subs	r0, r3, r2
 800dc50:	6963      	ldr	r3, [r4, #20]
 800dc52:	4283      	cmp	r3, r0
 800dc54:	dc05      	bgt.n	800dc62 <__swbuf_r+0x4e>
 800dc56:	4621      	mov	r1, r4
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f7ff fa4b 	bl	800d0f4 <_fflush_r>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d1ed      	bne.n	800dc3e <__swbuf_r+0x2a>
 800dc62:	68a3      	ldr	r3, [r4, #8]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	60a3      	str	r3, [r4, #8]
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	6022      	str	r2, [r4, #0]
 800dc6e:	701e      	strb	r6, [r3, #0]
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	6962      	ldr	r2, [r4, #20]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d004      	beq.n	800dc82 <__swbuf_r+0x6e>
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	07db      	lsls	r3, r3, #31
 800dc7c:	d5e1      	bpl.n	800dc42 <__swbuf_r+0x2e>
 800dc7e:	2e0a      	cmp	r6, #10
 800dc80:	d1df      	bne.n	800dc42 <__swbuf_r+0x2e>
 800dc82:	4621      	mov	r1, r4
 800dc84:	4628      	mov	r0, r5
 800dc86:	f7ff fa35 	bl	800d0f4 <_fflush_r>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d0d9      	beq.n	800dc42 <__swbuf_r+0x2e>
 800dc8e:	e7d6      	b.n	800dc3e <__swbuf_r+0x2a>

0800dc90 <__swsetup_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4b29      	ldr	r3, [pc, #164]	@ (800dd38 <__swsetup_r+0xa8>)
 800dc94:	4605      	mov	r5, r0
 800dc96:	460c      	mov	r4, r1
 800dc98:	6818      	ldr	r0, [r3, #0]
 800dc9a:	b118      	cbz	r0, 800dca4 <__swsetup_r+0x14>
 800dc9c:	6a03      	ldr	r3, [r0, #32]
 800dc9e:	b90b      	cbnz	r3, 800dca4 <__swsetup_r+0x14>
 800dca0:	f7fc fc88 	bl	800a5b4 <__sinit>
 800dca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dca8:	0719      	lsls	r1, r3, #28
 800dcaa:	d422      	bmi.n	800dcf2 <__swsetup_r+0x62>
 800dcac:	06da      	lsls	r2, r3, #27
 800dcae:	d407      	bmi.n	800dcc0 <__swsetup_r+0x30>
 800dcb0:	2209      	movs	r2, #9
 800dcb2:	602a      	str	r2, [r5, #0]
 800dcb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcbc:	81a3      	strh	r3, [r4, #12]
 800dcbe:	e033      	b.n	800dd28 <__swsetup_r+0x98>
 800dcc0:	0758      	lsls	r0, r3, #29
 800dcc2:	d512      	bpl.n	800dcea <__swsetup_r+0x5a>
 800dcc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcc6:	b141      	cbz	r1, 800dcda <__swsetup_r+0x4a>
 800dcc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dccc:	4299      	cmp	r1, r3
 800dcce:	d002      	beq.n	800dcd6 <__swsetup_r+0x46>
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f7fd fbf1 	bl	800b4b8 <_free_r>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dce0:	81a3      	strh	r3, [r4, #12]
 800dce2:	2300      	movs	r3, #0
 800dce4:	6063      	str	r3, [r4, #4]
 800dce6:	6923      	ldr	r3, [r4, #16]
 800dce8:	6023      	str	r3, [r4, #0]
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	f043 0308 	orr.w	r3, r3, #8
 800dcf0:	81a3      	strh	r3, [r4, #12]
 800dcf2:	6923      	ldr	r3, [r4, #16]
 800dcf4:	b94b      	cbnz	r3, 800dd0a <__swsetup_r+0x7a>
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd00:	d003      	beq.n	800dd0a <__swsetup_r+0x7a>
 800dd02:	4621      	mov	r1, r4
 800dd04:	4628      	mov	r0, r5
 800dd06:	f000 f882 	bl	800de0e <__smakebuf_r>
 800dd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd0e:	f013 0201 	ands.w	r2, r3, #1
 800dd12:	d00a      	beq.n	800dd2a <__swsetup_r+0x9a>
 800dd14:	2200      	movs	r2, #0
 800dd16:	60a2      	str	r2, [r4, #8]
 800dd18:	6962      	ldr	r2, [r4, #20]
 800dd1a:	4252      	negs	r2, r2
 800dd1c:	61a2      	str	r2, [r4, #24]
 800dd1e:	6922      	ldr	r2, [r4, #16]
 800dd20:	b942      	cbnz	r2, 800dd34 <__swsetup_r+0xa4>
 800dd22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd26:	d1c5      	bne.n	800dcb4 <__swsetup_r+0x24>
 800dd28:	bd38      	pop	{r3, r4, r5, pc}
 800dd2a:	0799      	lsls	r1, r3, #30
 800dd2c:	bf58      	it	pl
 800dd2e:	6962      	ldrpl	r2, [r4, #20]
 800dd30:	60a2      	str	r2, [r4, #8]
 800dd32:	e7f4      	b.n	800dd1e <__swsetup_r+0x8e>
 800dd34:	2000      	movs	r0, #0
 800dd36:	e7f7      	b.n	800dd28 <__swsetup_r+0x98>
 800dd38:	20000018 	.word	0x20000018

0800dd3c <_raise_r>:
 800dd3c:	291f      	cmp	r1, #31
 800dd3e:	b538      	push	{r3, r4, r5, lr}
 800dd40:	4605      	mov	r5, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	d904      	bls.n	800dd50 <_raise_r+0x14>
 800dd46:	2316      	movs	r3, #22
 800dd48:	6003      	str	r3, [r0, #0]
 800dd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4e:	bd38      	pop	{r3, r4, r5, pc}
 800dd50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd52:	b112      	cbz	r2, 800dd5a <_raise_r+0x1e>
 800dd54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd58:	b94b      	cbnz	r3, 800dd6e <_raise_r+0x32>
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f000 f830 	bl	800ddc0 <_getpid_r>
 800dd60:	4622      	mov	r2, r4
 800dd62:	4601      	mov	r1, r0
 800dd64:	4628      	mov	r0, r5
 800dd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd6a:	f000 b817 	b.w	800dd9c <_kill_r>
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d00a      	beq.n	800dd88 <_raise_r+0x4c>
 800dd72:	1c59      	adds	r1, r3, #1
 800dd74:	d103      	bne.n	800dd7e <_raise_r+0x42>
 800dd76:	2316      	movs	r3, #22
 800dd78:	6003      	str	r3, [r0, #0]
 800dd7a:	2001      	movs	r0, #1
 800dd7c:	e7e7      	b.n	800dd4e <_raise_r+0x12>
 800dd7e:	2100      	movs	r1, #0
 800dd80:	4620      	mov	r0, r4
 800dd82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd86:	4798      	blx	r3
 800dd88:	2000      	movs	r0, #0
 800dd8a:	e7e0      	b.n	800dd4e <_raise_r+0x12>

0800dd8c <raise>:
 800dd8c:	4b02      	ldr	r3, [pc, #8]	@ (800dd98 <raise+0xc>)
 800dd8e:	4601      	mov	r1, r0
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	f7ff bfd3 	b.w	800dd3c <_raise_r>
 800dd96:	bf00      	nop
 800dd98:	20000018 	.word	0x20000018

0800dd9c <_kill_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	2300      	movs	r3, #0
 800dda0:	4d06      	ldr	r5, [pc, #24]	@ (800ddbc <_kill_r+0x20>)
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	4611      	mov	r1, r2
 800dda8:	602b      	str	r3, [r5, #0]
 800ddaa:	f7f3 fb79 	bl	80014a0 <_kill>
 800ddae:	1c43      	adds	r3, r0, #1
 800ddb0:	d102      	bne.n	800ddb8 <_kill_r+0x1c>
 800ddb2:	682b      	ldr	r3, [r5, #0]
 800ddb4:	b103      	cbz	r3, 800ddb8 <_kill_r+0x1c>
 800ddb6:	6023      	str	r3, [r4, #0]
 800ddb8:	bd38      	pop	{r3, r4, r5, pc}
 800ddba:	bf00      	nop
 800ddbc:	2000041c 	.word	0x2000041c

0800ddc0 <_getpid_r>:
 800ddc0:	f7f3 bb66 	b.w	8001490 <_getpid>

0800ddc4 <__swhatbuf_r>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddcc:	b096      	sub	sp, #88	@ 0x58
 800ddce:	4615      	mov	r5, r2
 800ddd0:	2900      	cmp	r1, #0
 800ddd2:	461e      	mov	r6, r3
 800ddd4:	da0c      	bge.n	800ddf0 <__swhatbuf_r+0x2c>
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	2100      	movs	r1, #0
 800ddda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddde:	bf14      	ite	ne
 800dde0:	2340      	movne	r3, #64	@ 0x40
 800dde2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dde6:	2000      	movs	r0, #0
 800dde8:	6031      	str	r1, [r6, #0]
 800ddea:	602b      	str	r3, [r5, #0]
 800ddec:	b016      	add	sp, #88	@ 0x58
 800ddee:	bd70      	pop	{r4, r5, r6, pc}
 800ddf0:	466a      	mov	r2, sp
 800ddf2:	f000 f849 	bl	800de88 <_fstat_r>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	dbed      	blt.n	800ddd6 <__swhatbuf_r+0x12>
 800ddfa:	9901      	ldr	r1, [sp, #4]
 800ddfc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de04:	4259      	negs	r1, r3
 800de06:	4159      	adcs	r1, r3
 800de08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de0c:	e7eb      	b.n	800dde6 <__swhatbuf_r+0x22>

0800de0e <__smakebuf_r>:
 800de0e:	898b      	ldrh	r3, [r1, #12]
 800de10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de12:	079d      	lsls	r5, r3, #30
 800de14:	4606      	mov	r6, r0
 800de16:	460c      	mov	r4, r1
 800de18:	d507      	bpl.n	800de2a <__smakebuf_r+0x1c>
 800de1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de1e:	6023      	str	r3, [r4, #0]
 800de20:	6123      	str	r3, [r4, #16]
 800de22:	2301      	movs	r3, #1
 800de24:	6163      	str	r3, [r4, #20]
 800de26:	b003      	add	sp, #12
 800de28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de2a:	ab01      	add	r3, sp, #4
 800de2c:	466a      	mov	r2, sp
 800de2e:	f7ff ffc9 	bl	800ddc4 <__swhatbuf_r>
 800de32:	9f00      	ldr	r7, [sp, #0]
 800de34:	4605      	mov	r5, r0
 800de36:	4630      	mov	r0, r6
 800de38:	4639      	mov	r1, r7
 800de3a:	f7fd fbb1 	bl	800b5a0 <_malloc_r>
 800de3e:	b948      	cbnz	r0, 800de54 <__smakebuf_r+0x46>
 800de40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de44:	059a      	lsls	r2, r3, #22
 800de46:	d4ee      	bmi.n	800de26 <__smakebuf_r+0x18>
 800de48:	f023 0303 	bic.w	r3, r3, #3
 800de4c:	f043 0302 	orr.w	r3, r3, #2
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	e7e2      	b.n	800de1a <__smakebuf_r+0xc>
 800de54:	89a3      	ldrh	r3, [r4, #12]
 800de56:	6020      	str	r0, [r4, #0]
 800de58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de5c:	81a3      	strh	r3, [r4, #12]
 800de5e:	9b01      	ldr	r3, [sp, #4]
 800de60:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de64:	b15b      	cbz	r3, 800de7e <__smakebuf_r+0x70>
 800de66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de6a:	4630      	mov	r0, r6
 800de6c:	f000 f81e 	bl	800deac <_isatty_r>
 800de70:	b128      	cbz	r0, 800de7e <__smakebuf_r+0x70>
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	f023 0303 	bic.w	r3, r3, #3
 800de78:	f043 0301 	orr.w	r3, r3, #1
 800de7c:	81a3      	strh	r3, [r4, #12]
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	431d      	orrs	r5, r3
 800de82:	81a5      	strh	r5, [r4, #12]
 800de84:	e7cf      	b.n	800de26 <__smakebuf_r+0x18>
	...

0800de88 <_fstat_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	2300      	movs	r3, #0
 800de8c:	4d06      	ldr	r5, [pc, #24]	@ (800dea8 <_fstat_r+0x20>)
 800de8e:	4604      	mov	r4, r0
 800de90:	4608      	mov	r0, r1
 800de92:	4611      	mov	r1, r2
 800de94:	602b      	str	r3, [r5, #0]
 800de96:	f7f3 fb63 	bl	8001560 <_fstat>
 800de9a:	1c43      	adds	r3, r0, #1
 800de9c:	d102      	bne.n	800dea4 <_fstat_r+0x1c>
 800de9e:	682b      	ldr	r3, [r5, #0]
 800dea0:	b103      	cbz	r3, 800dea4 <_fstat_r+0x1c>
 800dea2:	6023      	str	r3, [r4, #0]
 800dea4:	bd38      	pop	{r3, r4, r5, pc}
 800dea6:	bf00      	nop
 800dea8:	2000041c 	.word	0x2000041c

0800deac <_isatty_r>:
 800deac:	b538      	push	{r3, r4, r5, lr}
 800deae:	2300      	movs	r3, #0
 800deb0:	4d05      	ldr	r5, [pc, #20]	@ (800dec8 <_isatty_r+0x1c>)
 800deb2:	4604      	mov	r4, r0
 800deb4:	4608      	mov	r0, r1
 800deb6:	602b      	str	r3, [r5, #0]
 800deb8:	f7f3 fb62 	bl	8001580 <_isatty>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d102      	bne.n	800dec6 <_isatty_r+0x1a>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	b103      	cbz	r3, 800dec6 <_isatty_r+0x1a>
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	2000041c 	.word	0x2000041c

0800decc <_init>:
 800decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dece:	bf00      	nop
 800ded0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ded2:	bc08      	pop	{r3}
 800ded4:	469e      	mov	lr, r3
 800ded6:	4770      	bx	lr

0800ded8 <_fini>:
 800ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deda:	bf00      	nop
 800dedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dede:	bc08      	pop	{r3}
 800dee0:	469e      	mov	lr, r3
 800dee2:	4770      	bx	lr
